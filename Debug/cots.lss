
cots.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00002c8e  00002d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000e8  008000e8  00002daa  2**0
                  ALLOC
  3 .stab         00002ef8  00000000  00000000  00002dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001366  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000700a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000714a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000072ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ab9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000acfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000af89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 13 	call	0x267a	; 0x267a <main>
      8a:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad eb       	ldi	r26, 0xBD	; 189
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d eb       	ldi	r24, 0xBD	; 189
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	8f e0       	ldi	r24, 0x0F	; 15
     b6a:	80 83       	st	Z, r24

	PORTA=PORTA_INIT_VALUE;
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VALUE;
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTD=PORTD_INIT_VALUE;
     b78:	e2 e3       	ldi	r30, 0x32	; 50
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	80 83       	st	Z, r24
	PORTD=PORTC_INIT_VALUE;
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DIO_SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"


u8 DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	28 97       	sbiw	r28, 0x08	; 8
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
     ba6:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	88 30       	cpi	r24, 0x08	; 8
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_SetPinDirection+0x24>
     bae:	f4 c0       	rjmp	.+488    	; 0xd98 <DIO_SetPinDirection+0x20c>
	{
        if(u8PinDirCopy==DIO_u8PIN_INPUT)
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	88 23       	and	r24, r24
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <DIO_SetPinDirection+0x2c>
     bb6:	77 c0       	rjmp	.+238    	; 0xca6 <DIO_SetPinDirection+0x11a>
        {
            switch(u8PortIdCopy)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	38 87       	std	Y+8, r19	; 0x08
     bc0:	2f 83       	std	Y+7, r18	; 0x07
     bc2:	8f 81       	ldd	r24, Y+7	; 0x07
     bc4:	98 85       	ldd	r25, Y+8	; 0x08
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	59 f1       	breq	.+86     	; 0xc22 <DIO_SetPinDirection+0x96>
     bcc:	2f 81       	ldd	r18, Y+7	; 0x07
     bce:	38 85       	ldd	r19, Y+8	; 0x08
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_SetPinDirection+0x54>
     bd6:	8f 81       	ldd	r24, Y+7	; 0x07
     bd8:	98 85       	ldd	r25, Y+8	; 0x08
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	69 f0       	breq	.+26     	; 0xbf8 <DIO_SetPinDirection+0x6c>
     bde:	60 c0       	rjmp	.+192    	; 0xca0 <DIO_SetPinDirection+0x114>
     be0:	2f 81       	ldd	r18, Y+7	; 0x07
     be2:	38 85       	ldd	r19, Y+8	; 0x08
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	89 f1       	breq	.+98     	; 0xc4c <DIO_SetPinDirection+0xc0>
     bea:	8f 81       	ldd	r24, Y+7	; 0x07
     bec:	98 85       	ldd	r25, Y+8	; 0x08
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_SetPinDirection+0x6a>
     bf4:	40 c0       	rjmp	.+128    	; 0xc76 <DIO_SetPinDirection+0xea>
     bf6:	54 c0       	rjmp	.+168    	; 0xca0 <DIO_SetPinDirection+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(DDRA,u8PinIdCopy); break;
     bf8:	aa e3       	ldi	r26, 0x3A	; 58
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	ea e3       	ldi	r30, 0x3A	; 58
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	48 2f       	mov	r20, r24
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	02 2e       	mov	r0, r18
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <DIO_SetPinDirection+0x8a>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	0a 94       	dec	r0
     c18:	e2 f7       	brpl	.-8      	; 0xc12 <DIO_SetPinDirection+0x86>
     c1a:	80 95       	com	r24
     c1c:	84 23       	and	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	bd c0       	rjmp	.+378    	; 0xd9c <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,u8PinIdCopy); break;
     c22:	a7 e3       	ldi	r26, 0x37	; 55
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e7 e3       	ldi	r30, 0x37	; 55
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	48 2f       	mov	r20, r24
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 2e       	mov	r0, r18
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_SetPinDirection+0xb4>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_SetPinDirection+0xb0>
     c44:	80 95       	com	r24
     c46:	84 23       	and	r24, r20
     c48:	8c 93       	st	X, r24
     c4a:	a8 c0       	rjmp	.+336    	; 0xd9c <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,u8PinIdCopy); break;
     c4c:	a4 e3       	ldi	r26, 0x34	; 52
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e4 e3       	ldi	r30, 0x34	; 52
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	48 2f       	mov	r20, r24
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	02 2e       	mov	r0, r18
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <DIO_SetPinDirection+0xde>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <DIO_SetPinDirection+0xda>
     c6e:	80 95       	com	r24
     c70:	84 23       	and	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	93 c0       	rjmp	.+294    	; 0xd9c <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,u8PinIdCopy); break;
     c76:	a1 e3       	ldi	r26, 0x31	; 49
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e1 e3       	ldi	r30, 0x31	; 49
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	48 2f       	mov	r20, r24
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	02 2e       	mov	r0, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <DIO_SetPinDirection+0x108>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	0a 94       	dec	r0
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <DIO_SetPinDirection+0x104>
     c98:	80 95       	com	r24
     c9a:	84 23       	and	r24, r20
     c9c:	8c 93       	st	X, r24
     c9e:	7e c0       	rjmp	.+252    	; 0xd9c <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	7b c0       	rjmp	.+246    	; 0xd9c <DIO_SetPinDirection+0x210>
            }
        }
        else if(u8PinDirCopy==DIO_u8PIN_OUTPUT)
     ca6:	8c 81       	ldd	r24, Y+4	; 0x04
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <DIO_SetPinDirection+0x122>
     cac:	72 c0       	rjmp	.+228    	; 0xd92 <DIO_SetPinDirection+0x206>
        {
            switch(u8PortIdCopy)
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	3e 83       	std	Y+6, r19	; 0x06
     cb6:	2d 83       	std	Y+5, r18	; 0x05
     cb8:	8d 81       	ldd	r24, Y+5	; 0x05
     cba:	9e 81       	ldd	r25, Y+6	; 0x06
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	91 05       	cpc	r25, r1
     cc0:	49 f1       	breq	.+82     	; 0xd14 <DIO_SetPinDirection+0x188>
     cc2:	2d 81       	ldd	r18, Y+5	; 0x05
     cc4:	3e 81       	ldd	r19, Y+6	; 0x06
     cc6:	22 30       	cpi	r18, 0x02	; 2
     cc8:	31 05       	cpc	r19, r1
     cca:	2c f4       	brge	.+10     	; 0xcd6 <DIO_SetPinDirection+0x14a>
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	61 f0       	breq	.+24     	; 0xcec <DIO_SetPinDirection+0x160>
     cd4:	5b c0       	rjmp	.+182    	; 0xd8c <DIO_SetPinDirection+0x200>
     cd6:	2d 81       	ldd	r18, Y+5	; 0x05
     cd8:	3e 81       	ldd	r19, Y+6	; 0x06
     cda:	22 30       	cpi	r18, 0x02	; 2
     cdc:	31 05       	cpc	r19, r1
     cde:	71 f1       	breq	.+92     	; 0xd3c <DIO_SetPinDirection+0x1b0>
     ce0:	8d 81       	ldd	r24, Y+5	; 0x05
     ce2:	9e 81       	ldd	r25, Y+6	; 0x06
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	e9 f1       	breq	.+122    	; 0xd64 <DIO_SetPinDirection+0x1d8>
     cea:	50 c0       	rjmp	.+160    	; 0xd8c <DIO_SetPinDirection+0x200>
            {
			case DIO_u8PORTA : SET_BIT(DDRA,u8PinIdCopy); break;
     cec:	aa e3       	ldi	r26, 0x3A	; 58
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e3       	ldi	r30, 0x3A	; 58
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_SetPinDirection+0x17e>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_SetPinDirection+0x17a>
     d0e:	84 2b       	or	r24, r20
     d10:	8c 93       	st	X, r24
     d12:	44 c0       	rjmp	.+136    	; 0xd9c <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,u8PinIdCopy); break;
     d14:	a7 e3       	ldi	r26, 0x37	; 55
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e3       	ldi	r30, 0x37	; 55
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8b 81       	ldd	r24, Y+3	; 0x03
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_SetPinDirection+0x1a6>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_SetPinDirection+0x1a2>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	30 c0       	rjmp	.+96     	; 0xd9c <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,u8PinIdCopy); break;
     d3c:	a4 e3       	ldi	r26, 0x34	; 52
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e4 e3       	ldi	r30, 0x34	; 52
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_SetPinDirection+0x1ce>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_SetPinDirection+0x1ca>
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	1c c0       	rjmp	.+56     	; 0xd9c <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,u8PinIdCopy); break;
     d64:	a1 e3       	ldi	r26, 0x31	; 49
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e1 e3       	ldi	r30, 0x31	; 49
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_SetPinDirection+0x1f6>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_SetPinDirection+0x1f2>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1; break;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <DIO_SetPinDirection+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_SetPinDirection+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9e:	28 96       	adiw	r28, 0x08	; 8
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <DIO_SetPortDirection>:

u8 DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <DIO_SetPortDirection+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <DIO_SetPortDirection+0x8>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
     dc2:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3d 83       	std	Y+5, r19	; 0x05
     dcc:	2c 83       	std	Y+4, r18	; 0x04
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <DIO_SetPortDirection+0x5c>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	2c f4       	brge	.+10     	; 0xdec <DIO_SetPortDirection+0x3c>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	61 f0       	breq	.+24     	; 0xe02 <DIO_SetPortDirection+0x52>
     dea:	1f c0       	rjmp	.+62     	; 0xe2a <DIO_SetPortDirection+0x7a>
     dec:	2c 81       	ldd	r18, Y+4	; 0x04
     dee:	3d 81       	ldd	r19, Y+5	; 0x05
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	81 f0       	breq	.+32     	; 0xe16 <DIO_SetPortDirection+0x66>
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	9d 81       	ldd	r25, Y+5	; 0x05
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	91 05       	cpc	r25, r1
     dfe:	81 f0       	breq	.+32     	; 0xe20 <DIO_SetPortDirection+0x70>
     e00:	14 c0       	rjmp	.+40     	; 0xe2a <DIO_SetPortDirection+0x7a>
    {
			case DIO_u8PORTA : DDRA = u8PortDir ; break;
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTB : DDRB = u8PortDir ; break;
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	80 83       	st	Z, r24
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTC : DDRC = u8PortDir ; break;
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	80 83       	st	Z, r24
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTD : DDRD = u8PortDir ; break;
     e20:	e1 e3       	ldi	r30, 0x31	; 49
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	80 83       	st	Z, r24
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_SetPortDirection+0x7e>
            default: Local_u8ErrorState=1; break;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	28 97       	sbiw	r28, 0x08	; 8
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	6b 83       	std	Y+3, r22	; 0x03
     e58:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
     e5a:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	08 f0       	brcs	.+2      	; 0xe64 <DIO_SetPinValue+0x24>
     e62:	f4 c0       	rjmp	.+488    	; 0x104c <DIO_SetPinValue+0x20c>
	{
        if(u8PinValCopy==DIO_u8PIN_LOW)
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	88 23       	and	r24, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_SetPinValue+0x2c>
     e6a:	77 c0       	rjmp	.+238    	; 0xf5a <DIO_SetPinValue+0x11a>
        {
            switch(u8PortIdCopy)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	38 87       	std	Y+8, r19	; 0x08
     e74:	2f 83       	std	Y+7, r18	; 0x07
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	59 f1       	breq	.+86     	; 0xed6 <DIO_SetPinValue+0x96>
     e80:	2f 81       	ldd	r18, Y+7	; 0x07
     e82:	38 85       	ldd	r19, Y+8	; 0x08
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_SetPinValue+0x54>
     e8a:	8f 81       	ldd	r24, Y+7	; 0x07
     e8c:	98 85       	ldd	r25, Y+8	; 0x08
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	69 f0       	breq	.+26     	; 0xeac <DIO_SetPinValue+0x6c>
     e92:	60 c0       	rjmp	.+192    	; 0xf54 <DIO_SetPinValue+0x114>
     e94:	2f 81       	ldd	r18, Y+7	; 0x07
     e96:	38 85       	ldd	r19, Y+8	; 0x08
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	89 f1       	breq	.+98     	; 0xf00 <DIO_SetPinValue+0xc0>
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_SetPinValue+0x6a>
     ea8:	40 c0       	rjmp	.+128    	; 0xf2a <DIO_SetPinValue+0xea>
     eaa:	54 c0       	rjmp	.+168    	; 0xf54 <DIO_SetPinValue+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(PORTA,u8PinIdCopy); break;
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_SetPinValue+0x8a>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_SetPinValue+0x86>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	bd c0       	rjmp	.+378    	; 0x1050 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,u8PinIdCopy); break;
     ed6:	a8 e3       	ldi	r26, 0x38	; 56
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e8 e3       	ldi	r30, 0x38	; 56
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_SetPinValue+0xb4>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_SetPinValue+0xb0>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	a8 c0       	rjmp	.+336    	; 0x1050 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,u8PinIdCopy); break;
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_SetPinValue+0xde>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_SetPinValue+0xda>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	93 c0       	rjmp	.+294    	; 0x1050 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,u8PinIdCopy); break;
     f2a:	a2 e3       	ldi	r26, 0x32	; 50
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e2 e3       	ldi	r30, 0x32	; 50
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_SetPinValue+0x108>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_SetPinValue+0x104>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	7e c0       	rjmp	.+252    	; 0x1050 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	7b c0       	rjmp	.+246    	; 0x1050 <DIO_SetPinValue+0x210>
            }
        }
        else if(u8PinValCopy==DIO_u8PIN_HIGH)
     f5a:	8c 81       	ldd	r24, Y+4	; 0x04
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	09 f0       	breq	.+2      	; 0xf62 <DIO_SetPinValue+0x122>
     f60:	72 c0       	rjmp	.+228    	; 0x1046 <DIO_SetPinValue+0x206>
        {
            switch(u8PortIdCopy)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3e 83       	std	Y+6, r19	; 0x06
     f6a:	2d 83       	std	Y+5, r18	; 0x05
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	49 f1       	breq	.+82     	; 0xfc8 <DIO_SetPinValue+0x188>
     f76:	2d 81       	ldd	r18, Y+5	; 0x05
     f78:	3e 81       	ldd	r19, Y+6	; 0x06
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	2c f4       	brge	.+10     	; 0xf8a <DIO_SetPinValue+0x14a>
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	61 f0       	breq	.+24     	; 0xfa0 <DIO_SetPinValue+0x160>
     f88:	5b c0       	rjmp	.+182    	; 0x1040 <DIO_SetPinValue+0x200>
     f8a:	2d 81       	ldd	r18, Y+5	; 0x05
     f8c:	3e 81       	ldd	r19, Y+6	; 0x06
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	71 f1       	breq	.+92     	; 0xff0 <DIO_SetPinValue+0x1b0>
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	e9 f1       	breq	.+122    	; 0x1018 <DIO_SetPinValue+0x1d8>
     f9e:	50 c0       	rjmp	.+160    	; 0x1040 <DIO_SetPinValue+0x200>
            {
			case DIO_u8PORTA : SET_BIT(PORTA,u8PinIdCopy); break;
     fa0:	ab e3       	ldi	r26, 0x3B	; 59
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	eb e3       	ldi	r30, 0x3B	; 59
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	48 2f       	mov	r20, r24
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 2e       	mov	r0, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_SetPinValue+0x17e>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	0a 94       	dec	r0
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_SetPinValue+0x17a>
     fc2:	84 2b       	or	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	44 c0       	rjmp	.+136    	; 0x1050 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,u8PinIdCopy); break;
     fc8:	a8 e3       	ldi	r26, 0x38	; 56
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e8 e3       	ldi	r30, 0x38	; 56
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 2e       	mov	r0, r18
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <DIO_SetPinValue+0x1a6>
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	0a 94       	dec	r0
     fe8:	e2 f7       	brpl	.-8      	; 0xfe2 <DIO_SetPinValue+0x1a2>
     fea:	84 2b       	or	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	30 c0       	rjmp	.+96     	; 0x1050 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,u8PinIdCopy); break;
     ff0:	a5 e3       	ldi	r26, 0x35	; 53
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e5 e3       	ldi	r30, 0x35	; 53
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_SetPinValue+0x1ce>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_SetPinValue+0x1ca>
    1012:	84 2b       	or	r24, r20
    1014:	8c 93       	st	X, r24
    1016:	1c c0       	rjmp	.+56     	; 0x1050 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,u8PinIdCopy); break;
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_SetPinValue+0x1f6>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_SetPinValue+0x1f2>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1; break;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <DIO_SetPinValue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_SetPinValue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	28 96       	adiw	r28, 0x08	; 8
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <DIO_SetPortValue>:

u8 DIO_SetPortValue     (u8 u8PortId, u8 u8PortVal)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <DIO_SetPortValue+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <DIO_SetPortValue+0x8>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    1076:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3d 83       	std	Y+5, r19	; 0x05
    1080:	2c 83       	std	Y+4, r18	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	d1 f0       	breq	.+52     	; 0x10c0 <DIO_SetPortValue+0x5c>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <DIO_SetPortValue+0x3c>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 f0       	breq	.+24     	; 0x10b6 <DIO_SetPortValue+0x52>
    109e:	1f c0       	rjmp	.+62     	; 0x10de <DIO_SetPortValue+0x7a>
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	3d 81       	ldd	r19, Y+5	; 0x05
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	81 f0       	breq	.+32     	; 0x10ca <DIO_SetPortValue+0x66>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	81 f0       	breq	.+32     	; 0x10d4 <DIO_SetPortValue+0x70>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <DIO_SetPortValue+0x7a>
    {
			case DIO_u8PORTA : PORTA = u8PortVal ; break;
    10b6:	eb e3       	ldi	r30, 0x3B	; 59
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	80 83       	st	Z, r24
    10be:	11 c0       	rjmp	.+34     	; 0x10e2 <DIO_SetPortValue+0x7e>
			case DIO_u8PORTB : PORTB = u8PortVal ; break;
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	80 83       	st	Z, r24
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <DIO_SetPortValue+0x7e>
			case DIO_u8PORTC : PORTC = u8PortVal ; break;
    10ca:	e5 e3       	ldi	r30, 0x35	; 53
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	80 83       	st	Z, r24
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <DIO_SetPortValue+0x7e>
			case DIO_u8PORTD : PORTD = u8PortVal ; break;
    10d4:	e2 e3       	ldi	r30, 0x32	; 50
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	80 83       	st	Z, r24
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_SetPortValue+0x7e>
            default: Local_u8ErrorState=1; break;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy , u8* Pu8_ValCopy)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	27 97       	sbiw	r28, 0x07	; 7
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	6b 83       	std	Y+3, r22	; 0x03
    110c:	5d 83       	std	Y+5, r21	; 0x05
    110e:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    1110:	19 82       	std	Y+1, r1	; 0x01
    if((Pu8_ValCopy!=NULL && u8PinIdCopy <= DIO_u8PIN7))
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	09 f4       	brne	.+2      	; 0x111c <DIO_GetPinValue+0x28>
    111a:	78 c0       	rjmp	.+240    	; 0x120c <DIO_GetPinValue+0x118>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	08 f0       	brcs	.+2      	; 0x1124 <DIO_GetPinValue+0x30>
    1122:	74 c0       	rjmp	.+232    	; 0x120c <DIO_GetPinValue+0x118>
    {
    switch(u8PortIdCopy)
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3f 83       	std	Y+7, r19	; 0x07
    112c:	2e 83       	std	Y+6, r18	; 0x06
    112e:	4e 81       	ldd	r20, Y+6	; 0x06
    1130:	5f 81       	ldd	r21, Y+7	; 0x07
    1132:	41 30       	cpi	r20, 0x01	; 1
    1134:	51 05       	cpc	r21, r1
    1136:	59 f1       	breq	.+86     	; 0x118e <DIO_GetPinValue+0x9a>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	34 f4       	brge	.+12     	; 0x114e <DIO_GetPinValue+0x5a>
    1142:	2e 81       	ldd	r18, Y+6	; 0x06
    1144:	3f 81       	ldd	r19, Y+7	; 0x07
    1146:	21 15       	cp	r18, r1
    1148:	31 05       	cpc	r19, r1
    114a:	69 f0       	breq	.+26     	; 0x1166 <DIO_GetPinValue+0x72>
    114c:	5c c0       	rjmp	.+184    	; 0x1206 <DIO_GetPinValue+0x112>
    114e:	4e 81       	ldd	r20, Y+6	; 0x06
    1150:	5f 81       	ldd	r21, Y+7	; 0x07
    1152:	42 30       	cpi	r20, 0x02	; 2
    1154:	51 05       	cpc	r21, r1
    1156:	79 f1       	breq	.+94     	; 0x11b6 <DIO_GetPinValue+0xc2>
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_GetPinValue+0x70>
    1162:	3d c0       	rjmp	.+122    	; 0x11de <DIO_GetPinValue+0xea>
    1164:	50 c0       	rjmp	.+160    	; 0x1206 <DIO_GetPinValue+0x112>
        {
			case DIO_u8PORTA : *Pu8_ValCopy = GET_BIT(PINA , u8PinIdCopy) ; break;
    1166:	e9 e3       	ldi	r30, 0x39	; 57
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_GetPinValue+0x8a>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_GetPinValue+0x86>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	ec 81       	ldd	r30, Y+4	; 0x04
    1188:	fd 81       	ldd	r31, Y+5	; 0x05
    118a:	80 83       	st	Z, r24
    118c:	41 c0       	rjmp	.+130    	; 0x1210 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTB : *Pu8_ValCopy = GET_BIT(PINB , u8PinIdCopy) ; break;
    118e:	e6 e3       	ldi	r30, 0x36	; 54
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_GetPinValue+0xb2>
    11a2:	55 95       	asr	r21
    11a4:	47 95       	ror	r20
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_GetPinValue+0xae>
    11aa:	ca 01       	movw	r24, r20
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	ec 81       	ldd	r30, Y+4	; 0x04
    11b0:	fd 81       	ldd	r31, Y+5	; 0x05
    11b2:	80 83       	st	Z, r24
    11b4:	2d c0       	rjmp	.+90     	; 0x1210 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTC : *Pu8_ValCopy = GET_BIT(PINC , u8PinIdCopy) ; break;
    11b6:	e3 e3       	ldi	r30, 0x33	; 51
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_GetPinValue+0xda>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_GetPinValue+0xd6>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	ec 81       	ldd	r30, Y+4	; 0x04
    11d8:	fd 81       	ldd	r31, Y+5	; 0x05
    11da:	80 83       	st	Z, r24
    11dc:	19 c0       	rjmp	.+50     	; 0x1210 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTD : *Pu8_ValCopy = GET_BIT(PIND , u8PinIdCopy) ; break;
    11de:	e0 e3       	ldi	r30, 0x30	; 48
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_GetPinValue+0x102>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_GetPinValue+0xfe>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1200:	fd 81       	ldd	r31, Y+5	; 0x05
    1202:	80 83       	st	Z, r24
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <DIO_GetPinValue+0x11c>
            default: Local_u8ErrorState=1; break;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_GetPinValue+0x11c>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1210:	89 81       	ldd	r24, Y+1	; 0x01

}
    1212:	27 96       	adiw	r28, 0x07	; 7
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <SWITCH_u8Switchgetpressed>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "SWITCH_interface.h"
#include <util/delay.h>

// Function to get the pressed state of a SWITCH
u8 SWITCH_u8Switchgetpressed(const SWITCH_T *SWITCH, u8 *copySwitchState) {
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	69 97       	sbiw	r28, 0x19	; 25
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	9a 8b       	std	Y+18, r25	; 0x12
    123a:	89 8b       	std	Y+17, r24	; 0x11
    123c:	7c 8b       	std	Y+20, r23	; 0x14
    123e:	6b 8b       	std	Y+19, r22	; 0x13
	u8 local_u8error = 0, local_pinValue;
    1240:	1f 86       	std	Y+15, r1	; 0x0f

	if ((copySwitchState != NULL) && (SWITCH != NULL) && (SWITCH->SWITCH_u8pin <= DIO_u8PIN7) && (SWITCH->SWITCH_u8port <= DIO_u8PORTD) && (SWITCH->SWITCH_u8BounceType < 2) && (SWITCH->SWITCH_u8ConnectionType < 3)) {
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	09 f4       	brne	.+2      	; 0x124c <SWITCH_u8Switchgetpressed+0x28>
    124a:	03 c1       	rjmp	.+518    	; 0x1452 <SWITCH_u8Switchgetpressed+0x22e>
    124c:	89 89       	ldd	r24, Y+17	; 0x11
    124e:	9a 89       	ldd	r25, Y+18	; 0x12
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	09 f4       	brne	.+2      	; 0x1256 <SWITCH_u8Switchgetpressed+0x32>
    1254:	fe c0       	rjmp	.+508    	; 0x1452 <SWITCH_u8Switchgetpressed+0x22e>
    1256:	e9 89       	ldd	r30, Y+17	; 0x11
    1258:	fa 89       	ldd	r31, Y+18	; 0x12
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	08 f0       	brcs	.+2      	; 0x1262 <SWITCH_u8Switchgetpressed+0x3e>
    1260:	f8 c0       	rjmp	.+496    	; 0x1452 <SWITCH_u8Switchgetpressed+0x22e>
    1262:	e9 89       	ldd	r30, Y+17	; 0x11
    1264:	fa 89       	ldd	r31, Y+18	; 0x12
    1266:	80 81       	ld	r24, Z
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	08 f0       	brcs	.+2      	; 0x126e <SWITCH_u8Switchgetpressed+0x4a>
    126c:	f2 c0       	rjmp	.+484    	; 0x1452 <SWITCH_u8Switchgetpressed+0x22e>
    126e:	e9 89       	ldd	r30, Y+17	; 0x11
    1270:	fa 89       	ldd	r31, Y+18	; 0x12
    1272:	83 81       	ldd	r24, Z+3	; 0x03
    1274:	82 30       	cpi	r24, 0x02	; 2
    1276:	08 f0       	brcs	.+2      	; 0x127a <SWITCH_u8Switchgetpressed+0x56>
    1278:	ec c0       	rjmp	.+472    	; 0x1452 <SWITCH_u8Switchgetpressed+0x22e>
    127a:	e9 89       	ldd	r30, Y+17	; 0x11
    127c:	fa 89       	ldd	r31, Y+18	; 0x12
    127e:	82 81       	ldd	r24, Z+2	; 0x02
    1280:	83 30       	cpi	r24, 0x03	; 3
    1282:	08 f0       	brcs	.+2      	; 0x1286 <SWITCH_u8Switchgetpressed+0x62>
    1284:	e6 c0       	rjmp	.+460    	; 0x1452 <SWITCH_u8Switchgetpressed+0x22e>
		// Configure pin as input

		// Apply bounce or debounce based on connection type
		if (SWITCH->SWITCH_u8BounceType == SWITCH_u8Bounce) {
    1286:	e9 89       	ldd	r30, Y+17	; 0x11
    1288:	fa 89       	ldd	r31, Y+18	; 0x12
    128a:	83 81       	ldd	r24, Z+3	; 0x03
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	09 f0       	breq	.+2      	; 0x1292 <SWITCH_u8Switchgetpressed+0x6e>
    1290:	8d c0       	rjmp	.+282    	; 0x13ac <SWITCH_u8Switchgetpressed+0x188>
			// Apply bounce handling by reading the pin value after a delay
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    1292:	e9 89       	ldd	r30, Y+17	; 0x11
    1294:	fa 89       	ldd	r31, Y+18	; 0x12
    1296:	80 81       	ld	r24, Z
    1298:	e9 89       	ldd	r30, Y+17	; 0x11
    129a:	fa 89       	ldd	r31, Y+18	; 0x12
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	9e 01       	movw	r18, r28
    12a0:	20 5f       	subi	r18, 0xF0	; 240
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	69 2f       	mov	r22, r25
    12a6:	a9 01       	movw	r20, r18
    12a8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_GetPinValue>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	aa ef       	ldi	r26, 0xFA	; 250
    12b2:	b3 e4       	ldi	r27, 0x43	; 67
    12b4:	8b 87       	std	Y+11, r24	; 0x0b
    12b6:	9c 87       	std	Y+12, r25	; 0x0c
    12b8:	ad 87       	std	Y+13, r26	; 0x0d
    12ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12be:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8f 83       	std	Y+7, r24	; 0x07
    12d6:	98 87       	std	Y+8, r25	; 0x08
    12d8:	a9 87       	std	Y+9, r26	; 0x09
    12da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12dc:	6f 81       	ldd	r22, Y+7	; 0x07
    12de:	78 85       	ldd	r23, Y+8	; 0x08
    12e0:	89 85       	ldd	r24, Y+9	; 0x09
    12e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <SWITCH_u8Switchgetpressed+0xda>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <SWITCH_u8Switchgetpressed+0x158>
	else if (__tmp > 65535)
    12fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1300:	78 85       	ldd	r23, Y+8	; 0x08
    1302:	89 85       	ldd	r24, Y+9	; 0x09
    1304:	9a 85       	ldd	r25, Y+10	; 0x0a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <SWITCH_u8Switchgetpressed+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6b 85       	ldd	r22, Y+11	; 0x0b
    1318:	7c 85       	ldd	r23, Y+12	; 0x0c
    131a:	8d 85       	ldd	r24, Y+13	; 0x0d
    131c:	9e 85       	ldd	r25, Y+14	; 0x0e
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9e 83       	std	Y+6, r25	; 0x06
    133c:	8d 83       	std	Y+5, r24	; 0x05
    133e:	0f c0       	rjmp	.+30     	; 0x135e <SWITCH_u8Switchgetpressed+0x13a>
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <SWITCH_u8Switchgetpressed+0x128>
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
    1356:	9e 81       	ldd	r25, Y+6	; 0x06
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <SWITCH_u8Switchgetpressed+0x11c>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <SWITCH_u8Switchgetpressed+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6f 81       	ldd	r22, Y+7	; 0x07
    136a:	78 85       	ldd	r23, Y+8	; 0x08
    136c:	89 85       	ldd	r24, Y+9	; 0x09
    136e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	9a 83       	std	Y+2, r25	; 0x02
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <SWITCH_u8Switchgetpressed+0x164>
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    1390:	e9 89       	ldd	r30, Y+17	; 0x11
    1392:	fa 89       	ldd	r31, Y+18	; 0x12
    1394:	80 81       	ld	r24, Z
    1396:	e9 89       	ldd	r30, Y+17	; 0x11
    1398:	fa 89       	ldd	r31, Y+18	; 0x12
    139a:	91 81       	ldd	r25, Z+1	; 0x01
    139c:	9e 01       	movw	r18, r28
    139e:	20 5f       	subi	r18, 0xF0	; 240
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	69 2f       	mov	r22, r25
    13a4:	a9 01       	movw	r20, r18
    13a6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_GetPinValue>
    13aa:	12 c0       	rjmp	.+36     	; 0x13d0 <SWITCH_u8Switchgetpressed+0x1ac>
		} else if (SWITCH->SWITCH_u8BounceType == SWITCH_u8Debounce) {
    13ac:	e9 89       	ldd	r30, Y+17	; 0x11
    13ae:	fa 89       	ldd	r31, Y+18	; 0x12
    13b0:	83 81       	ldd	r24, Z+3	; 0x03
    13b2:	88 23       	and	r24, r24
    13b4:	69 f4       	brne	.+26     	; 0x13d0 <SWITCH_u8Switchgetpressed+0x1ac>
			// Apply debounce by reading the pin value twice
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    13b6:	e9 89       	ldd	r30, Y+17	; 0x11
    13b8:	fa 89       	ldd	r31, Y+18	; 0x12
    13ba:	80 81       	ld	r24, Z
    13bc:	e9 89       	ldd	r30, Y+17	; 0x11
    13be:	fa 89       	ldd	r31, Y+18	; 0x12
    13c0:	91 81       	ldd	r25, Z+1	; 0x01
    13c2:	9e 01       	movw	r18, r28
    13c4:	20 5f       	subi	r18, 0xF0	; 240
    13c6:	3f 4f       	sbci	r19, 0xFF	; 255
    13c8:	69 2f       	mov	r22, r25
    13ca:	a9 01       	movw	r20, r18
    13cc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_GetPinValue>
		}

		// Determine the switch state based on connection type and pin value
		switch (SWITCH->SWITCH_u8ConnectionType) {
    13d0:	e9 89       	ldd	r30, Y+17	; 0x11
    13d2:	fa 89       	ldd	r31, Y+18	; 0x12
    13d4:	82 81       	ldd	r24, Z+2	; 0x02
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	38 8f       	std	Y+24, r19	; 0x18
    13dc:	2f 8b       	std	Y+23, r18	; 0x17
    13de:	8f 89       	ldd	r24, Y+23	; 0x17
    13e0:	98 8d       	ldd	r25, Y+24	; 0x18
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	a1 f0       	breq	.+40     	; 0x1410 <SWITCH_u8Switchgetpressed+0x1ec>
    13e8:	2f 89       	ldd	r18, Y+23	; 0x17
    13ea:	38 8d       	ldd	r19, Y+24	; 0x18
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	d9 f0       	breq	.+54     	; 0x1428 <SWITCH_u8Switchgetpressed+0x204>
    13f2:	8f 89       	ldd	r24, Y+23	; 0x17
    13f4:	98 8d       	ldd	r25, Y+24	; 0x18
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	71 f5       	brne	.+92     	; 0x1456 <SWITCH_u8Switchgetpressed+0x232>
			case SWITCH_u8PullUp:
				*copySwitchState = (local_pinValue) ? SWITCH_u8NotPressed : SWITCH_u8Pressed;
    13fa:	88 89       	ldd	r24, Y+16	; 0x10
    13fc:	1e 8a       	std	Y+22, r1	; 0x16
    13fe:	88 23       	and	r24, r24
    1400:	11 f4       	brne	.+4      	; 0x1406 <SWITCH_u8Switchgetpressed+0x1e2>
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	9e 8b       	std	Y+22, r25	; 0x16
    1406:	eb 89       	ldd	r30, Y+19	; 0x13
    1408:	fc 89       	ldd	r31, Y+20	; 0x14
    140a:	2e 89       	ldd	r18, Y+22	; 0x16
    140c:	20 83       	st	Z, r18
    140e:	23 c0       	rjmp	.+70     	; 0x1456 <SWITCH_u8Switchgetpressed+0x232>
				break;
			case SWITCH_u8PullDown:
				*copySwitchState = (local_pinValue) ? SWITCH_u8Pressed : SWITCH_u8NotPressed;
    1410:	88 89       	ldd	r24, Y+16	; 0x10
    1412:	89 8f       	std	Y+25, r24	; 0x19
    1414:	39 8d       	ldd	r19, Y+25	; 0x19
    1416:	33 23       	and	r19, r19
    1418:	11 f0       	breq	.+4      	; 0x141e <SWITCH_u8Switchgetpressed+0x1fa>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	89 8f       	std	Y+25, r24	; 0x19
    141e:	89 8d       	ldd	r24, Y+25	; 0x19
    1420:	eb 89       	ldd	r30, Y+19	; 0x13
    1422:	fc 89       	ldd	r31, Y+20	; 0x14
    1424:	80 83       	st	Z, r24
    1426:	17 c0       	rjmp	.+46     	; 0x1456 <SWITCH_u8Switchgetpressed+0x232>
				break;
			case SWITCH_u8InternalPullUp:
				DIO_SetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, DIO_u8PIN_OUTPUT);
    1428:	e9 89       	ldd	r30, Y+17	; 0x11
    142a:	fa 89       	ldd	r31, Y+18	; 0x12
    142c:	80 81       	ld	r24, Z
    142e:	e9 89       	ldd	r30, Y+17	; 0x11
    1430:	fa 89       	ldd	r31, Y+18	; 0x12
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	69 2f       	mov	r22, r25
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
				*copySwitchState = (local_pinValue) ? SWITCH_u8NotPressed : SWITCH_u8Pressed;
    143c:	88 89       	ldd	r24, Y+16	; 0x10
    143e:	1d 8a       	std	Y+21, r1	; 0x15
    1440:	88 23       	and	r24, r24
    1442:	11 f4       	brne	.+4      	; 0x1448 <SWITCH_u8Switchgetpressed+0x224>
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	9d 8b       	std	Y+21, r25	; 0x15
    1448:	eb 89       	ldd	r30, Y+19	; 0x13
    144a:	fc 89       	ldd	r31, Y+20	; 0x14
    144c:	2d 89       	ldd	r18, Y+21	; 0x15
    144e:	20 83       	st	Z, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <SWITCH_u8Switchgetpressed+0x232>
				break;
		}
	} else {
		local_u8error = 1;  // Invalid pin, set error flag
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return local_u8error;
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1458:	69 96       	adiw	r28, 0x19	; 25
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <SWITCH_u8Switchinitialize>:

// Function to initialize a SWITCH
u8 SWITCH_u8Switchinitialize(const SWITCH_T *SWITCH) {
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <SWITCH_u8Switchinitialize+0x6>
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	9b 83       	std	Y+3, r25	; 0x03
    1478:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;
    147a:	19 82       	std	Y+1, r1	; 0x01

	if ((SWITCH != NULL) && (SWITCH->SWITCH_u8pin <= DIO_u8PIN7) && (SWITCH->SWITCH_u8port <= DIO_u8PORTD) && (SWITCH->SWITCH_u8BounceType < 2) && (SWITCH->SWITCH_u8ConnectionType < 2)) {
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	9b 81       	ldd	r25, Y+3	; 0x03
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	f9 f0       	breq	.+62     	; 0x14c2 <SWITCH_u8Switchinitialize+0x58>
    1484:	ea 81       	ldd	r30, Y+2	; 0x02
    1486:	fb 81       	ldd	r31, Y+3	; 0x03
    1488:	81 81       	ldd	r24, Z+1	; 0x01
    148a:	88 30       	cpi	r24, 0x08	; 8
    148c:	d0 f4       	brcc	.+52     	; 0x14c2 <SWITCH_u8Switchinitialize+0x58>
    148e:	ea 81       	ldd	r30, Y+2	; 0x02
    1490:	fb 81       	ldd	r31, Y+3	; 0x03
    1492:	80 81       	ld	r24, Z
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	a8 f4       	brcc	.+42     	; 0x14c2 <SWITCH_u8Switchinitialize+0x58>
    1498:	ea 81       	ldd	r30, Y+2	; 0x02
    149a:	fb 81       	ldd	r31, Y+3	; 0x03
    149c:	83 81       	ldd	r24, Z+3	; 0x03
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	80 f4       	brcc	.+32     	; 0x14c2 <SWITCH_u8Switchinitialize+0x58>
    14a2:	ea 81       	ldd	r30, Y+2	; 0x02
    14a4:	fb 81       	ldd	r31, Y+3	; 0x03
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	82 30       	cpi	r24, 0x02	; 2
    14aa:	58 f4       	brcc	.+22     	; 0x14c2 <SWITCH_u8Switchinitialize+0x58>
		DIO_SetPinDirection(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, DIO_u8PIN_INPUT);
    14ac:	ea 81       	ldd	r30, Y+2	; 0x02
    14ae:	fb 81       	ldd	r31, Y+3	; 0x03
    14b0:	80 81       	ld	r24, Z
    14b2:	ea 81       	ldd	r30, Y+2	; 0x02
    14b4:	fb 81       	ldd	r31, Y+3	; 0x03
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	69 2f       	mov	r22, r25
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_SetPinDirection>
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <SWITCH_u8Switchinitialize+0x5c>
	} else {
		local_u8error = 1;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	cf 91       	pop	r28
    14d0:	df 91       	pop	r29
    14d2:	08 95       	ret

000014d4 <LED_u8Initialize>:
#include "../../lib/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "LED_interface.h" // Include necessary definitions


u8 LED_u8Initialize(const LED_T *LED) {
    14d4:	df 93       	push	r29
    14d6:	cf 93       	push	r28
    14d8:	00 d0       	rcall	.+0      	; 0x14da <LED_u8Initialize+0x6>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <LED_u8Initialize+0x8>
    14dc:	0f 92       	push	r0
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    14e6:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	9b 81       	ldd	r25, Y+3	; 0x03
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	d1 f1       	breq	.+116    	; 0x1564 <LED_u8Initialize+0x90>
    14f0:	ea 81       	ldd	r30, Y+2	; 0x02
    14f2:	fb 81       	ldd	r31, Y+3	; 0x03
    14f4:	81 81       	ldd	r24, Z+1	; 0x01
    14f6:	88 30       	cpi	r24, 0x08	; 8
    14f8:	a8 f5       	brcc	.+106    	; 0x1564 <LED_u8Initialize+0x90>
    14fa:	ea 81       	ldd	r30, Y+2	; 0x02
    14fc:	fb 81       	ldd	r31, Y+3	; 0x03
    14fe:	80 81       	ld	r24, Z
    1500:	84 30       	cpi	r24, 0x04	; 4
    1502:	80 f5       	brcc	.+96     	; 0x1564 <LED_u8Initialize+0x90>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Configure pin as an output and set it to low
		DIO_SetPinDirection(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_OUTPUT);
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	80 81       	ld	r24, Z
    150a:	ea 81       	ldd	r30, Y+2	; 0x02
    150c:	fb 81       	ldd	r31, Y+3	; 0x03
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	69 2f       	mov	r22, r25
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_SetPinDirection>
		switch (LED->LED_u8ConnectionType) {
    1518:	ea 81       	ldd	r30, Y+2	; 0x02
    151a:	fb 81       	ldd	r31, Y+3	; 0x03
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3d 83       	std	Y+5, r19	; 0x05
    1524:	2c 83       	std	Y+4, r18	; 0x04
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	81 f0       	breq	.+32     	; 0x154e <LED_u8Initialize+0x7a>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	21 30       	cpi	r18, 0x01	; 1
    1534:	31 05       	cpc	r19, r1
    1536:	c1 f4       	brne	.+48     	; 0x1568 <LED_u8Initialize+0x94>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    1538:	ea 81       	ldd	r30, Y+2	; 0x02
    153a:	fb 81       	ldd	r31, Y+3	; 0x03
    153c:	80 81       	ld	r24, Z
    153e:	ea 81       	ldd	r30, Y+2	; 0x02
    1540:	fb 81       	ldd	r31, Y+3	; 0x03
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	69 2f       	mov	r22, r25
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    154c:	0d c0       	rjmp	.+26     	; 0x1568 <LED_u8Initialize+0x94>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    154e:	ea 81       	ldd	r30, Y+2	; 0x02
    1550:	fb 81       	ldd	r31, Y+3	; 0x03
    1552:	80 81       	ld	r24, Z
    1554:	ea 81       	ldd	r30, Y+2	; 0x02
    1556:	fb 81       	ldd	r31, Y+3	; 0x03
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	69 2f       	mov	r22, r25
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <LED_u8Initialize+0x94>
		}
		} else {
		local_u8error = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <LED_u8TurnOnLED>:

// Function to turn on an LED based on connection type
u8 LED_u8TurnOnLED(const LED_T *LED) {
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <LED_u8TurnOnLED+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <LED_u8TurnOnLED+0x8>
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	9b 83       	std	Y+3, r25	; 0x03
    158a:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    158c:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	9b 81       	ldd	r25, Y+3	; 0x03
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	81 f1       	breq	.+96     	; 0x15f6 <LED_u8TurnOnLED+0x7c>
    1596:	ea 81       	ldd	r30, Y+2	; 0x02
    1598:	fb 81       	ldd	r31, Y+3	; 0x03
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	58 f5       	brcc	.+86     	; 0x15f6 <LED_u8TurnOnLED+0x7c>
    15a0:	ea 81       	ldd	r30, Y+2	; 0x02
    15a2:	fb 81       	ldd	r31, Y+3	; 0x03
    15a4:	80 81       	ld	r24, Z
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	30 f5       	brcc	.+76     	; 0x15f6 <LED_u8TurnOnLED+0x7c>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Switch based on the connection type
		switch (LED->LED_u8ConnectionType) {
    15aa:	ea 81       	ldd	r30, Y+2	; 0x02
    15ac:	fb 81       	ldd	r31, Y+3	; 0x03
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	3d 83       	std	Y+5, r19	; 0x05
    15b6:	2c 83       	std	Y+4, r18	; 0x04
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	81 f0       	breq	.+32     	; 0x15e0 <LED_u8TurnOnLED+0x66>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	21 30       	cpi	r18, 0x01	; 1
    15c6:	31 05       	cpc	r19, r1
    15c8:	c1 f4       	brne	.+48     	; 0x15fa <LED_u8TurnOnLED+0x80>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    15ca:	ea 81       	ldd	r30, Y+2	; 0x02
    15cc:	fb 81       	ldd	r31, Y+3	; 0x03
    15ce:	80 81       	ld	r24, Z
    15d0:	ea 81       	ldd	r30, Y+2	; 0x02
    15d2:	fb 81       	ldd	r31, Y+3	; 0x03
    15d4:	91 81       	ldd	r25, Z+1	; 0x01
    15d6:	69 2f       	mov	r22, r25
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    15de:	0d c0       	rjmp	.+26     	; 0x15fa <LED_u8TurnOnLED+0x80>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    15e0:	ea 81       	ldd	r30, Y+2	; 0x02
    15e2:	fb 81       	ldd	r31, Y+3	; 0x03
    15e4:	80 81       	ld	r24, Z
    15e6:	ea 81       	ldd	r30, Y+2	; 0x02
    15e8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	69 2f       	mov	r22, r25
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <LED_u8TurnOnLED+0x80>
		}
	}
	else {
		local_u8error = 1;  // Invalid pin, set error flag
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <LED_u8TurnOffLED>:

// Function to turn off an LED based on connection type
u8 LED_u8TurnOffLED(const LED_T *LED) {
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <LED_u8TurnOffLED+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <LED_u8TurnOffLED+0x8>
    1614:	0f 92       	push	r0
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	9b 83       	std	Y+3, r25	; 0x03
    161c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    161e:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	9b 81       	ldd	r25, Y+3	; 0x03
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	81 f1       	breq	.+96     	; 0x1688 <LED_u8TurnOffLED+0x7c>
    1628:	ea 81       	ldd	r30, Y+2	; 0x02
    162a:	fb 81       	ldd	r31, Y+3	; 0x03
    162c:	81 81       	ldd	r24, Z+1	; 0x01
    162e:	88 30       	cpi	r24, 0x08	; 8
    1630:	58 f5       	brcc	.+86     	; 0x1688 <LED_u8TurnOffLED+0x7c>
    1632:	ea 81       	ldd	r30, Y+2	; 0x02
    1634:	fb 81       	ldd	r31, Y+3	; 0x03
    1636:	80 81       	ld	r24, Z
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	30 f5       	brcc	.+76     	; 0x1688 <LED_u8TurnOffLED+0x7c>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Switch based on the connection type
		switch (LED->LED_u8ConnectionType) {
    163c:	ea 81       	ldd	r30, Y+2	; 0x02
    163e:	fb 81       	ldd	r31, Y+3	; 0x03
    1640:	82 81       	ldd	r24, Z+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	3d 83       	std	Y+5, r19	; 0x05
    1648:	2c 83       	std	Y+4, r18	; 0x04
    164a:	8c 81       	ldd	r24, Y+4	; 0x04
    164c:	9d 81       	ldd	r25, Y+5	; 0x05
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	81 f0       	breq	.+32     	; 0x1672 <LED_u8TurnOffLED+0x66>
    1652:	2c 81       	ldd	r18, Y+4	; 0x04
    1654:	3d 81       	ldd	r19, Y+5	; 0x05
    1656:	21 30       	cpi	r18, 0x01	; 1
    1658:	31 05       	cpc	r19, r1
    165a:	c1 f4       	brne	.+48     	; 0x168c <LED_u8TurnOffLED+0x80>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    165c:	ea 81       	ldd	r30, Y+2	; 0x02
    165e:	fb 81       	ldd	r31, Y+3	; 0x03
    1660:	80 81       	ld	r24, Z
    1662:	ea 81       	ldd	r30, Y+2	; 0x02
    1664:	fb 81       	ldd	r31, Y+3	; 0x03
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	69 2f       	mov	r22, r25
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    1670:	0d c0       	rjmp	.+26     	; 0x168c <LED_u8TurnOffLED+0x80>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    1672:	ea 81       	ldd	r30, Y+2	; 0x02
    1674:	fb 81       	ldd	r31, Y+3	; 0x03
    1676:	80 81       	ld	r24, Z
    1678:	ea 81       	ldd	r30, Y+2	; 0x02
    167a:	fb 81       	ldd	r31, Y+3	; 0x03
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	69 2f       	mov	r22, r25
    1680:	41 e0       	ldi	r20, 0x01	; 1
    1682:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    1686:	02 c0       	rjmp	.+4      	; 0x168c <LED_u8TurnOffLED+0x80>
		}
		} else {
		local_u8error = 1;  // Invalid pin, set error flag
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <KPD_u8GetPressedkey>:
#include "KPD_private.h"
#include <util/delay.h>


u8 KPD_u8GetPressedkey(void)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <KPD_u8GetPressedkey+0x6>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <KPD_u8GetPressedkey+0x8>
    16a6:	0f 92       	push	r0
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pressedkey=KPD_NO_PREESED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    16b0:	1a 82       	std	Y+2, r1	; 0x02
    16b2:	5e c0       	rjmp	.+188    	; 0x1770 <KPD_u8GetPressedkey+0xd2>
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	e7 53       	subi	r30, 0x37	; 55
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	90 81       	ld	r25, Z
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	69 2f       	mov	r22, r25
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    16cc:	19 82       	std	Y+1, r1	; 0x01
    16ce:	3d c0       	rjmp	.+122    	; 0x174a <KPD_u8GetPressedkey+0xac>
		{
			/*Read the current row*/
			DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	fc 01       	movw	r30, r24
    16d8:	eb 53       	subi	r30, 0x3B	; 59
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	90 81       	ld	r25, Z
    16de:	9e 01       	movw	r18, r28
    16e0:	2c 5f       	subi	r18, 0xFC	; 252
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	69 2f       	mov	r22, r25
    16e8:	a9 01       	movw	r20, r18
    16ea:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_GetPinValue>

			/*check if switch is pressed*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	88 23       	and	r24, r24
    16f2:	41 f5       	brne	.+80     	; 0x1744 <KPD_u8GetPressedkey+0xa6>
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	48 2f       	mov	r20, r24
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	ca 01       	movw	r24, r20
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	82 0f       	add	r24, r18
    170c:	93 1f       	adc	r25, r19
    170e:	fc 01       	movw	r30, r24
    1710:	e3 53       	subi	r30, 0x33	; 51
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	80 81       	ld	r24, Z
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <KPD_u8GetPressedkey+0x9a>

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	88 2f       	mov	r24, r24
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	fc 01       	movw	r30, r24
    1722:	eb 53       	subi	r30, 0x3B	; 59
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	90 81       	ld	r25, Z
    1728:	9e 01       	movw	r18, r28
    172a:	2c 5f       	subi	r18, 0xFC	; 252
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	69 2f       	mov	r22, r25
    1732:	a9 01       	movw	r20, r18
    1734:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	88 23       	and	r24, r24
    173c:	71 f3       	breq	.-36     	; 0x171a <KPD_u8GetPressedkey+0x7c>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8Pressedkey;
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	8d 83       	std	Y+5, r24	; 0x05
    1742:	1c c0       	rjmp	.+56     	; 0x177c <KPD_u8GetPressedkey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	08 f4       	brcc	.+2      	; 0x1752 <KPD_u8GetPressedkey+0xb4>
    1750:	bf cf       	rjmp	.-130    	; 0x16d0 <KPD_u8GetPressedkey+0x32>
				}
				return Local_u8Pressedkey;
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	88 2f       	mov	r24, r24
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	fc 01       	movw	r30, r24
    175a:	e7 53       	subi	r30, 0x37	; 55
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	90 81       	ld	r25, Z
    1760:	83 e0       	ldi	r24, 0x03	; 3
    1762:	69 2f       	mov	r22, r25
    1764:	41 e0       	ldi	r20, 0x01	; 1
    1766:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	8f 5f       	subi	r24, 0xFF	; 255
    176e:	8a 83       	std	Y+2, r24	; 0x02
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	08 f4       	brcc	.+2      	; 0x1778 <KPD_u8GetPressedkey+0xda>
    1776:	9e cf       	rjmp	.-196    	; 0x16b4 <KPD_u8GetPressedkey+0x16>
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8Pressedkey;
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	8d 83       	std	Y+5, r24	; 0x05
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <CLCD_voidSendCommand>:
#include <util/delay.h>



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	2f 97       	sbiw	r28, 0x0f	; 15
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin Low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	40 e0       	ldi	r20, 0x00	; 0
    17b4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

	/*Set command to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    17bc:	0e 94 32 08 	call	0x1064	; 0x1064 <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	62 e0       	ldi	r22, 0x02	; 2
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	a0 e0       	ldi	r26, 0x00	; 0
    17d0:	b0 e4       	ldi	r27, 0x40	; 64
    17d2:	8b 87       	std	Y+11, r24	; 0x0b
    17d4:	9c 87       	std	Y+12, r25	; 0x0c
    17d6:	ad 87       	std	Y+13, r26	; 0x0d
    17d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17da:	6b 85       	ldd	r22, Y+11	; 0x0b
    17dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17de:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	4a e7       	ldi	r20, 0x7A	; 122
    17e8:	53 e4       	ldi	r21, 0x43	; 67
    17ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	8f 83       	std	Y+7, r24	; 0x07
    17f4:	98 87       	std	Y+8, r25	; 0x08
    17f6:	a9 87       	std	Y+9, r26	; 0x09
    17f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fa:	6f 81       	ldd	r22, Y+7	; 0x07
    17fc:	78 85       	ldd	r23, Y+8	; 0x08
    17fe:	89 85       	ldd	r24, Y+9	; 0x09
    1800:	9a 85       	ldd	r25, Y+10	; 0x0a
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e8       	ldi	r20, 0x80	; 128
    1808:	5f e3       	ldi	r21, 0x3F	; 63
    180a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    180e:	88 23       	and	r24, r24
    1810:	2c f4       	brge	.+10     	; 0x181c <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	3f c0       	rjmp	.+126    	; 0x189a <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	3f ef       	ldi	r19, 0xFF	; 255
    1828:	4f e7       	ldi	r20, 0x7F	; 127
    182a:	57 e4       	ldi	r21, 0x47	; 71
    182c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1830:	18 16       	cp	r1, r24
    1832:	4c f5       	brge	.+82     	; 0x1886 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1834:	6b 85       	ldd	r22, Y+11	; 0x0b
    1836:	7c 85       	ldd	r23, Y+12	; 0x0c
    1838:	8d 85       	ldd	r24, Y+13	; 0x0d
    183a:	9e 85       	ldd	r25, Y+14	; 0x0e
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e2       	ldi	r20, 0x20	; 32
    1842:	51 e4       	ldi	r21, 0x41	; 65
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	bc 01       	movw	r22, r24
    184e:	cd 01       	movw	r24, r26
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	9e 83       	std	Y+6, r25	; 0x06
    185a:	8d 83       	std	Y+5, r24	; 0x05
    185c:	0f c0       	rjmp	.+30     	; 0x187c <CLCD_voidSendCommand+0xee>
    185e:	89 e1       	ldi	r24, 0x19	; 25
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <CLCD_voidSendCommand+0xdc>
    186e:	9c 83       	std	Y+4, r25	; 0x04
    1870:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	69 f7       	brne	.-38     	; 0x185e <CLCD_voidSendCommand+0xd0>
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	f1 f7       	brne	.-4      	; 0x18a6 <CLCD_voidSendCommand+0x118>
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

}
    18b8:	2f 96       	adiw	r28, 0x0f	; 15
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	2f 97       	sbiw	r28, 0x0f	; 15
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin High for data*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

	/*Set data to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    18f8:	0e 94 32 08 	call	0x1064	; 0x1064 <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	62 e0       	ldi	r22, 0x02	; 2
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e4       	ldi	r27, 0x40	; 64
    190e:	8b 87       	std	Y+11, r24	; 0x0b
    1910:	9c 87       	std	Y+12, r25	; 0x0c
    1912:	ad 87       	std	Y+13, r26	; 0x0d
    1914:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1916:	6b 85       	ldd	r22, Y+11	; 0x0b
    1918:	7c 85       	ldd	r23, Y+12	; 0x0c
    191a:	8d 85       	ldd	r24, Y+13	; 0x0d
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	4a e7       	ldi	r20, 0x7A	; 122
    1924:	53 e4       	ldi	r21, 0x43	; 67
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	8f 83       	std	Y+7, r24	; 0x07
    1930:	98 87       	std	Y+8, r25	; 0x08
    1932:	a9 87       	std	Y+9, r26	; 0x09
    1934:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1936:	6f 81       	ldd	r22, Y+7	; 0x07
    1938:	78 85       	ldd	r23, Y+8	; 0x08
    193a:	89 85       	ldd	r24, Y+9	; 0x09
    193c:	9a 85       	ldd	r25, Y+10	; 0x0a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e8       	ldi	r20, 0x80	; 128
    1944:	5f e3       	ldi	r21, 0x3F	; 63
    1946:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194a:	88 23       	and	r24, r24
    194c:	2c f4       	brge	.+10     	; 0x1958 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
    1956:	3f c0       	rjmp	.+126    	; 0x19d6 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	3f ef       	ldi	r19, 0xFF	; 255
    1964:	4f e7       	ldi	r20, 0x7F	; 127
    1966:	57 e4       	ldi	r21, 0x47	; 71
    1968:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196c:	18 16       	cp	r1, r24
    196e:	4c f5       	brge	.+82     	; 0x19c2 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1970:	6b 85       	ldd	r22, Y+11	; 0x0b
    1972:	7c 85       	ldd	r23, Y+12	; 0x0c
    1974:	8d 85       	ldd	r24, Y+13	; 0x0d
    1976:	9e 85       	ldd	r25, Y+14	; 0x0e
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <CLCD_voidSendData+0xee>
    199a:	89 e1       	ldi	r24, 0x19	; 25
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	f1 f7       	brne	.-4      	; 0x19a6 <CLCD_voidSendData+0xdc>
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ba:	9e 81       	ldd	r25, Y+6	; 0x06
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	69 f7       	brne	.-38     	; 0x199a <CLCD_voidSendData+0xd0>
    19c0:	14 c0       	rjmp	.+40     	; 0x19ea <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c2:	6f 81       	ldd	r22, Y+7	; 0x07
    19c4:	78 85       	ldd	r23, Y+8	; 0x08
    19c6:	89 85       	ldd	r24, Y+9	; 0x09
    19c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	9a 83       	std	Y+2, r25	; 0x02
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <CLCD_voidSendData+0x118>
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>

}
    19f4:	2f 96       	adiw	r28, 0x0f	; 15
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <CLCD_voidInit>:

void CLCD_voidInit(void)

{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	2e 97       	sbiw	r28, 0x0e	; 14
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a0 e2       	ldi	r26, 0x20	; 32
    1a20:	b2 e4       	ldi	r27, 0x42	; 66
    1a22:	8b 87       	std	Y+11, r24	; 0x0b
    1a24:	9c 87       	std	Y+12, r25	; 0x0c
    1a26:	ad 87       	std	Y+13, r26	; 0x0d
    1a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a e7       	ldi	r20, 0x7A	; 122
    1a38:	53 e4       	ldi	r21, 0x43	; 67
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8f 83       	std	Y+7, r24	; 0x07
    1a44:	98 87       	std	Y+8, r25	; 0x08
    1a46:	a9 87       	std	Y+9, r26	; 0x09
    1a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4c:	78 85       	ldd	r23, Y+8	; 0x08
    1a4e:	89 85       	ldd	r24, Y+9	; 0x09
    1a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <CLCD_voidInit+0x66>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6e:	78 85       	ldd	r23, Y+8	; 0x08
    1a70:	89 85       	ldd	r24, Y+9	; 0x09
    1a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <CLCD_voidInit+0xc6>
    1aae:	89 e1       	ldi	r24, 0x19	; 25
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <CLCD_voidInit+0xb4>
    1abe:	9c 83       	std	Y+4, r25	; 0x04
    1ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <CLCD_voidInit+0xa8>
    1ad4:	14 c0       	rjmp	.+40     	; 0x1afe <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	9a 81       	ldd	r25, Y+2	; 0x02
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <CLCD_voidInit+0xf0>
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms */
	_delay_ms(40);

	/* function set command : 2 line , 5*8 font size */
	CLCD_voidSendCommand(0b00111100);
    1afe:	8c e3       	ldi	r24, 0x3C	; 60
    1b00:	0e 94 c7 0b 	call	0x178e	; 0x178e <CLCD_voidSendCommand>

	/* display on off control: display enable, disable cursor , no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    1b04:	8c e0       	ldi	r24, 0x0C	; 12
    1b06:	0e 94 c7 0b 	call	0x178e	; 0x178e <CLCD_voidSendCommand>

	/* clear display */
	CLCD_voidSendCommand(1);
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	0e 94 c7 0b 	call	0x178e	; 0x178e <CLCD_voidSendCommand>

}
    1b10:	2e 96       	adiw	r28, 0x0e	; 14
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <CLCD_voidSendString+0x6>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	9b 83       	std	Y+3, r25	; 0x03
    1b30:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1b32:	19 82       	std	Y+1, r1	; 0x01
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <CLCD_voidSendString+0x32>
	while (Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	fc 01       	movw	r30, r24
    1b42:	e2 0f       	add	r30, r18
    1b44:	f3 1f       	adc	r31, r19
    1b46:	90 81       	ld	r25, Z
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	8f 5f       	subi	r24, 0xFF	; 255
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 2f       	mov	r24, r25
    1b50:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != '\0')
    1b54:	89 81       	ldd	r24, Y+1	; 0x01
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b5e:	fc 01       	movw	r30, r24
    1b60:	e2 0f       	add	r30, r18
    1b62:	f3 1f       	adc	r31, r19
    1b64:	80 81       	ld	r24, Z
    1b66:	88 23       	and	r24, r24
    1b68:	31 f7       	brne	.-52     	; 0x1b36 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
	}
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <CLCD_voidGoToXY+0x6>
    1b7c:	0f 92       	push	r0
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8XPos==0)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	88 23       	and	r24, r24
    1b8a:	19 f4       	brne	.+6      	; 0x1b92 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	19 f4       	brne	.+6      	; 0x1b9e <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	80 5c       	subi	r24, 0xC0	; 192
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+ 128);
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	80 58       	subi	r24, 0x80	; 128
    1ba2:	0e 94 c7 0b 	call	0x178e	; 0x178e <CLCD_voidSendCommand>
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8* Copy_u8ArrayPtr, u8 Copy_u8BlockNum, u8 Copy_XPos, u8 Copy_YPos)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	27 97       	sbiw	r28, 0x07	; 7
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
    1bca:	6d 83       	std	Y+5, r22	; 0x05
    1bcc:	4e 83       	std	Y+6, r20	; 0x06
    1bce:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0;
    1bd0:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	80 5c       	subi	r24, 0xC0	; 192
    1bea:	0e 94 c7 0b 	call	0x178e	; 0x178e <CLCD_voidSendCommand>

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1bee:	19 82       	std	Y+1, r1	; 0x01
    1bf0:	0e c0       	rjmp	.+28     	; 0x1c0e <CLCD_voidDisplaySpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	e2 0f       	add	r30, r18
    1c00:	f3 1f       	adc	r31, r19
    1c02:	80 81       	ld	r24, Z
    1c04:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	88 30       	cpi	r24, 0x08	; 8
    1c12:	78 f3       	brcs	.-34     	; 0x1bf2 <CLCD_voidDisplaySpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
	}

	CLCD_voidGoToXY(Copy_XPos,Copy_YPos);
    1c14:	8e 81       	ldd	r24, Y+6	; 0x06
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <CLCD_voidGoToXY>

	CLCD_voidSendData(Copy_u8BlockNum);
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
}
    1c22:	27 96       	adiw	r28, 0x07	; 7
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <CLCD_voidDisplayNumber>:

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	65 97       	sbiw	r28, 0x15	; 21
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	6a 87       	std	Y+10, r22	; 0x0a
    1c4a:	7b 87       	std	Y+11, r23	; 0x0b
    1c4c:	8c 87       	std	Y+12, r24	; 0x0c
    1c4e:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1c50:	2d b7       	in	r18, 0x3d	; 61
    1c52:	3e b7       	in	r19, 0x3e	; 62
    1c54:	3d 8b       	std	Y+21, r19	; 0x15
    1c56:	2c 8b       	std	Y+20, r18	; 0x14
	CLCD_voidSendData(Copy_u8BlockNum);
}

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    1c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5c:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c5e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	a1 05       	cpc	r26, r1
    1c64:	b1 05       	cpc	r27, r1
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1c6e:	13 c1       	rjmp	.+550    	; 0x1e96 <CLCD_voidDisplayNumber+0x262>
    1c70:	8d b7       	in	r24, 0x3d	; 61
    1c72:	9e b7       	in	r25, 0x3e	; 62
    1c74:	9f 87       	std	Y+15, r25	; 0x0f
    1c76:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;;
    1c78:	1f 82       	std	Y+7, r1	; 0x07
    1c7a:	1e 82       	std	Y+6, r1	; 0x06
    1c7c:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    1c7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c82:	ac 85       	ldd	r26, Y+12	; 0x0c
    1c84:	bd 85       	ldd	r27, Y+13	; 0x0d
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	ab 83       	std	Y+3, r26	; 0x03
    1c8c:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	8f 5f       	subi	r24, 0xFF	; 255
    1c92:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	ab 81       	ldd	r26, Y+3	; 0x03
    1c9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1c9c:	2a e0       	ldi	r18, 0x0A	; 10
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__udivmodsi4>
    1cac:	da 01       	movw	r26, r20
    1cae:	c9 01       	movw	r24, r18
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	ab 83       	std	Y+3, r26	; 0x03
    1cb6:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	ab 81       	ldd	r26, Y+3	; 0x03
    1cbe:	bc 81       	ldd	r27, Y+4	; 0x04
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	a1 05       	cpc	r26, r1
    1cc4:	b1 05       	cpc	r27, r1
    1cc6:	19 f7       	brne	.-58     	; 0x1c8e <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    1cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	2d b7       	in	r18, 0x3d	; 61
    1cd0:	3e b7       	in	r19, 0x3e	; 62
    1cd2:	28 1b       	sub	r18, r24
    1cd4:	39 0b       	sbc	r19, r25
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	3e bf       	out	0x3e, r19	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	2d bf       	out	0x3d, r18	; 61
    1ce0:	8d b7       	in	r24, 0x3d	; 61
    1ce2:	9e b7       	in	r25, 0x3e	; 62
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	9b 8b       	std	Y+19, r25	; 0x13
    1ce8:	8a 8b       	std	Y+18, r24	; 0x12
    1cea:	8a 89       	ldd	r24, Y+18	; 0x12
    1cec:	9b 89       	ldd	r25, Y+19	; 0x13
    1cee:	00 96       	adiw	r24, 0x00	; 0
    1cf0:	9b 8b       	std	Y+19, r25	; 0x13
    1cf2:	8a 8b       	std	Y+18, r24	; 0x12
    1cf4:	2a 89       	ldd	r18, Y+18	; 0x12
    1cf6:	3b 89       	ldd	r19, Y+19	; 0x13
    1cf8:	39 87       	std	Y+9, r19	; 0x09
    1cfa:	28 87       	std	Y+8, r18	; 0x08
    1cfc:	2e c0       	rjmp	.+92     	; 0x1d5a <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    1cfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d02:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d04:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d06:	2a e0       	ldi	r18, 0x0A	; 10
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e0       	ldi	r20, 0x00	; 0
    1d0c:	50 e0       	ldi	r21, 0x00	; 0
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__udivmodsi4>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    1d1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	88 85       	ldd	r24, Y+8	; 0x08
    1d24:	99 85       	ldd	r25, Y+9	; 0x09
    1d26:	fc 01       	movw	r30, r24
    1d28:	e2 0f       	add	r30, r18
    1d2a:	f3 1f       	adc	r31, r19
    1d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d2e:	80 83       	st	Z, r24
		Local_u8Counter++;
    1d30:	8e 81       	ldd	r24, Y+6	; 0x06
    1d32:	8f 5f       	subi	r24, 0xFF	; 255
    1d34:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    1d36:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d38:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d3a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d3c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d3e:	2a e0       	ldi	r18, 0x0A	; 10
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <__udivmodsi4>
    1d4e:	da 01       	movw	r26, r20
    1d50:	c9 01       	movw	r24, r18
    1d52:	8a 87       	std	Y+10, r24	; 0x0a
    1d54:	9b 87       	std	Y+11, r25	; 0x0b
    1d56:	ac 87       	std	Y+12, r26	; 0x0c
    1d58:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    1d5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d5e:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d60:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	a1 05       	cpc	r26, r1
    1d66:	b1 05       	cpc	r27, r1
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <CLCD_voidDisplayNumber+0x13e>
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	98 17       	cp	r25, r24
    1d70:	30 f2       	brcs	.-116    	; 0x1cfe <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	81 50       	subi	r24, 0x01	; 1
    1d76:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1d78:	1e 82       	std	Y+6, r1	; 0x06
    1d7a:	81 c0       	rjmp	.+258    	; 0x1e7e <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8e 81       	ldd	r24, Y+6	; 0x06
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	28 1b       	sub	r18, r24
    1d8a:	39 0b       	sbc	r19, r25
    1d8c:	88 85       	ldd	r24, Y+8	; 0x08
    1d8e:	99 85       	ldd	r25, Y+9	; 0x09
    1d90:	fc 01       	movw	r30, r24
    1d92:	e2 0f       	add	r30, r18
    1d94:	f3 1f       	adc	r31, r19
    1d96:	80 81       	ld	r24, Z
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	39 8b       	std	Y+17, r19	; 0x11
    1d9e:	28 8b       	std	Y+16, r18	; 0x10
    1da0:	88 89       	ldd	r24, Y+16	; 0x10
    1da2:	99 89       	ldd	r25, Y+17	; 0x11
    1da4:	84 30       	cpi	r24, 0x04	; 4
    1da6:	91 05       	cpc	r25, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <CLCD_voidDisplayNumber+0x178>
    1daa:	4f c0       	rjmp	.+158    	; 0x1e4a <CLCD_voidDisplayNumber+0x216>
    1dac:	28 89       	ldd	r18, Y+16	; 0x10
    1dae:	39 89       	ldd	r19, Y+17	; 0x11
    1db0:	25 30       	cpi	r18, 0x05	; 5
    1db2:	31 05       	cpc	r19, r1
    1db4:	d4 f4       	brge	.+52     	; 0x1dea <CLCD_voidDisplayNumber+0x1b6>
    1db6:	88 89       	ldd	r24, Y+16	; 0x10
    1db8:	99 89       	ldd	r25, Y+17	; 0x11
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	c9 f1       	breq	.+114    	; 0x1e32 <CLCD_voidDisplayNumber+0x1fe>
    1dc0:	28 89       	ldd	r18, Y+16	; 0x10
    1dc2:	39 89       	ldd	r19, Y+17	; 0x11
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <CLCD_voidDisplayNumber+0x1a0>
    1dca:	88 89       	ldd	r24, Y+16	; 0x10
    1dcc:	99 89       	ldd	r25, Y+17	; 0x11
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	61 f1       	breq	.+88     	; 0x1e2a <CLCD_voidDisplayNumber+0x1f6>
    1dd2:	52 c0       	rjmp	.+164    	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
    1dd4:	28 89       	ldd	r18, Y+16	; 0x10
    1dd6:	39 89       	ldd	r19, Y+17	; 0x11
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	71 f1       	breq	.+92     	; 0x1e3a <CLCD_voidDisplayNumber+0x206>
    1dde:	88 89       	ldd	r24, Y+16	; 0x10
    1de0:	99 89       	ldd	r25, Y+17	; 0x11
    1de2:	83 30       	cpi	r24, 0x03	; 3
    1de4:	91 05       	cpc	r25, r1
    1de6:	69 f1       	breq	.+90     	; 0x1e42 <CLCD_voidDisplayNumber+0x20e>
    1de8:	47 c0       	rjmp	.+142    	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
    1dea:	28 89       	ldd	r18, Y+16	; 0x10
    1dec:	39 89       	ldd	r19, Y+17	; 0x11
    1dee:	27 30       	cpi	r18, 0x07	; 7
    1df0:	31 05       	cpc	r19, r1
    1df2:	b9 f1       	breq	.+110    	; 0x1e62 <CLCD_voidDisplayNumber+0x22e>
    1df4:	88 89       	ldd	r24, Y+16	; 0x10
    1df6:	99 89       	ldd	r25, Y+17	; 0x11
    1df8:	88 30       	cpi	r24, 0x08	; 8
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	5c f4       	brge	.+22     	; 0x1e14 <CLCD_voidDisplayNumber+0x1e0>
    1dfe:	28 89       	ldd	r18, Y+16	; 0x10
    1e00:	39 89       	ldd	r19, Y+17	; 0x11
    1e02:	25 30       	cpi	r18, 0x05	; 5
    1e04:	31 05       	cpc	r19, r1
    1e06:	29 f1       	breq	.+74     	; 0x1e52 <CLCD_voidDisplayNumber+0x21e>
    1e08:	88 89       	ldd	r24, Y+16	; 0x10
    1e0a:	99 89       	ldd	r25, Y+17	; 0x11
    1e0c:	86 30       	cpi	r24, 0x06	; 6
    1e0e:	91 05       	cpc	r25, r1
    1e10:	21 f1       	breq	.+72     	; 0x1e5a <CLCD_voidDisplayNumber+0x226>
    1e12:	32 c0       	rjmp	.+100    	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
    1e14:	28 89       	ldd	r18, Y+16	; 0x10
    1e16:	39 89       	ldd	r19, Y+17	; 0x11
    1e18:	28 30       	cpi	r18, 0x08	; 8
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	31 f1       	breq	.+76     	; 0x1e6a <CLCD_voidDisplayNumber+0x236>
    1e1e:	88 89       	ldd	r24, Y+16	; 0x10
    1e20:	99 89       	ldd	r25, Y+17	; 0x11
    1e22:	89 30       	cpi	r24, 0x09	; 9
    1e24:	91 05       	cpc	r25, r1
    1e26:	29 f1       	breq	.+74     	; 0x1e72 <CLCD_voidDisplayNumber+0x23e>
    1e28:	27 c0       	rjmp	.+78     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    1e2a:	80 e3       	ldi	r24, 0x30	; 48
    1e2c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e30:	23 c0       	rjmp	.+70     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    1e32:	81 e3       	ldi	r24, 0x31	; 49
    1e34:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e38:	1f c0       	rjmp	.+62     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    1e3a:	82 e3       	ldi	r24, 0x32	; 50
    1e3c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e40:	1b c0       	rjmp	.+54     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    1e42:	83 e3       	ldi	r24, 0x33	; 51
    1e44:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e48:	17 c0       	rjmp	.+46     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    1e4a:	84 e3       	ldi	r24, 0x34	; 52
    1e4c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e50:	13 c0       	rjmp	.+38     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    1e52:	85 e3       	ldi	r24, 0x35	; 53
    1e54:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e58:	0f c0       	rjmp	.+30     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    1e5a:	86 e3       	ldi	r24, 0x36	; 54
    1e5c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e60:	0b c0       	rjmp	.+22     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    1e62:	87 e3       	ldi	r24, 0x37	; 55
    1e64:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e68:	07 c0       	rjmp	.+14     	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    1e6a:	88 e3       	ldi	r24, 0x38	; 56
    1e6c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    1e72:	89 e3       	ldi	r24, 0x39	; 57
    1e74:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1e78:	8e 81       	ldd	r24, Y+6	; 0x06
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	8e 83       	std	Y+6, r24	; 0x06
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	89 17       	cp	r24, r25
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <CLCD_voidDisplayNumber+0x254>
    1e86:	7a cf       	rjmp	.-268    	; 0x1d7c <CLCD_voidDisplayNumber+0x148>
    1e88:	2e 85       	ldd	r18, Y+14	; 0x0e
    1e8a:	3f 85       	ldd	r19, Y+15	; 0x0f
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	3e bf       	out	0x3e, r19	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1e96:	8c 89       	ldd	r24, Y+20	; 0x14
    1e98:	9d 89       	ldd	r25, Y+21	; 0x15
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	9e bf       	out	0x3e, r25	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	8d bf       	out	0x3d, r24	; 61
    1ea4:	65 96       	adiw	r28, 0x15	; 21
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <CLCD_voidClearLCD>:

void CLCD_voidClearLCD(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLEAR_CMD);
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 c7 0b 	call	0x178e	; 0x178e <CLCD_voidSendCommand>
}
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <_7SEGMENT_u8ShowNumber>:
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @param copy_u8number The number to be displayed (0-9).
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8ShowNumber(const _7SEGMENT_T  *_7SEGMENT, const u8 copy_u8number)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	9c 83       	std	Y+4, r25	; 0x04
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8error = 0;
    1ee4:	1a 82       	std	Y+2, r1	; 0x02
	s8 i = 0;
    1ee6:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2) && (copy_u8number < 10)  )
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <_7SEGMENT_u8ShowNumber+0x28>
    1ef0:	13 c1       	rjmp	.+550    	; 0x2118 <_7SEGMENT_u8ShowNumber+0x24e>
    1ef2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ef4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef6:	80 81       	ld	r24, Z
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <_7SEGMENT_u8ShowNumber+0x34>
    1efc:	0d c1       	rjmp	.+538    	; 0x2118 <_7SEGMENT_u8ShowNumber+0x24e>
    1efe:	eb 81       	ldd	r30, Y+3	; 0x03
    1f00:	fc 81       	ldd	r31, Y+4	; 0x04
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	87 30       	cpi	r24, 0x07	; 7
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <_7SEGMENT_u8ShowNumber+0x40>
    1f08:	07 c1       	rjmp	.+526    	; 0x2118 <_7SEGMENT_u8ShowNumber+0x24e>
    1f0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0e:	81 81       	ldd	r24, Z+1	; 0x01
    1f10:	84 30       	cpi	r24, 0x04	; 4
    1f12:	08 f0       	brcs	.+2      	; 0x1f16 <_7SEGMENT_u8ShowNumber+0x4c>
    1f14:	01 c1       	rjmp	.+514    	; 0x2118 <_7SEGMENT_u8ShowNumber+0x24e>
    1f16:	eb 81       	ldd	r30, Y+3	; 0x03
    1f18:	fc 81       	ldd	r31, Y+4	; 0x04
    1f1a:	83 81       	ldd	r24, Z+3	; 0x03
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	08 f0       	brcs	.+2      	; 0x1f22 <_7SEGMENT_u8ShowNumber+0x58>
    1f20:	fb c0       	rjmp	.+502    	; 0x2118 <_7SEGMENT_u8ShowNumber+0x24e>
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	8a 30       	cpi	r24, 0x0A	; 10
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <_7SEGMENT_u8ShowNumber+0x60>
    1f28:	f7 c0       	rjmp	.+494    	; 0x2118 <_7SEGMENT_u8ShowNumber+0x24e>
	{

		switch (_7SEGMENT->_7SEGMENT_u8Decoders)
    1f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2e:	84 81       	ldd	r24, Z+4	; 0x04
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3b 87       	std	Y+11, r19	; 0x0b
    1f36:	2a 87       	std	Y+10, r18	; 0x0a
    1f38:	4a 85       	ldd	r20, Y+10	; 0x0a
    1f3a:	5b 85       	ldd	r21, Y+11	; 0x0b
    1f3c:	41 15       	cp	r20, r1
    1f3e:	51 05       	cpc	r21, r1
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <_7SEGMENT_u8ShowNumber+0x7a>
    1f42:	a2 c0       	rjmp	.+324    	; 0x2088 <_7SEGMENT_u8ShowNumber+0x1be>
    1f44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <_7SEGMENT_u8ShowNumber+0x86>
    1f4e:	e1 c0       	rjmp	.+450    	; 0x2112 <_7SEGMENT_u8ShowNumber+0x248>
		{
			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
    1f50:	eb 81       	ldd	r30, Y+3	; 0x03
    1f52:	fc 81       	ldd	r31, Y+4	; 0x04
    1f54:	85 81       	ldd	r24, Z+5	; 0x05
    1f56:	85 30       	cpi	r24, 0x05	; 5
    1f58:	08 f0       	brcs	.+2      	; 0x1f5c <_7SEGMENT_u8ShowNumber+0x92>
    1f5a:	93 c0       	rjmp	.+294    	; 0x2082 <_7SEGMENT_u8ShowNumber+0x1b8>
			{
				switch (_7SEGMENT->_7SEGMENT_u8commontype)
    1f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f60:	83 81       	ldd	r24, Z+3	; 0x03
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	39 87       	std	Y+9, r19	; 0x09
    1f68:	28 87       	std	Y+8, r18	; 0x08
    1f6a:	48 85       	ldd	r20, Y+8	; 0x08
    1f6c:	59 85       	ldd	r21, Y+9	; 0x09
    1f6e:	41 15       	cp	r20, r1
    1f70:	51 05       	cpc	r21, r1
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <_7SEGMENT_u8ShowNumber+0xac>
    1f74:	46 c0       	rjmp	.+140    	; 0x2002 <_7SEGMENT_u8ShowNumber+0x138>
    1f76:	88 85       	ldd	r24, Y+8	; 0x08
    1f78:	99 85       	ldd	r25, Y+9	; 0x09
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <_7SEGMENT_u8ShowNumber+0xb8>
    1f80:	cd c0       	rjmp	.+410    	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
				{
					case _7SEGMENT_u8COMMONCATHODE:
					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    1f82:	eb 81       	ldd	r30, Y+3	; 0x03
    1f84:	fc 81       	ldd	r31, Y+4	; 0x04
    1f86:	81 81       	ldd	r24, Z+1	; 0x01
    1f88:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8c:	92 81       	ldd	r25, Z+2	; 0x02
    1f8e:	69 2f       	mov	r22, r25
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
					for (i=0;i<4;i++)
    1f96:	19 82       	std	Y+1, r1	; 0x01
    1f98:	30 c0       	rjmp	.+96     	; 0x1ffa <_7SEGMENT_u8ShowNumber+0x130>
					{
						if ((copy_u8number & (1 <<i)))
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	99 27       	eor	r25, r25
    1fa4:	87 fd       	sbrc	r24, 7
    1fa6:	90 95       	com	r25
    1fa8:	a9 01       	movw	r20, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <_7SEGMENT_u8ShowNumber+0xe6>
    1fac:	55 95       	asr	r21
    1fae:	47 95       	ror	r20
    1fb0:	8a 95       	dec	r24
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <_7SEGMENT_u8ShowNumber+0xe2>
    1fb4:	ca 01       	movw	r24, r20
    1fb6:	81 70       	andi	r24, 0x01	; 1
    1fb8:	90 70       	andi	r25, 0x00	; 0
    1fba:	88 23       	and	r24, r24
    1fbc:	71 f0       	breq	.+28     	; 0x1fda <_7SEGMENT_u8ShowNumber+0x110>
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_HIGH);
    1fbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc2:	20 81       	ld	r18, Z
    1fc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1fc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1fc8:	95 81       	ldd	r25, Z+5	; 0x05
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	98 0f       	add	r25, r24
    1fce:	82 2f       	mov	r24, r18
    1fd0:	69 2f       	mov	r22, r25
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    1fd8:	0d c0       	rjmp	.+26     	; 0x1ff4 <_7SEGMENT_u8ShowNumber+0x12a>
						}
						else
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_LOW);
    1fda:	eb 81       	ldd	r30, Y+3	; 0x03
    1fdc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fde:	20 81       	ld	r18, Z
    1fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe4:	95 81       	ldd	r25, Z+5	; 0x05
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	98 0f       	add	r25, r24
    1fea:	82 2f       	mov	r24, r18
    1fec:	69 2f       	mov	r22, r25
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
			{
				switch (_7SEGMENT->_7SEGMENT_u8commontype)
				{
					case _7SEGMENT_u8COMMONCATHODE:
					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
					for (i=0;i<4;i++)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	8f 5f       	subi	r24, 0xFF	; 255
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	84 30       	cpi	r24, 0x04	; 4
    1ffe:	6c f2       	brlt	.-102    	; 0x1f9a <_7SEGMENT_u8ShowNumber+0xd0>
    2000:	8d c0       	rjmp	.+282    	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
						}
					}
					break;
					case _7SEGMENT_u8COMMONANODE:

					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    2002:	eb 81       	ldd	r30, Y+3	; 0x03
    2004:	fc 81       	ldd	r31, Y+4	; 0x04
    2006:	81 81       	ldd	r24, Z+1	; 0x01
    2008:	eb 81       	ldd	r30, Y+3	; 0x03
    200a:	fc 81       	ldd	r31, Y+4	; 0x04
    200c:	92 81       	ldd	r25, Z+2	; 0x02
    200e:	69 2f       	mov	r22, r25
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
					for (i = 0; i < 4; i++)
    2016:	19 82       	std	Y+1, r1	; 0x01
    2018:	30 c0       	rjmp	.+96     	; 0x207a <_7SEGMENT_u8ShowNumber+0x1b0>
					{
						if ((copy_u8number & (1 << i)))
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	99 27       	eor	r25, r25
    2024:	87 fd       	sbrc	r24, 7
    2026:	90 95       	com	r25
    2028:	a9 01       	movw	r20, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <_7SEGMENT_u8ShowNumber+0x166>
    202c:	55 95       	asr	r21
    202e:	47 95       	ror	r20
    2030:	8a 95       	dec	r24
    2032:	e2 f7       	brpl	.-8      	; 0x202c <_7SEGMENT_u8ShowNumber+0x162>
    2034:	ca 01       	movw	r24, r20
    2036:	81 70       	andi	r24, 0x01	; 1
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	88 23       	and	r24, r24
    203c:	71 f0       	breq	.+28     	; 0x205a <_7SEGMENT_u8ShowNumber+0x190>
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_LOW);
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	20 81       	ld	r18, Z
    2044:	eb 81       	ldd	r30, Y+3	; 0x03
    2046:	fc 81       	ldd	r31, Y+4	; 0x04
    2048:	95 81       	ldd	r25, Z+5	; 0x05
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	98 0f       	add	r25, r24
    204e:	82 2f       	mov	r24, r18
    2050:	69 2f       	mov	r22, r25
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    2058:	0d c0       	rjmp	.+26     	; 0x2074 <_7SEGMENT_u8ShowNumber+0x1aa>
						}
						else
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_HIGH);
    205a:	eb 81       	ldd	r30, Y+3	; 0x03
    205c:	fc 81       	ldd	r31, Y+4	; 0x04
    205e:	20 81       	ld	r18, Z
    2060:	eb 81       	ldd	r30, Y+3	; 0x03
    2062:	fc 81       	ldd	r31, Y+4	; 0x04
    2064:	95 81       	ldd	r25, Z+5	; 0x05
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	98 0f       	add	r25, r24
    206a:	82 2f       	mov	r24, r18
    206c:	69 2f       	mov	r22, r25
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
					}
					break;
					case _7SEGMENT_u8COMMONANODE:

					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
					for (i = 0; i < 4; i++)
    2074:	89 81       	ldd	r24, Y+1	; 0x01
    2076:	8f 5f       	subi	r24, 0xFF	; 255
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	84 30       	cpi	r24, 0x04	; 4
    207e:	6c f2       	brlt	.-102    	; 0x201a <_7SEGMENT_u8ShowNumber+0x150>
    2080:	4d c0       	rjmp	.+154    	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>


			}
			else
			{
				local_u8error=1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	4a c0       	rjmp	.+148    	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
			}
			break;
			case _7SEGMENT_u8Nodecoder:
			switch (_7SEGMENT->_7SEGMENT_u8commontype)
    2088:	eb 81       	ldd	r30, Y+3	; 0x03
    208a:	fc 81       	ldd	r31, Y+4	; 0x04
    208c:	83 81       	ldd	r24, Z+3	; 0x03
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	3f 83       	std	Y+7, r19	; 0x07
    2094:	2e 83       	std	Y+6, r18	; 0x06
    2096:	4e 81       	ldd	r20, Y+6	; 0x06
    2098:	5f 81       	ldd	r21, Y+7	; 0x07
    209a:	41 15       	cp	r20, r1
    209c:	51 05       	cpc	r21, r1
    209e:	f1 f0       	breq	.+60     	; 0x20dc <_7SEGMENT_u8ShowNumber+0x212>
    20a0:	8e 81       	ldd	r24, Y+6	; 0x06
    20a2:	9f 81       	ldd	r25, Y+7	; 0x07
    20a4:	81 30       	cpi	r24, 0x01	; 1
    20a6:	91 05       	cpc	r25, r1
    20a8:	c9 f5       	brne	.+114    	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
			{
				case _7SEGMENT_u8COMMONCATHODE:
				DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    20aa:	eb 81       	ldd	r30, Y+3	; 0x03
    20ac:	fc 81       	ldd	r31, Y+4	; 0x04
    20ae:	81 81       	ldd	r24, Z+1	; 0x01
    20b0:	eb 81       	ldd	r30, Y+3	; 0x03
    20b2:	fc 81       	ldd	r31, Y+4	; 0x04
    20b4:	92 81       	ldd	r25, Z+2	; 0x02
    20b6:	69 2f       	mov	r22, r25
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
				DIO_SetPortValue(_7SEGMENT->_7SEGMENT_u8port, _7SEGMENTNUM[copy_u8number]);
    20be:	eb 81       	ldd	r30, Y+3	; 0x03
    20c0:	fc 81       	ldd	r31, Y+4	; 0x04
    20c2:	20 81       	ld	r18, Z
    20c4:	8d 81       	ldd	r24, Y+5	; 0x05
    20c6:	88 2f       	mov	r24, r24
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	fc 01       	movw	r30, r24
    20cc:	e3 52       	subi	r30, 0x23	; 35
    20ce:	ff 4f       	sbci	r31, 0xFF	; 255
    20d0:	90 81       	ld	r25, Z
    20d2:	82 2f       	mov	r24, r18
    20d4:	69 2f       	mov	r22, r25
    20d6:	0e 94 32 08 	call	0x1064	; 0x1064 <DIO_SetPortValue>
    20da:	20 c0       	rjmp	.+64     	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
				break;
				case _7SEGMENT_u8COMMONANODE:
				DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    20dc:	eb 81       	ldd	r30, Y+3	; 0x03
    20de:	fc 81       	ldd	r31, Y+4	; 0x04
    20e0:	81 81       	ldd	r24, Z+1	; 0x01
    20e2:	eb 81       	ldd	r30, Y+3	; 0x03
    20e4:	fc 81       	ldd	r31, Y+4	; 0x04
    20e6:	92 81       	ldd	r25, Z+2	; 0x02
    20e8:	69 2f       	mov	r22, r25
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
				DIO_SetPortValue(_7SEGMENT->_7SEGMENT_u8port, ~(_7SEGMENTNUM[copy_u8number]));
    20f0:	eb 81       	ldd	r30, Y+3	; 0x03
    20f2:	fc 81       	ldd	r31, Y+4	; 0x04
    20f4:	20 81       	ld	r18, Z
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	88 2f       	mov	r24, r24
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	e3 52       	subi	r30, 0x23	; 35
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 81       	ld	r24, Z
    2104:	98 2f       	mov	r25, r24
    2106:	90 95       	com	r25
    2108:	82 2f       	mov	r24, r18
    210a:	69 2f       	mov	r22, r25
    210c:	0e 94 32 08 	call	0x1064	; 0x1064 <DIO_SetPortValue>
    2110:	05 c0       	rjmp	.+10     	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
				break;
			}
			break;
			default: local_u8error = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	8a 83       	std	Y+2, r24	; 0x02
    2116:	02 c0       	rjmp	.+4      	; 0x211c <_7SEGMENT_u8ShowNumber+0x252>
		}
	}
	else
	{
		local_u8error = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8error;
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    211e:	2b 96       	adiw	r28, 0x0b	; 11
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <_7SEGMENT_u8HideNumber>:
*
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8HideNumber(const _7SEGMENT_T  *_7SEGMENT)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	00 d0       	rcall	.+0      	; 0x2136 <_7SEGMENT_u8HideNumber+0x6>
    2136:	00 d0       	rcall	.+0      	; 0x2138 <_7SEGMENT_u8HideNumber+0x8>
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	9b 83       	std	Y+3, r25	; 0x03
    2140:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;
    2142:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2))
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	d1 f1       	breq	.+116    	; 0x21c0 <_7SEGMENT_u8HideNumber+0x90>
    214c:	ea 81       	ldd	r30, Y+2	; 0x02
    214e:	fb 81       	ldd	r31, Y+3	; 0x03
    2150:	80 81       	ld	r24, Z
    2152:	84 30       	cpi	r24, 0x04	; 4
    2154:	a8 f5       	brcc	.+106    	; 0x21c0 <_7SEGMENT_u8HideNumber+0x90>
    2156:	ea 81       	ldd	r30, Y+2	; 0x02
    2158:	fb 81       	ldd	r31, Y+3	; 0x03
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	87 30       	cpi	r24, 0x07	; 7
    215e:	80 f5       	brcc	.+96     	; 0x21c0 <_7SEGMENT_u8HideNumber+0x90>
    2160:	ea 81       	ldd	r30, Y+2	; 0x02
    2162:	fb 81       	ldd	r31, Y+3	; 0x03
    2164:	81 81       	ldd	r24, Z+1	; 0x01
    2166:	84 30       	cpi	r24, 0x04	; 4
    2168:	58 f5       	brcc	.+86     	; 0x21c0 <_7SEGMENT_u8HideNumber+0x90>
    216a:	ea 81       	ldd	r30, Y+2	; 0x02
    216c:	fb 81       	ldd	r31, Y+3	; 0x03
    216e:	83 81       	ldd	r24, Z+3	; 0x03
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	30 f5       	brcc	.+76     	; 0x21c0 <_7SEGMENT_u8HideNumber+0x90>
	{
		switch (_7SEGMENT->_7SEGMENT_u8commontype)
    2174:	ea 81       	ldd	r30, Y+2	; 0x02
    2176:	fb 81       	ldd	r31, Y+3	; 0x03
    2178:	83 81       	ldd	r24, Z+3	; 0x03
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	3d 83       	std	Y+5, r19	; 0x05
    2180:	2c 83       	std	Y+4, r18	; 0x04
    2182:	8c 81       	ldd	r24, Y+4	; 0x04
    2184:	9d 81       	ldd	r25, Y+5	; 0x05
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	81 f0       	breq	.+32     	; 0x21aa <_7SEGMENT_u8HideNumber+0x7a>
    218a:	2c 81       	ldd	r18, Y+4	; 0x04
    218c:	3d 81       	ldd	r19, Y+5	; 0x05
    218e:	21 30       	cpi	r18, 0x01	; 1
    2190:	31 05       	cpc	r19, r1
    2192:	c1 f4       	brne	.+48     	; 0x21c4 <_7SEGMENT_u8HideNumber+0x94>
		{
			case _7SEGMENT_u8COMMONCATHODE:
			DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    2194:	ea 81       	ldd	r30, Y+2	; 0x02
    2196:	fb 81       	ldd	r31, Y+3	; 0x03
    2198:	81 81       	ldd	r24, Z+1	; 0x01
    219a:	ea 81       	ldd	r30, Y+2	; 0x02
    219c:	fb 81       	ldd	r31, Y+3	; 0x03
    219e:	92 81       	ldd	r25, Z+2	; 0x02
    21a0:	69 2f       	mov	r22, r25
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    21a8:	0d c0       	rjmp	.+26     	; 0x21c4 <_7SEGMENT_u8HideNumber+0x94>
			break;
			case _7SEGMENT_u8COMMONANODE:
			DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    21aa:	ea 81       	ldd	r30, Y+2	; 0x02
    21ac:	fb 81       	ldd	r31, Y+3	; 0x03
    21ae:	81 81       	ldd	r24, Z+1	; 0x01
    21b0:	ea 81       	ldd	r30, Y+2	; 0x02
    21b2:	fb 81       	ldd	r31, Y+3	; 0x03
    21b4:	92 81       	ldd	r25, Z+2	; 0x02
    21b6:	69 2f       	mov	r22, r25
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_SetPinValue>
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <_7SEGMENT_u8HideNumber+0x94>

	}

	else
	{
		local_u8error = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	08 95       	ret

000021d6 <_7SEGMENT_u8Initialize>:
*
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8Initialize(const _7SEGMENT_T  *_7SEGMENT)
{
    21d6:	df 93       	push	r29
    21d8:	cf 93       	push	r28
    21da:	00 d0       	rcall	.+0      	; 0x21dc <_7SEGMENT_u8Initialize+0x6>
    21dc:	00 d0       	rcall	.+0      	; 0x21de <_7SEGMENT_u8Initialize+0x8>
    21de:	00 d0       	rcall	.+0      	; 0x21e0 <_7SEGMENT_u8Initialize+0xa>
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	9c 83       	std	Y+4, r25	; 0x04
    21e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8error = 0;
    21e8:	1a 82       	std	Y+2, r1	; 0x02
	u8 i = 0;
    21ea:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2) )
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <_7SEGMENT_u8Initialize+0x20>
    21f4:	64 c0       	rjmp	.+200    	; 0x22be <_7SEGMENT_u8Initialize+0xe8>
    21f6:	eb 81       	ldd	r30, Y+3	; 0x03
    21f8:	fc 81       	ldd	r31, Y+4	; 0x04
    21fa:	80 81       	ld	r24, Z
    21fc:	84 30       	cpi	r24, 0x04	; 4
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <_7SEGMENT_u8Initialize+0x2c>
    2200:	5e c0       	rjmp	.+188    	; 0x22be <_7SEGMENT_u8Initialize+0xe8>
    2202:	eb 81       	ldd	r30, Y+3	; 0x03
    2204:	fc 81       	ldd	r31, Y+4	; 0x04
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	87 30       	cpi	r24, 0x07	; 7
    220a:	08 f0       	brcs	.+2      	; 0x220e <_7SEGMENT_u8Initialize+0x38>
    220c:	58 c0       	rjmp	.+176    	; 0x22be <_7SEGMENT_u8Initialize+0xe8>
    220e:	eb 81       	ldd	r30, Y+3	; 0x03
    2210:	fc 81       	ldd	r31, Y+4	; 0x04
    2212:	81 81       	ldd	r24, Z+1	; 0x01
    2214:	84 30       	cpi	r24, 0x04	; 4
    2216:	08 f0       	brcs	.+2      	; 0x221a <_7SEGMENT_u8Initialize+0x44>
    2218:	52 c0       	rjmp	.+164    	; 0x22be <_7SEGMENT_u8Initialize+0xe8>
    221a:	eb 81       	ldd	r30, Y+3	; 0x03
    221c:	fc 81       	ldd	r31, Y+4	; 0x04
    221e:	83 81       	ldd	r24, Z+3	; 0x03
    2220:	82 30       	cpi	r24, 0x02	; 2
    2222:	08 f0       	brcs	.+2      	; 0x2226 <_7SEGMENT_u8Initialize+0x50>
    2224:	4c c0       	rjmp	.+152    	; 0x22be <_7SEGMENT_u8Initialize+0xe8>
	{
		switch (_7SEGMENT->_7SEGMENT_u8Decoders)
    2226:	eb 81       	ldd	r30, Y+3	; 0x03
    2228:	fc 81       	ldd	r31, Y+4	; 0x04
    222a:	84 81       	ldd	r24, Z+4	; 0x04
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	3e 83       	std	Y+6, r19	; 0x06
    2232:	2d 83       	std	Y+5, r18	; 0x05
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	00 97       	sbiw	r24, 0x00	; 0
    223a:	69 f1       	breq	.+90     	; 0x2296 <_7SEGMENT_u8Initialize+0xc0>
    223c:	2d 81       	ldd	r18, Y+5	; 0x05
    223e:	3e 81       	ldd	r19, Y+6	; 0x06
    2240:	21 30       	cpi	r18, 0x01	; 1
    2242:	31 05       	cpc	r19, r1
    2244:	c9 f5       	brne	.+114    	; 0x22b8 <_7SEGMENT_u8Initialize+0xe2>
		{

			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
    2246:	eb 81       	ldd	r30, Y+3	; 0x03
    2248:	fc 81       	ldd	r31, Y+4	; 0x04
    224a:	85 81       	ldd	r24, Z+5	; 0x05
    224c:	85 30       	cpi	r24, 0x05	; 5
    224e:	00 f5       	brcc	.+64     	; 0x2290 <_7SEGMENT_u8Initialize+0xba>
			{
				for (i = 0; i < 4; i++)
    2250:	19 82       	std	Y+1, r1	; 0x01
    2252:	10 c0       	rjmp	.+32     	; 0x2274 <_7SEGMENT_u8Initialize+0x9e>
				{
					DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_OUTPUT);
    2254:	eb 81       	ldd	r30, Y+3	; 0x03
    2256:	fc 81       	ldd	r31, Y+4	; 0x04
    2258:	20 81       	ld	r18, Z
    225a:	eb 81       	ldd	r30, Y+3	; 0x03
    225c:	fc 81       	ldd	r31, Y+4	; 0x04
    225e:	95 81       	ldd	r25, Z+5	; 0x05
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	98 0f       	add	r25, r24
    2264:	82 2f       	mov	r24, r18
    2266:	69 2f       	mov	r22, r25
    2268:	41 e0       	ldi	r20, 0x01	; 1
    226a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_SetPinDirection>
		{

			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
			{
				for (i = 0; i < 4; i++)
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	8f 5f       	subi	r24, 0xFF	; 255
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	84 30       	cpi	r24, 0x04	; 4
    2278:	68 f3       	brcs	.-38     	; 0x2254 <_7SEGMENT_u8Initialize+0x7e>
				{
					DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_OUTPUT);
				}
				DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_OUTPUT);
    227a:	eb 81       	ldd	r30, Y+3	; 0x03
    227c:	fc 81       	ldd	r31, Y+4	; 0x04
    227e:	81 81       	ldd	r24, Z+1	; 0x01
    2280:	eb 81       	ldd	r30, Y+3	; 0x03
    2282:	fc 81       	ldd	r31, Y+4	; 0x04
    2284:	92 81       	ldd	r25, Z+2	; 0x02
    2286:	69 2f       	mov	r22, r25
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_SetPinDirection>
    228e:	19 c0       	rjmp	.+50     	; 0x22c2 <_7SEGMENT_u8Initialize+0xec>

			}
			else
			{
				local_u8error=1;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	8a 83       	std	Y+2, r24	; 0x02
    2294:	16 c0       	rjmp	.+44     	; 0x22c2 <_7SEGMENT_u8Initialize+0xec>
			}

			break;
			case _7SEGMENT_u8Nodecoder:

			DIO_SetPortDirection(_7SEGMENT->_7SEGMENT_u8port, DIO_u8PORT_OUTPUT);
    2296:	eb 81       	ldd	r30, Y+3	; 0x03
    2298:	fc 81       	ldd	r31, Y+4	; 0x04
    229a:	80 81       	ld	r24, Z
    229c:	6f ef       	ldi	r22, 0xFF	; 255
    229e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <DIO_SetPortDirection>
			DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_OUTPUT);
    22a2:	eb 81       	ldd	r30, Y+3	; 0x03
    22a4:	fc 81       	ldd	r31, Y+4	; 0x04
    22a6:	81 81       	ldd	r24, Z+1	; 0x01
    22a8:	eb 81       	ldd	r30, Y+3	; 0x03
    22aa:	fc 81       	ldd	r31, Y+4	; 0x04
    22ac:	92 81       	ldd	r25, Z+2	; 0x02
    22ae:	69 2f       	mov	r22, r25
    22b0:	41 e0       	ldi	r20, 0x01	; 1
    22b2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <DIO_SetPinDirection>
    22b6:	05 c0       	rjmp	.+10     	; 0x22c2 <_7SEGMENT_u8Initialize+0xec>

			break;
			default:
			local_u8error = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <_7SEGMENT_u8Initialize+0xec>
		}
	}

	else
	{
		local_u8error = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_u8error;
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22c4:	26 96       	adiw	r28, 0x06	; 6
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
    22d0:	cf 91       	pop	r28
    22d2:	df 91       	pop	r29
    22d4:	08 95       	ret

000022d6 <start>:
#include "../../../Hall/KAYPAD/KPD_interface.h"
#include "../../../Hall/KAYPAD/KPD_confg.h"
#include "../../../MCAL/DIO/DIO_interface.h"
#include <util/delay.h>
void start(void)
{
    22d6:	df 93       	push	r29
    22d8:	cf 93       	push	r28
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	aa 97       	sbiw	r28, 0x2a	; 42
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	f8 94       	cli
    22e4:	de bf       	out	0x3e, r29	; 62
    22e6:	0f be       	out	0x3f, r0	; 63
    22e8:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    22ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	CLCD_voidInit();
    22ee:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidInit>
	CLCD_voidSendString("welcome !");
    22f2:	80 e6       	ldi	r24, 0x60	; 96
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	aa e7       	ldi	r26, 0x7A	; 122
    2300:	b4 e4       	ldi	r27, 0x44	; 68
    2302:	8f a3       	std	Y+39, r24	; 0x27
    2304:	98 a7       	std	Y+40, r25	; 0x28
    2306:	a9 a7       	std	Y+41, r26	; 0x29
    2308:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6f a1       	ldd	r22, Y+39	; 0x27
    230c:	78 a5       	ldd	r23, Y+40	; 0x28
    230e:	89 a5       	ldd	r24, Y+41	; 0x29
    2310:	9a a5       	ldd	r25, Y+42	; 0x2a
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a e7       	ldi	r20, 0x7A	; 122
    2318:	53 e4       	ldi	r21, 0x43	; 67
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8b a3       	std	Y+35, r24	; 0x23
    2324:	9c a3       	std	Y+36, r25	; 0x24
    2326:	ad a3       	std	Y+37, r26	; 0x25
    2328:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    232a:	6b a1       	ldd	r22, Y+35	; 0x23
    232c:	7c a1       	ldd	r23, Y+36	; 0x24
    232e:	8d a1       	ldd	r24, Y+37	; 0x25
    2330:	9e a1       	ldd	r25, Y+38	; 0x26
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <start+0x76>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9a a3       	std	Y+34, r25	; 0x22
    2348:	89 a3       	std	Y+33, r24	; 0x21
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <start+0xf4>
	else if (__tmp > 65535)
    234c:	6b a1       	ldd	r22, Y+35	; 0x23
    234e:	7c a1       	ldd	r23, Y+36	; 0x24
    2350:	8d a1       	ldd	r24, Y+37	; 0x25
    2352:	9e a1       	ldd	r25, Y+38	; 0x26
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <start+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6f a1       	ldd	r22, Y+39	; 0x27
    2366:	78 a5       	ldd	r23, Y+40	; 0x28
    2368:	89 a5       	ldd	r24, Y+41	; 0x29
    236a:	9a a5       	ldd	r25, Y+42	; 0x2a
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9a a3       	std	Y+34, r25	; 0x22
    238a:	89 a3       	std	Y+33, r24	; 0x21
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <start+0xd6>
    238e:	89 e1       	ldi	r24, 0x19	; 25
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	98 a3       	std	Y+32, r25	; 0x20
    2394:	8f 8f       	std	Y+31, r24	; 0x1f
    2396:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2398:	98 a1       	ldd	r25, Y+32	; 0x20
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <start+0xc4>
    239e:	98 a3       	std	Y+32, r25	; 0x20
    23a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	89 a1       	ldd	r24, Y+33	; 0x21
    23a4:	9a a1       	ldd	r25, Y+34	; 0x22
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9a a3       	std	Y+34, r25	; 0x22
    23aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	89 a1       	ldd	r24, Y+33	; 0x21
    23ae:	9a a1       	ldd	r25, Y+34	; 0x22
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <start+0xb8>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <start+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6b a1       	ldd	r22, Y+35	; 0x23
    23b8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ba:	8d a1       	ldd	r24, Y+37	; 0x25
    23bc:	9e a1       	ldd	r25, Y+38	; 0x26
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9a a3       	std	Y+34, r25	; 0x22
    23c8:	89 a3       	std	Y+33, r24	; 0x21
    23ca:	89 a1       	ldd	r24, Y+33	; 0x21
    23cc:	9a a1       	ldd	r25, Y+34	; 0x22
    23ce:	9e 8f       	std	Y+30, r25	; 0x1e
    23d0:	8d 8f       	std	Y+29, r24	; 0x1d
    23d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <start+0x100>
    23da:	9e 8f       	std	Y+30, r25	; 0x1e
    23dc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	CLCD_voidClearLCD();
    23de:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CLCD_voidClearLCD>
	CLCD_voidSendString("this is simple");
    23e2:	8a e6       	ldi	r24, 0x6A	; 106
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <CLCD_voidGoToXY>
	CLCD_voidSendString("calculator");
    23f2:	89 e7       	ldi	r24, 0x79	; 121
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	aa e7       	ldi	r26, 0x7A	; 122
    2400:	b4 e4       	ldi	r27, 0x44	; 68
    2402:	89 8f       	std	Y+25, r24	; 0x19
    2404:	9a 8f       	std	Y+26, r25	; 0x1a
    2406:	ab 8f       	std	Y+27, r26	; 0x1b
    2408:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240a:	69 8d       	ldd	r22, Y+25	; 0x19
    240c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    240e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4a e7       	ldi	r20, 0x7A	; 122
    2418:	53 e4       	ldi	r21, 0x43	; 67
    241a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	8d 8b       	std	Y+21, r24	; 0x15
    2424:	9e 8b       	std	Y+22, r25	; 0x16
    2426:	af 8b       	std	Y+23, r26	; 0x17
    2428:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    242a:	6d 89       	ldd	r22, Y+21	; 0x15
    242c:	7e 89       	ldd	r23, Y+22	; 0x16
    242e:	8f 89       	ldd	r24, Y+23	; 0x17
    2430:	98 8d       	ldd	r25, Y+24	; 0x18
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e8       	ldi	r20, 0x80	; 128
    2438:	5f e3       	ldi	r21, 0x3F	; 63
    243a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243e:	88 23       	and	r24, r24
    2440:	2c f4       	brge	.+10     	; 0x244c <start+0x176>
		__ticks = 1;
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 8b       	std	Y+20, r25	; 0x14
    2448:	8b 8b       	std	Y+19, r24	; 0x13
    244a:	3f c0       	rjmp	.+126    	; 0x24ca <start+0x1f4>
	else if (__tmp > 65535)
    244c:	6d 89       	ldd	r22, Y+21	; 0x15
    244e:	7e 89       	ldd	r23, Y+22	; 0x16
    2450:	8f 89       	ldd	r24, Y+23	; 0x17
    2452:	98 8d       	ldd	r25, Y+24	; 0x18
    2454:	20 e0       	ldi	r18, 0x00	; 0
    2456:	3f ef       	ldi	r19, 0xFF	; 255
    2458:	4f e7       	ldi	r20, 0x7F	; 127
    245a:	57 e4       	ldi	r21, 0x47	; 71
    245c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2460:	18 16       	cp	r1, r24
    2462:	4c f5       	brge	.+82     	; 0x24b6 <start+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2464:	69 8d       	ldd	r22, Y+25	; 0x19
    2466:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2468:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e2       	ldi	r20, 0x20	; 32
    2472:	51 e4       	ldi	r21, 0x41	; 65
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	bc 01       	movw	r22, r24
    247e:	cd 01       	movw	r24, r26
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9c 8b       	std	Y+20, r25	; 0x14
    248a:	8b 8b       	std	Y+19, r24	; 0x13
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <start+0x1d6>
    248e:	89 e1       	ldi	r24, 0x19	; 25
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9a 8b       	std	Y+18, r25	; 0x12
    2494:	89 8b       	std	Y+17, r24	; 0x11
    2496:	89 89       	ldd	r24, Y+17	; 0x11
    2498:	9a 89       	ldd	r25, Y+18	; 0x12
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	f1 f7       	brne	.-4      	; 0x249a <start+0x1c4>
    249e:	9a 8b       	std	Y+18, r25	; 0x12
    24a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a2:	8b 89       	ldd	r24, Y+19	; 0x13
    24a4:	9c 89       	ldd	r25, Y+20	; 0x14
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	8b 89       	ldd	r24, Y+19	; 0x13
    24ae:	9c 89       	ldd	r25, Y+20	; 0x14
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	69 f7       	brne	.-38     	; 0x248e <start+0x1b8>
    24b4:	14 c0       	rjmp	.+40     	; 0x24de <start+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9c 8b       	std	Y+20, r25	; 0x14
    24c8:	8b 8b       	std	Y+19, r24	; 0x13
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	98 8b       	std	Y+16, r25	; 0x10
    24d0:	8f 87       	std	Y+15, r24	; 0x0f
    24d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d4:	98 89       	ldd	r25, Y+16	; 0x10
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <start+0x200>
    24da:	98 8b       	std	Y+16, r25	; 0x10
    24dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	CLCD_voidClearLCD();
    24de:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CLCD_voidClearLCD>
	CLCD_voidSendString("not calculator");
    24e2:	84 e8       	ldi	r24, 0x84	; 132
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	aa e7       	ldi	r26, 0x7A	; 122
    24f0:	b4 e4       	ldi	r27, 0x44	; 68
    24f2:	8b 87       	std	Y+11, r24	; 0x0b
    24f4:	9c 87       	std	Y+12, r25	; 0x0c
    24f6:	ad 87       	std	Y+13, r26	; 0x0d
    24f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2500:	9e 85       	ldd	r25, Y+14	; 0x0e
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a e7       	ldi	r20, 0x7A	; 122
    2508:	53 e4       	ldi	r21, 0x43	; 67
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8f 83       	std	Y+7, r24	; 0x07
    2514:	98 87       	std	Y+8, r25	; 0x08
    2516:	a9 87       	std	Y+9, r26	; 0x09
    2518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <start+0x266>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <start+0x2e4>
	else if (__tmp > 65535)
    253c:	6f 81       	ldd	r22, Y+7	; 0x07
    253e:	78 85       	ldd	r23, Y+8	; 0x08
    2540:	89 85       	ldd	r24, Y+9	; 0x09
    2542:	9a 85       	ldd	r25, Y+10	; 0x0a
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <start+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6b 85       	ldd	r22, Y+11	; 0x0b
    2556:	7c 85       	ldd	r23, Y+12	; 0x0c
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	0f c0       	rjmp	.+30     	; 0x259c <start+0x2c6>
    257e:	89 e1       	ldi	r24, 0x19	; 25
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 83       	std	Y+4, r25	; 0x04
    2584:	8b 83       	std	Y+3, r24	; 0x03
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	9c 81       	ldd	r25, Y+4	; 0x04
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <start+0x2b4>
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	8d 81       	ldd	r24, Y+5	; 0x05
    2594:	9e 81       	ldd	r25, Y+6	; 0x06
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	8d 81       	ldd	r24, Y+5	; 0x05
    259e:	9e 81       	ldd	r25, Y+6	; 0x06
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <start+0x2a8>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <start+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	9a 81       	ldd	r25, Y+2	; 0x02
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <start+0x2f0>
    25ca:	9a 83       	std	Y+2, r25	; 0x02
    25cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	CLCD_voidClearLCD();
    25ce:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CLCD_voidClearLCD>
	CLCD_voidSendString("press on to");
    25d2:	83 e9       	ldi	r24, 0x93	; 147
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <CLCD_voidGoToXY>
	CLCD_voidSendString("start");
    25e2:	8f e9       	ldi	r24, 0x9F	; 159
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
}
    25ea:	aa 96       	adiw	r28, 0x2a	; 42
    25ec:	0f b6       	in	r0, 0x3f	; 63
    25ee:	f8 94       	cli
    25f0:	de bf       	out	0x3e, r29	; 62
    25f2:	0f be       	out	0x3f, r0	; 63
    25f4:	cd bf       	out	0x3d, r28	; 61
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <clearCalculatorState>:
void clearCalculatorState(s32 *num1, s32 *num2, s32 *operation, s32 *prod, s32 *num_flag) {
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	2a 97       	sbiw	r28, 0x0a	; 10
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	9a 83       	std	Y+2, r25	; 0x02
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	7c 83       	std	Y+4, r23	; 0x04
    261a:	6b 83       	std	Y+3, r22	; 0x03
    261c:	5e 83       	std	Y+6, r21	; 0x06
    261e:	4d 83       	std	Y+5, r20	; 0x05
    2620:	38 87       	std	Y+8, r19	; 0x08
    2622:	2f 83       	std	Y+7, r18	; 0x07
    2624:	1a 87       	std	Y+10, r17	; 0x0a
    2626:	09 87       	std	Y+9, r16	; 0x09
    *num1 = 0;
    2628:	e9 81       	ldd	r30, Y+1	; 0x01
    262a:	fa 81       	ldd	r31, Y+2	; 0x02
    262c:	10 82       	st	Z, r1
    262e:	11 82       	std	Z+1, r1	; 0x01
    2630:	12 82       	std	Z+2, r1	; 0x02
    2632:	13 82       	std	Z+3, r1	; 0x03
    *num2 = 0;
    2634:	eb 81       	ldd	r30, Y+3	; 0x03
    2636:	fc 81       	ldd	r31, Y+4	; 0x04
    2638:	10 82       	st	Z, r1
    263a:	11 82       	std	Z+1, r1	; 0x01
    263c:	12 82       	std	Z+2, r1	; 0x02
    263e:	13 82       	std	Z+3, r1	; 0x03
    *operation = 0;
    2640:	ed 81       	ldd	r30, Y+5	; 0x05
    2642:	fe 81       	ldd	r31, Y+6	; 0x06
    2644:	10 82       	st	Z, r1
    2646:	11 82       	std	Z+1, r1	; 0x01
    2648:	12 82       	std	Z+2, r1	; 0x02
    264a:	13 82       	std	Z+3, r1	; 0x03
    *prod = 0;
    264c:	ef 81       	ldd	r30, Y+7	; 0x07
    264e:	f8 85       	ldd	r31, Y+8	; 0x08
    2650:	10 82       	st	Z, r1
    2652:	11 82       	std	Z+1, r1	; 0x01
    2654:	12 82       	std	Z+2, r1	; 0x02
    2656:	13 82       	std	Z+3, r1	; 0x03
    *num_flag = 0;
    2658:	e9 85       	ldd	r30, Y+9	; 0x09
    265a:	fa 85       	ldd	r31, Y+10	; 0x0a
    265c:	10 82       	st	Z, r1
    265e:	11 82       	std	Z+1, r1	; 0x01
    2660:	12 82       	std	Z+2, r1	; 0x02
    2662:	13 82       	std	Z+3, r1	; 0x03
}
    2664:	2a 96       	adiw	r28, 0x0a	; 10
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	1f 91       	pop	r17
    2676:	0f 91       	pop	r16
    2678:	08 95       	ret

0000267a <main>:
#include "../../../Hall/KAYPAD/KPD_interface.h"
#include "../../../Hall/KAYPAD/KPD_confg.h"
#include "../../../MCAL/DIO/DIO_interface.h"
#include <util/delay.h>

int main(void) {
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	ac 97       	sbiw	r28, 0x2c	; 44
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    start();
    2692:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <start>
    s32 num1 = 0, num2 = 0, operation = 0, prod = 0;
    2696:	1b 8a       	std	Y+19, r1	; 0x13
    2698:	1c 8a       	std	Y+20, r1	; 0x14
    269a:	1d 8a       	std	Y+21, r1	; 0x15
    269c:	1e 8a       	std	Y+22, r1	; 0x16
    269e:	1f 8a       	std	Y+23, r1	; 0x17
    26a0:	18 8e       	std	Y+24, r1	; 0x18
    26a2:	19 8e       	std	Y+25, r1	; 0x19
    26a4:	1a 8e       	std	Y+26, r1	; 0x1a
    26a6:	1b 8e       	std	Y+27, r1	; 0x1b
    26a8:	1c 8e       	std	Y+28, r1	; 0x1c
    26aa:	1d 8e       	std	Y+29, r1	; 0x1d
    26ac:	1e 8e       	std	Y+30, r1	; 0x1e
    26ae:	1f 8e       	std	Y+31, r1	; 0x1f
    26b0:	18 a2       	std	Y+32, r1	; 0x20
    26b2:	19 a2       	std	Y+33, r1	; 0x21
    26b4:	1a a2       	std	Y+34, r1	; 0x22
    s32 num_flag = 0;
    26b6:	1b a2       	std	Y+35, r1	; 0x23
    26b8:	1c a2       	std	Y+36, r1	; 0x24
    26ba:	1d a2       	std	Y+37, r1	; 0x25
    26bc:	1e a2       	std	Y+38, r1	; 0x26

    while (1) {
        s32 value = KPD_u8GetPressedkey();
    26be:	0e 94 4f 0b 	call	0x169e	; 0x169e <KPD_u8GetPressedkey>
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	8f 87       	std	Y+15, r24	; 0x0f
    26cc:	98 8b       	std	Y+16, r25	; 0x10
    26ce:	a9 8b       	std	Y+17, r26	; 0x11
    26d0:	ba 8b       	std	Y+18, r27	; 0x12

        if (value != KPD_NO_PREESED_KEY) {
    26d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d4:	98 89       	ldd	r25, Y+16	; 0x10
    26d6:	a9 89       	ldd	r26, Y+17	; 0x11
    26d8:	ba 89       	ldd	r27, Y+18	; 0x12
    26da:	8f 3f       	cpi	r24, 0xFF	; 255
    26dc:	91 05       	cpc	r25, r1
    26de:	a1 05       	cpc	r26, r1
    26e0:	b1 05       	cpc	r27, r1
    26e2:	69 f3       	breq	.-38     	; 0x26be <main+0x44>
            if (value == '#') {
    26e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e6:	98 89       	ldd	r25, Y+16	; 0x10
    26e8:	a9 89       	ldd	r26, Y+17	; 0x11
    26ea:	ba 89       	ldd	r27, Y+18	; 0x12
    26ec:	83 32       	cpi	r24, 0x23	; 35
    26ee:	91 05       	cpc	r25, r1
    26f0:	a1 05       	cpc	r26, r1
    26f2:	b1 05       	cpc	r27, r1
    26f4:	a1 f4       	brne	.+40     	; 0x271e <main+0xa4>
                CLCD_voidClearLCD();
    26f6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CLCD_voidClearLCD>
                clearCalculatorState(&num1, &num2, &operation, &prod, &num_flag);
    26fa:	ce 01       	movw	r24, r28
    26fc:	43 96       	adiw	r24, 0x13	; 19
    26fe:	9e 01       	movw	r18, r28
    2700:	29 5e       	subi	r18, 0xE9	; 233
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	ae 01       	movw	r20, r28
    2706:	45 5e       	subi	r20, 0xE5	; 229
    2708:	5f 4f       	sbci	r21, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	7f 96       	adiw	r30, 0x1f	; 31
    270e:	de 01       	movw	r26, r28
    2710:	93 96       	adiw	r26, 0x23	; 35
    2712:	b9 01       	movw	r22, r18
    2714:	9f 01       	movw	r18, r30
    2716:	8d 01       	movw	r16, r26
    2718:	0e 94 fe 12 	call	0x25fc	; 0x25fc <clearCalculatorState>
    271c:	d0 cf       	rjmp	.-96     	; 0x26be <main+0x44>
            } else if ((value >= '0' && value <= '9') && num_flag == 0) {
    271e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2720:	98 89       	ldd	r25, Y+16	; 0x10
    2722:	a9 89       	ldd	r26, Y+17	; 0x11
    2724:	ba 89       	ldd	r27, Y+18	; 0x12
    2726:	80 33       	cpi	r24, 0x30	; 48
    2728:	91 05       	cpc	r25, r1
    272a:	a1 05       	cpc	r26, r1
    272c:	b1 05       	cpc	r27, r1
    272e:	94 f1       	brlt	.+100    	; 0x2794 <main+0x11a>
    2730:	8f 85       	ldd	r24, Y+15	; 0x0f
    2732:	98 89       	ldd	r25, Y+16	; 0x10
    2734:	a9 89       	ldd	r26, Y+17	; 0x11
    2736:	ba 89       	ldd	r27, Y+18	; 0x12
    2738:	8a 33       	cpi	r24, 0x3A	; 58
    273a:	91 05       	cpc	r25, r1
    273c:	a1 05       	cpc	r26, r1
    273e:	b1 05       	cpc	r27, r1
    2740:	4c f5       	brge	.+82     	; 0x2794 <main+0x11a>
    2742:	8b a1       	ldd	r24, Y+35	; 0x23
    2744:	9c a1       	ldd	r25, Y+36	; 0x24
    2746:	ad a1       	ldd	r26, Y+37	; 0x25
    2748:	be a1       	ldd	r27, Y+38	; 0x26
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	a1 05       	cpc	r26, r1
    274e:	b1 05       	cpc	r27, r1
    2750:	09 f5       	brne	.+66     	; 0x2794 <main+0x11a>
                num1 = (num1 * 10) + (value - '0');
    2752:	8b 89       	ldd	r24, Y+19	; 0x13
    2754:	9c 89       	ldd	r25, Y+20	; 0x14
    2756:	ad 89       	ldd	r26, Y+21	; 0x15
    2758:	be 89       	ldd	r27, Y+22	; 0x16
    275a:	2a e0       	ldi	r18, 0x0A	; 10
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	bc 01       	movw	r22, r24
    2764:	cd 01       	movw	r24, r26
    2766:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2770:	98 89       	ldd	r25, Y+16	; 0x10
    2772:	a9 89       	ldd	r26, Y+17	; 0x11
    2774:	ba 89       	ldd	r27, Y+18	; 0x12
    2776:	c0 97       	sbiw	r24, 0x30	; 48
    2778:	a1 09       	sbc	r26, r1
    277a:	b1 09       	sbc	r27, r1
    277c:	82 0f       	add	r24, r18
    277e:	93 1f       	adc	r25, r19
    2780:	a4 1f       	adc	r26, r20
    2782:	b5 1f       	adc	r27, r21
    2784:	8b 8b       	std	Y+19, r24	; 0x13
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	ad 8b       	std	Y+21, r26	; 0x15
    278a:	be 8b       	std	Y+22, r27	; 0x16
                CLCD_voidSendData(value);
    278c:	8f 85       	ldd	r24, Y+15	; 0x0f
    278e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    2792:	95 cf       	rjmp	.-214    	; 0x26be <main+0x44>
            } else if ((value >= '0' && value <= '9') && num_flag == 1) {
    2794:	8f 85       	ldd	r24, Y+15	; 0x0f
    2796:	98 89       	ldd	r25, Y+16	; 0x10
    2798:	a9 89       	ldd	r26, Y+17	; 0x11
    279a:	ba 89       	ldd	r27, Y+18	; 0x12
    279c:	80 33       	cpi	r24, 0x30	; 48
    279e:	91 05       	cpc	r25, r1
    27a0:	a1 05       	cpc	r26, r1
    27a2:	b1 05       	cpc	r27, r1
    27a4:	9c f1       	brlt	.+102    	; 0x280c <main+0x192>
    27a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a8:	98 89       	ldd	r25, Y+16	; 0x10
    27aa:	a9 89       	ldd	r26, Y+17	; 0x11
    27ac:	ba 89       	ldd	r27, Y+18	; 0x12
    27ae:	8a 33       	cpi	r24, 0x3A	; 58
    27b0:	91 05       	cpc	r25, r1
    27b2:	a1 05       	cpc	r26, r1
    27b4:	b1 05       	cpc	r27, r1
    27b6:	54 f5       	brge	.+84     	; 0x280c <main+0x192>
    27b8:	8b a1       	ldd	r24, Y+35	; 0x23
    27ba:	9c a1       	ldd	r25, Y+36	; 0x24
    27bc:	ad a1       	ldd	r26, Y+37	; 0x25
    27be:	be a1       	ldd	r27, Y+38	; 0x26
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	91 05       	cpc	r25, r1
    27c4:	a1 05       	cpc	r26, r1
    27c6:	b1 05       	cpc	r27, r1
    27c8:	09 f5       	brne	.+66     	; 0x280c <main+0x192>
                num2 = (num2 * 10) + (value - '0');
    27ca:	8f 89       	ldd	r24, Y+23	; 0x17
    27cc:	98 8d       	ldd	r25, Y+24	; 0x18
    27ce:	a9 8d       	ldd	r26, Y+25	; 0x19
    27d0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    27d2:	2a e0       	ldi	r18, 0x0A	; 10
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    27e2:	9b 01       	movw	r18, r22
    27e4:	ac 01       	movw	r20, r24
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	98 89       	ldd	r25, Y+16	; 0x10
    27ea:	a9 89       	ldd	r26, Y+17	; 0x11
    27ec:	ba 89       	ldd	r27, Y+18	; 0x12
    27ee:	c0 97       	sbiw	r24, 0x30	; 48
    27f0:	a1 09       	sbc	r26, r1
    27f2:	b1 09       	sbc	r27, r1
    27f4:	82 0f       	add	r24, r18
    27f6:	93 1f       	adc	r25, r19
    27f8:	a4 1f       	adc	r26, r20
    27fa:	b5 1f       	adc	r27, r21
    27fc:	8f 8b       	std	Y+23, r24	; 0x17
    27fe:	98 8f       	std	Y+24, r25	; 0x18
    2800:	a9 8f       	std	Y+25, r26	; 0x19
    2802:	ba 8f       	std	Y+26, r27	; 0x1a
                CLCD_voidSendData(value);
    2804:	8f 85       	ldd	r24, Y+15	; 0x0f
    2806:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    280a:	59 cf       	rjmp	.-334    	; 0x26be <main+0x44>
            } else if (value == '+' || value == '-' || value == '*' || value == '/') {
    280c:	8f 85       	ldd	r24, Y+15	; 0x0f
    280e:	98 89       	ldd	r25, Y+16	; 0x10
    2810:	a9 89       	ldd	r26, Y+17	; 0x11
    2812:	ba 89       	ldd	r27, Y+18	; 0x12
    2814:	8b 32       	cpi	r24, 0x2B	; 43
    2816:	91 05       	cpc	r25, r1
    2818:	a1 05       	cpc	r26, r1
    281a:	b1 05       	cpc	r27, r1
    281c:	d9 f0       	breq	.+54     	; 0x2854 <main+0x1da>
    281e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2820:	98 89       	ldd	r25, Y+16	; 0x10
    2822:	a9 89       	ldd	r26, Y+17	; 0x11
    2824:	ba 89       	ldd	r27, Y+18	; 0x12
    2826:	8d 32       	cpi	r24, 0x2D	; 45
    2828:	91 05       	cpc	r25, r1
    282a:	a1 05       	cpc	r26, r1
    282c:	b1 05       	cpc	r27, r1
    282e:	91 f0       	breq	.+36     	; 0x2854 <main+0x1da>
    2830:	8f 85       	ldd	r24, Y+15	; 0x0f
    2832:	98 89       	ldd	r25, Y+16	; 0x10
    2834:	a9 89       	ldd	r26, Y+17	; 0x11
    2836:	ba 89       	ldd	r27, Y+18	; 0x12
    2838:	8a 32       	cpi	r24, 0x2A	; 42
    283a:	91 05       	cpc	r25, r1
    283c:	a1 05       	cpc	r26, r1
    283e:	b1 05       	cpc	r27, r1
    2840:	49 f0       	breq	.+18     	; 0x2854 <main+0x1da>
    2842:	8f 85       	ldd	r24, Y+15	; 0x0f
    2844:	98 89       	ldd	r25, Y+16	; 0x10
    2846:	a9 89       	ldd	r26, Y+17	; 0x11
    2848:	ba 89       	ldd	r27, Y+18	; 0x12
    284a:	8f 32       	cpi	r24, 0x2F	; 47
    284c:	91 05       	cpc	r25, r1
    284e:	a1 05       	cpc	r26, r1
    2850:	b1 05       	cpc	r27, r1
    2852:	a1 f4       	brne	.+40     	; 0x287c <main+0x202>
                num_flag = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a0 e0       	ldi	r26, 0x00	; 0
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	8b a3       	std	Y+35, r24	; 0x23
    285e:	9c a3       	std	Y+36, r25	; 0x24
    2860:	ad a3       	std	Y+37, r26	; 0x25
    2862:	be a3       	std	Y+38, r27	; 0x26
                operation = value;
    2864:	8f 85       	ldd	r24, Y+15	; 0x0f
    2866:	98 89       	ldd	r25, Y+16	; 0x10
    2868:	a9 89       	ldd	r26, Y+17	; 0x11
    286a:	ba 89       	ldd	r27, Y+18	; 0x12
    286c:	8b 8f       	std	Y+27, r24	; 0x1b
    286e:	9c 8f       	std	Y+28, r25	; 0x1c
    2870:	ad 8f       	std	Y+29, r26	; 0x1d
    2872:	be 8f       	std	Y+30, r27	; 0x1e
                CLCD_voidSendData(value);
    2874:	8f 85       	ldd	r24, Y+15	; 0x0f
    2876:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
    287a:	21 cf       	rjmp	.-446    	; 0x26be <main+0x44>
            } else if (value == '=') {
    287c:	8f 85       	ldd	r24, Y+15	; 0x0f
    287e:	98 89       	ldd	r25, Y+16	; 0x10
    2880:	a9 89       	ldd	r26, Y+17	; 0x11
    2882:	ba 89       	ldd	r27, Y+18	; 0x12
    2884:	8d 33       	cpi	r24, 0x3D	; 61
    2886:	91 05       	cpc	r25, r1
    2888:	a1 05       	cpc	r26, r1
    288a:	b1 05       	cpc	r27, r1
    288c:	09 f0       	breq	.+2      	; 0x2890 <main+0x216>
    288e:	17 cf       	rjmp	.-466    	; 0x26be <main+0x44>
                CLCD_voidClearLCD();
    2890:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CLCD_voidClearLCD>
                switch (operation) {
    2894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2898:	ad 8d       	ldd	r26, Y+29	; 0x1d
    289a:	be 8d       	ldd	r27, Y+30	; 0x1e
    289c:	89 a7       	std	Y+41, r24	; 0x29
    289e:	9a a7       	std	Y+42, r25	; 0x2a
    28a0:	ab a7       	std	Y+43, r26	; 0x2b
    28a2:	bc a7       	std	Y+44, r27	; 0x2c
    28a4:	89 a5       	ldd	r24, Y+41	; 0x29
    28a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a8:	ab a5       	ldd	r26, Y+43	; 0x2b
    28aa:	bc a5       	ldd	r27, Y+44	; 0x2c
    28ac:	8b 32       	cpi	r24, 0x2B	; 43
    28ae:	91 05       	cpc	r25, r1
    28b0:	a1 05       	cpc	r26, r1
    28b2:	b1 05       	cpc	r27, r1
    28b4:	31 f1       	breq	.+76     	; 0x2902 <main+0x288>
    28b6:	89 a5       	ldd	r24, Y+41	; 0x29
    28b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    28ba:	ab a5       	ldd	r26, Y+43	; 0x2b
    28bc:	bc a5       	ldd	r27, Y+44	; 0x2c
    28be:	8c 32       	cpi	r24, 0x2C	; 44
    28c0:	91 05       	cpc	r25, r1
    28c2:	a1 05       	cpc	r26, r1
    28c4:	b1 05       	cpc	r27, r1
    28c6:	54 f4       	brge	.+20     	; 0x28dc <main+0x262>
    28c8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    28cc:	ab a5       	ldd	r26, Y+43	; 0x2b
    28ce:	bc a5       	ldd	r27, Y+44	; 0x2c
    28d0:	8a 32       	cpi	r24, 0x2A	; 42
    28d2:	91 05       	cpc	r25, r1
    28d4:	a1 05       	cpc	r26, r1
    28d6:	b1 05       	cpc	r27, r1
    28d8:	b1 f1       	breq	.+108    	; 0x2946 <main+0x2cc>
    28da:	f5 c0       	rjmp	.+490    	; 0x2ac6 <main+0x44c>
    28dc:	89 a5       	ldd	r24, Y+41	; 0x29
    28de:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e0:	ab a5       	ldd	r26, Y+43	; 0x2b
    28e2:	bc a5       	ldd	r27, Y+44	; 0x2c
    28e4:	8d 32       	cpi	r24, 0x2D	; 45
    28e6:	91 05       	cpc	r25, r1
    28e8:	a1 05       	cpc	r26, r1
    28ea:	b1 05       	cpc	r27, r1
    28ec:	d9 f0       	breq	.+54     	; 0x2924 <main+0x2aa>
    28ee:	89 a5       	ldd	r24, Y+41	; 0x29
    28f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    28f2:	ab a5       	ldd	r26, Y+43	; 0x2b
    28f4:	bc a5       	ldd	r27, Y+44	; 0x2c
    28f6:	8f 32       	cpi	r24, 0x2F	; 47
    28f8:	91 05       	cpc	r25, r1
    28fa:	a1 05       	cpc	r26, r1
    28fc:	b1 05       	cpc	r27, r1
    28fe:	b1 f1       	breq	.+108    	; 0x296c <main+0x2f2>
    2900:	e2 c0       	rjmp	.+452    	; 0x2ac6 <main+0x44c>
                    case '+':
                        prod = num1 + num2;
    2902:	8b 89       	ldd	r24, Y+19	; 0x13
    2904:	9c 89       	ldd	r25, Y+20	; 0x14
    2906:	ad 89       	ldd	r26, Y+21	; 0x15
    2908:	be 89       	ldd	r27, Y+22	; 0x16
    290a:	2f 89       	ldd	r18, Y+23	; 0x17
    290c:	38 8d       	ldd	r19, Y+24	; 0x18
    290e:	49 8d       	ldd	r20, Y+25	; 0x19
    2910:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2912:	82 0f       	add	r24, r18
    2914:	93 1f       	adc	r25, r19
    2916:	a4 1f       	adc	r26, r20
    2918:	b5 1f       	adc	r27, r21
    291a:	8f 8f       	std	Y+31, r24	; 0x1f
    291c:	98 a3       	std	Y+32, r25	; 0x20
    291e:	a9 a3       	std	Y+33, r26	; 0x21
    2920:	ba a3       	std	Y+34, r27	; 0x22
    2922:	d9 c0       	rjmp	.+434    	; 0x2ad6 <main+0x45c>
                        break;
                    case '-':
                        prod = num1 - num2;
    2924:	8b 89       	ldd	r24, Y+19	; 0x13
    2926:	9c 89       	ldd	r25, Y+20	; 0x14
    2928:	ad 89       	ldd	r26, Y+21	; 0x15
    292a:	be 89       	ldd	r27, Y+22	; 0x16
    292c:	2f 89       	ldd	r18, Y+23	; 0x17
    292e:	38 8d       	ldd	r19, Y+24	; 0x18
    2930:	49 8d       	ldd	r20, Y+25	; 0x19
    2932:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2934:	82 1b       	sub	r24, r18
    2936:	93 0b       	sbc	r25, r19
    2938:	a4 0b       	sbc	r26, r20
    293a:	b5 0b       	sbc	r27, r21
    293c:	8f 8f       	std	Y+31, r24	; 0x1f
    293e:	98 a3       	std	Y+32, r25	; 0x20
    2940:	a9 a3       	std	Y+33, r26	; 0x21
    2942:	ba a3       	std	Y+34, r27	; 0x22
    2944:	c8 c0       	rjmp	.+400    	; 0x2ad6 <main+0x45c>
                        break;
                    case '*':
                        prod = num1 * num2;
    2946:	8b 89       	ldd	r24, Y+19	; 0x13
    2948:	9c 89       	ldd	r25, Y+20	; 0x14
    294a:	ad 89       	ldd	r26, Y+21	; 0x15
    294c:	be 89       	ldd	r27, Y+22	; 0x16
    294e:	2f 89       	ldd	r18, Y+23	; 0x17
    2950:	38 8d       	ldd	r19, Y+24	; 0x18
    2952:	49 8d       	ldd	r20, Y+25	; 0x19
    2954:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__mulsi3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	8f 8f       	std	Y+31, r24	; 0x1f
    2964:	98 a3       	std	Y+32, r25	; 0x20
    2966:	a9 a3       	std	Y+33, r26	; 0x21
    2968:	ba a3       	std	Y+34, r27	; 0x22
    296a:	b5 c0       	rjmp	.+362    	; 0x2ad6 <main+0x45c>
                        break;
                    case '/':
                        if (num2 != 0) {
    296c:	8f 89       	ldd	r24, Y+23	; 0x17
    296e:	98 8d       	ldd	r25, Y+24	; 0x18
    2970:	a9 8d       	ldd	r26, Y+25	; 0x19
    2972:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	a1 05       	cpc	r26, r1
    2978:	b1 05       	cpc	r27, r1
    297a:	99 f0       	breq	.+38     	; 0x29a2 <main+0x328>
                            prod = num1 / num2;
    297c:	8b 89       	ldd	r24, Y+19	; 0x13
    297e:	9c 89       	ldd	r25, Y+20	; 0x14
    2980:	ad 89       	ldd	r26, Y+21	; 0x15
    2982:	be 89       	ldd	r27, Y+22	; 0x16
    2984:	2f 89       	ldd	r18, Y+23	; 0x17
    2986:	38 8d       	ldd	r19, Y+24	; 0x18
    2988:	49 8d       	ldd	r20, Y+25	; 0x19
    298a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodsi4>
    2994:	da 01       	movw	r26, r20
    2996:	c9 01       	movw	r24, r18
    2998:	8f 8f       	std	Y+31, r24	; 0x1f
    299a:	98 a3       	std	Y+32, r25	; 0x20
    299c:	a9 a3       	std	Y+33, r26	; 0x21
    299e:	ba a3       	std	Y+34, r27	; 0x22
    29a0:	9a c0       	rjmp	.+308    	; 0x2ad6 <main+0x45c>
                        } else {
                            // Handle division by zero error
                            CLCD_voidSendString("Error: Division");
    29a2:	85 ea       	ldi	r24, 0xA5	; 165
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
                            CLCD_voidGoToXY(1,0);
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <CLCD_voidGoToXY>
                            CLCD_voidSendString("By ZERO");
    29b2:	85 eb       	ldi	r24, 0xB5	; 181
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <CLCD_voidSendString>
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	aa ef       	ldi	r26, 0xFA	; 250
    29c0:	b4 e4       	ldi	r27, 0x44	; 68
    29c2:	8b 87       	std	Y+11, r24	; 0x0b
    29c4:	9c 87       	std	Y+12, r25	; 0x0c
    29c6:	ad 87       	std	Y+13, r26	; 0x0d
    29c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    29cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4a e7       	ldi	r20, 0x7A	; 122
    29d8:	53 e4       	ldi	r21, 0x43	; 67
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	8f 83       	std	Y+7, r24	; 0x07
    29e4:	98 87       	std	Y+8, r25	; 0x08
    29e6:	a9 87       	std	Y+9, r26	; 0x09
    29e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e8       	ldi	r20, 0x80	; 128
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fe:	88 23       	and	r24, r24
    2a00:	2c f4       	brge	.+10     	; 0x2a0c <main+0x392>
		__ticks = 1;
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9e 83       	std	Y+6, r25	; 0x06
    2a08:	8d 83       	std	Y+5, r24	; 0x05
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <main+0x410>
	else if (__tmp > 65535)
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	3f ef       	ldi	r19, 0xFF	; 255
    2a18:	4f e7       	ldi	r20, 0x7F	; 127
    2a1a:	57 e4       	ldi	r21, 0x47	; 71
    2a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	4c f5       	brge	.+82     	; 0x2a76 <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	40 e2       	ldi	r20, 0x20	; 32
    2a32:	51 e4       	ldi	r21, 0x41	; 65
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	0f c0       	rjmp	.+30     	; 0x2a6c <main+0x3f2>
    2a4e:	89 e1       	ldi	r24, 0x19	; 25
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	9c 81       	ldd	r25, Y+4	; 0x04
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <main+0x3e0>
    2a5e:	9c 83       	std	Y+4, r25	; 0x04
    2a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a62:	8d 81       	ldd	r24, Y+5	; 0x05
    2a64:	9e 81       	ldd	r25, Y+6	; 0x06
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a70:	00 97       	sbiw	r24, 0x00	; 0
    2a72:	69 f7       	brne	.-38     	; 0x2a4e <main+0x3d4>
    2a74:	14 c0       	rjmp	.+40     	; 0x2a9e <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a76:	6f 81       	ldd	r22, Y+7	; 0x07
    2a78:	78 85       	ldd	r23, Y+8	; 0x08
    2a7a:	89 85       	ldd	r24, Y+9	; 0x09
    2a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <main+0x41c>
    2a9a:	9a 83       	std	Y+2, r25	; 0x02
    2a9c:	89 83       	std	Y+1, r24	; 0x01
                            _delay_ms(2000);
                            CLCD_voidClearLCD();
    2a9e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <CLCD_voidClearLCD>
                            clearCalculatorState(&num1, &num2, &operation, &prod, &num_flag);
    2aa2:	ce 01       	movw	r24, r28
    2aa4:	43 96       	adiw	r24, 0x13	; 19
    2aa6:	9e 01       	movw	r18, r28
    2aa8:	29 5e       	subi	r18, 0xE9	; 233
    2aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2aac:	ae 01       	movw	r20, r28
    2aae:	45 5e       	subi	r20, 0xE5	; 229
    2ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	7f 96       	adiw	r30, 0x1f	; 31
    2ab6:	de 01       	movw	r26, r28
    2ab8:	93 96       	adiw	r26, 0x23	; 35
    2aba:	b9 01       	movw	r22, r18
    2abc:	9f 01       	movw	r18, r30
    2abe:	8d 01       	movw	r16, r26
    2ac0:	0e 94 fe 12 	call	0x25fc	; 0x25fc <clearCalculatorState>
    2ac4:	fc cd       	rjmp	.-1032   	; 0x26be <main+0x44>
                            continue;  // Skip the display of the result
                        }
                        break;
                    default:
                        prod = num1;
    2ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aca:	ad 89       	ldd	r26, Y+21	; 0x15
    2acc:	be 89       	ldd	r27, Y+22	; 0x16
    2ace:	8f 8f       	std	Y+31, r24	; 0x1f
    2ad0:	98 a3       	std	Y+32, r25	; 0x20
    2ad2:	a9 a3       	std	Y+33, r26	; 0x21
    2ad4:	ba a3       	std	Y+34, r27	; 0x22
                        break;
                }

                if (prod < 0) {
    2ad6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ad8:	98 a1       	ldd	r25, Y+32	; 0x20
    2ada:	a9 a1       	ldd	r26, Y+33	; 0x21
    2adc:	ba a1       	ldd	r27, Y+34	; 0x22
    2ade:	bb 23       	and	r27, r27
    2ae0:	04 f5       	brge	.+64     	; 0x2b22 <main+0x4a8>
                    CLCD_voidSendData('-');
    2ae2:	8d e2       	ldi	r24, 0x2D	; 45
    2ae4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <CLCD_voidSendData>
                    CLCD_voidDisplayNumber(abs(prod));
    2ae8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aea:	98 a1       	ldd	r25, Y+32	; 0x20
    2aec:	a9 a1       	ldd	r26, Y+33	; 0x21
    2aee:	ba a1       	ldd	r27, Y+34	; 0x22
    2af0:	98 a7       	std	Y+40, r25	; 0x28
    2af2:	8f a3       	std	Y+39, r24	; 0x27
    2af4:	af a1       	ldd	r26, Y+39	; 0x27
    2af6:	b8 a5       	ldd	r27, Y+40	; 0x28
    2af8:	bb 23       	and	r27, r27
    2afa:	3c f4       	brge	.+14     	; 0x2b0a <main+0x490>
    2afc:	2f a1       	ldd	r18, Y+39	; 0x27
    2afe:	38 a5       	ldd	r19, Y+40	; 0x28
    2b00:	30 95       	com	r19
    2b02:	21 95       	neg	r18
    2b04:	3f 4f       	sbci	r19, 0xFF	; 255
    2b06:	38 a7       	std	Y+40, r19	; 0x28
    2b08:	2f a3       	std	Y+39, r18	; 0x27
    2b0a:	2f a1       	ldd	r18, Y+39	; 0x27
    2b0c:	38 a5       	ldd	r19, Y+40	; 0x28
    2b0e:	c9 01       	movw	r24, r18
    2b10:	aa 27       	eor	r26, r26
    2b12:	97 fd       	sbrc	r25, 7
    2b14:	a0 95       	com	r26
    2b16:	ba 2f       	mov	r27, r26
    2b18:	bc 01       	movw	r22, r24
    2b1a:	cd 01       	movw	r24, r26
    2b1c:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <CLCD_voidDisplayNumber>
    2b20:	08 c0       	rjmp	.+16     	; 0x2b32 <main+0x4b8>
                } else {
                    CLCD_voidDisplayNumber(prod);
    2b22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b24:	98 a1       	ldd	r25, Y+32	; 0x20
    2b26:	a9 a1       	ldd	r26, Y+33	; 0x21
    2b28:	ba a1       	ldd	r27, Y+34	; 0x22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <CLCD_voidDisplayNumber>
                }

                num1 = prod;
    2b32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b34:	98 a1       	ldd	r25, Y+32	; 0x20
    2b36:	a9 a1       	ldd	r26, Y+33	; 0x21
    2b38:	ba a1       	ldd	r27, Y+34	; 0x22
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	9c 8b       	std	Y+20, r25	; 0x14
    2b3e:	ad 8b       	std	Y+21, r26	; 0x15
    2b40:	be 8b       	std	Y+22, r27	; 0x16
                num2 = 0;
    2b42:	1f 8a       	std	Y+23, r1	; 0x17
    2b44:	18 8e       	std	Y+24, r1	; 0x18
    2b46:	19 8e       	std	Y+25, r1	; 0x19
    2b48:	1a 8e       	std	Y+26, r1	; 0x1a
                operation = 0;
    2b4a:	1b 8e       	std	Y+27, r1	; 0x1b
    2b4c:	1c 8e       	std	Y+28, r1	; 0x1c
    2b4e:	1d 8e       	std	Y+29, r1	; 0x1d
    2b50:	1e 8e       	std	Y+30, r1	; 0x1e
                prod = 0;
    2b52:	1f 8e       	std	Y+31, r1	; 0x1f
    2b54:	18 a2       	std	Y+32, r1	; 0x20
    2b56:	19 a2       	std	Y+33, r1	; 0x21
    2b58:	1a a2       	std	Y+34, r1	; 0x22
                num_flag = 0;
    2b5a:	1b a2       	std	Y+35, r1	; 0x23
    2b5c:	1c a2       	std	Y+36, r1	; 0x24
    2b5e:	1d a2       	std	Y+37, r1	; 0x25
    2b60:	1e a2       	std	Y+38, r1	; 0x26
    2b62:	ad cd       	rjmp	.-1190   	; 0x26be <main+0x44>

00002b64 <__mulsi3>:
    2b64:	62 9f       	mul	r22, r18
    2b66:	d0 01       	movw	r26, r0
    2b68:	73 9f       	mul	r23, r19
    2b6a:	f0 01       	movw	r30, r0
    2b6c:	82 9f       	mul	r24, r18
    2b6e:	e0 0d       	add	r30, r0
    2b70:	f1 1d       	adc	r31, r1
    2b72:	64 9f       	mul	r22, r20
    2b74:	e0 0d       	add	r30, r0
    2b76:	f1 1d       	adc	r31, r1
    2b78:	92 9f       	mul	r25, r18
    2b7a:	f0 0d       	add	r31, r0
    2b7c:	83 9f       	mul	r24, r19
    2b7e:	f0 0d       	add	r31, r0
    2b80:	74 9f       	mul	r23, r20
    2b82:	f0 0d       	add	r31, r0
    2b84:	65 9f       	mul	r22, r21
    2b86:	f0 0d       	add	r31, r0
    2b88:	99 27       	eor	r25, r25
    2b8a:	72 9f       	mul	r23, r18
    2b8c:	b0 0d       	add	r27, r0
    2b8e:	e1 1d       	adc	r30, r1
    2b90:	f9 1f       	adc	r31, r25
    2b92:	63 9f       	mul	r22, r19
    2b94:	b0 0d       	add	r27, r0
    2b96:	e1 1d       	adc	r30, r1
    2b98:	f9 1f       	adc	r31, r25
    2b9a:	bd 01       	movw	r22, r26
    2b9c:	cf 01       	movw	r24, r30
    2b9e:	11 24       	eor	r1, r1
    2ba0:	08 95       	ret

00002ba2 <__udivmodsi4>:
    2ba2:	a1 e2       	ldi	r26, 0x21	; 33
    2ba4:	1a 2e       	mov	r1, r26
    2ba6:	aa 1b       	sub	r26, r26
    2ba8:	bb 1b       	sub	r27, r27
    2baa:	fd 01       	movw	r30, r26
    2bac:	0d c0       	rjmp	.+26     	; 0x2bc8 <__udivmodsi4_ep>

00002bae <__udivmodsi4_loop>:
    2bae:	aa 1f       	adc	r26, r26
    2bb0:	bb 1f       	adc	r27, r27
    2bb2:	ee 1f       	adc	r30, r30
    2bb4:	ff 1f       	adc	r31, r31
    2bb6:	a2 17       	cp	r26, r18
    2bb8:	b3 07       	cpc	r27, r19
    2bba:	e4 07       	cpc	r30, r20
    2bbc:	f5 07       	cpc	r31, r21
    2bbe:	20 f0       	brcs	.+8      	; 0x2bc8 <__udivmodsi4_ep>
    2bc0:	a2 1b       	sub	r26, r18
    2bc2:	b3 0b       	sbc	r27, r19
    2bc4:	e4 0b       	sbc	r30, r20
    2bc6:	f5 0b       	sbc	r31, r21

00002bc8 <__udivmodsi4_ep>:
    2bc8:	66 1f       	adc	r22, r22
    2bca:	77 1f       	adc	r23, r23
    2bcc:	88 1f       	adc	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	1a 94       	dec	r1
    2bd2:	69 f7       	brne	.-38     	; 0x2bae <__udivmodsi4_loop>
    2bd4:	60 95       	com	r22
    2bd6:	70 95       	com	r23
    2bd8:	80 95       	com	r24
    2bda:	90 95       	com	r25
    2bdc:	9b 01       	movw	r18, r22
    2bde:	ac 01       	movw	r20, r24
    2be0:	bd 01       	movw	r22, r26
    2be2:	cf 01       	movw	r24, r30
    2be4:	08 95       	ret

00002be6 <__divmodsi4>:
    2be6:	97 fb       	bst	r25, 7
    2be8:	09 2e       	mov	r0, r25
    2bea:	05 26       	eor	r0, r21
    2bec:	0e d0       	rcall	.+28     	; 0x2c0a <__divmodsi4_neg1>
    2bee:	57 fd       	sbrc	r21, 7
    2bf0:	04 d0       	rcall	.+8      	; 0x2bfa <__divmodsi4_neg2>
    2bf2:	d7 df       	rcall	.-82     	; 0x2ba2 <__udivmodsi4>
    2bf4:	0a d0       	rcall	.+20     	; 0x2c0a <__divmodsi4_neg1>
    2bf6:	00 1c       	adc	r0, r0
    2bf8:	38 f4       	brcc	.+14     	; 0x2c08 <__divmodsi4_exit>

00002bfa <__divmodsi4_neg2>:
    2bfa:	50 95       	com	r21
    2bfc:	40 95       	com	r20
    2bfe:	30 95       	com	r19
    2c00:	21 95       	neg	r18
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	4f 4f       	sbci	r20, 0xFF	; 255
    2c06:	5f 4f       	sbci	r21, 0xFF	; 255

00002c08 <__divmodsi4_exit>:
    2c08:	08 95       	ret

00002c0a <__divmodsi4_neg1>:
    2c0a:	f6 f7       	brtc	.-4      	; 0x2c08 <__divmodsi4_exit>
    2c0c:	90 95       	com	r25
    2c0e:	80 95       	com	r24
    2c10:	70 95       	com	r23
    2c12:	61 95       	neg	r22
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	8f 4f       	sbci	r24, 0xFF	; 255
    2c18:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1a:	08 95       	ret

00002c1c <__prologue_saves__>:
    2c1c:	2f 92       	push	r2
    2c1e:	3f 92       	push	r3
    2c20:	4f 92       	push	r4
    2c22:	5f 92       	push	r5
    2c24:	6f 92       	push	r6
    2c26:	7f 92       	push	r7
    2c28:	8f 92       	push	r8
    2c2a:	9f 92       	push	r9
    2c2c:	af 92       	push	r10
    2c2e:	bf 92       	push	r11
    2c30:	cf 92       	push	r12
    2c32:	df 92       	push	r13
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	ca 1b       	sub	r28, r26
    2c46:	db 0b       	sbc	r29, r27
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	09 94       	ijmp

00002c54 <__epilogue_restores__>:
    2c54:	2a 88       	ldd	r2, Y+18	; 0x12
    2c56:	39 88       	ldd	r3, Y+17	; 0x11
    2c58:	48 88       	ldd	r4, Y+16	; 0x10
    2c5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c66:	b9 84       	ldd	r11, Y+9	; 0x09
    2c68:	c8 84       	ldd	r12, Y+8	; 0x08
    2c6a:	df 80       	ldd	r13, Y+7	; 0x07
    2c6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c70:	0c 81       	ldd	r16, Y+4	; 0x04
    2c72:	1b 81       	ldd	r17, Y+3	; 0x03
    2c74:	aa 81       	ldd	r26, Y+2	; 0x02
    2c76:	b9 81       	ldd	r27, Y+1	; 0x01
    2c78:	ce 0f       	add	r28, r30
    2c7a:	d1 1d       	adc	r29, r1
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
    2c86:	ed 01       	movw	r28, r26
    2c88:	08 95       	ret

00002c8a <_exit>:
    2c8a:	f8 94       	cli

00002c8c <__stop_program>:
    2c8c:	ff cf       	rjmp	.-2      	; 0x2c8c <__stop_program>
