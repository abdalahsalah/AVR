
cots.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000020c8  0000215c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800080  00800080  0000217c  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  0000217c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000135b  00000000  00000000  00005284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000065df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000671f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000688f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000093c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a170  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 67 07 	jmp	0xece	; 0xece <__vector_1>
       8:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_2>
       c:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <main>
      8a:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 47 10 	jmp	0x208e	; 0x208e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 47 10 	jmp	0x208e	; 0x208e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 37 10 	jmp	0x206e	; 0x206e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_init>:
#include"USART_intrface.h"
#include"USART_priv.h"
#include"USART_reg.h"

void USART_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	u8 Localu8UCSRCvalue=0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(Localu8UCSRCvalue,7); //USE UCSRC
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 68       	ori	r24, 0x80	; 128
     b56:	89 83       	std	Y+1, r24	; 0x01
	// set char size 8 bit
	SET_BIT(Localu8UCSRCvalue,UCSRC_UCSZ1);
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	84 60       	ori	r24, 0x04	; 4
     b5c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Localu8UCSRCvalue,UCSRC_UCSZ0);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	89 83       	std	Y+1, r24	; 0x01

	UCSRC=Localu8UCSRCvalue;
     b64:	e0 e4       	ldi	r30, 0x40	; 64
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	80 83       	st	Z, r24

	UBRRL=51; //BAUD RATE 9600 bit/sec
     b6c:	e9 e2       	ldi	r30, 0x29	; 41
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	83 e3       	ldi	r24, 0x33	; 51
     b72:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_TXEN); //enable tx
     b74:	aa e2       	ldi	r26, 0x2A	; 42
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ea e2       	ldi	r30, 0x2A	; 42
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	88 60       	ori	r24, 0x08	; 8
     b80:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_RXEN); //enable rx
     b82:	aa e2       	ldi	r26, 0x2A	; 42
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	ea e2       	ldi	r30, 0x2A	; 42
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	80 61       	ori	r24, 0x10	; 16
     b8e:	8c 93       	st	X, r24



}
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <USART_send_data>:
void USART_send_data(u8 Copy_u8data)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	0f 92       	push	r0
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0); //wait until transmit data is empty
     ba4:	eb e2       	ldi	r30, 0x2B	; 43
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	82 95       	swap	r24
     bac:	86 95       	lsr	r24
     bae:	87 70       	andi	r24, 0x07	; 7
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	81 70       	andi	r24, 0x01	; 1
     bb6:	90 70       	andi	r25, 0x00	; 0
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	a1 f3       	breq	.-24     	; 0xba4 <USART_send_data+0xc>
	UDR=Copy_u8data;
     bbc:	ec e2       	ldi	r30, 0x2C	; 44
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	80 83       	st	Z, r24
}
     bc4:	0f 90       	pop	r0
     bc6:	cf 91       	pop	r28
     bc8:	df 91       	pop	r29
     bca:	08 95       	ret

00000bcc <USART_recive_data>:
u8 USART_recive_data(void)
{
     bcc:	df 93       	push	r29
     bce:	cf 93       	push	r28
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     bd4:	eb e2       	ldi	r30, 0x2B	; 43
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	88 23       	and	r24, r24
     bdc:	dc f7       	brge	.-10     	; 0xbd4 <USART_recive_data+0x8>
	return UDR;
     bde:	ec e2       	ldi	r30, 0x2C	; 44
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
}
     be4:	cf 91       	pop	r28
     be6:	df 91       	pop	r29
     be8:	08 95       	ret

00000bea <TIMER0_voidInit>:
#include "TIMER_private.h"
#include "TIMER_configrtion.h"
static void (*TIMER0_pvCallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
     bea:	df 93       	push	r29
     bec:	cf 93       	push	r28
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_MODE==PWM
	CLR_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TCCR0,TCCR0_WGM00);
#elif TIMER0_MODE==Fast_PWM
	SET_BIT(TCCR0,TCCR0_WGM01);
     bf2:	a3 e5       	ldi	r26, 0x53	; 83
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	e3 e5       	ldi	r30, 0x53	; 83
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
     c00:	a3 e5       	ldi	r26, 0x53	; 83
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e3 e5       	ldi	r30, 0x53	; 83
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 64       	ori	r24, 0x40	; 64
     c0c:	8c 93       	st	X, r24
	SET_BIT(TIMSK,TIMSK_OCIE0);

#elif TIMER0_INTERRUPT_MODE==Overflow_Interrupt
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif TIMER0_INTERRUPT_MODE==DESABLE
	CLR_BIT(TIMSK,TIMSK_TOIE0);
     c0e:	a9 e5       	ldi	r26, 0x59	; 89
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e9 e5       	ldi	r30, 0x59	; 89
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8e 7f       	andi	r24, 0xFE	; 254
     c1a:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,TIMSK_OCIE0);
     c1c:	a9 e5       	ldi	r26, 0x59	; 89
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e9 e5       	ldi	r30, 0x59	; 89
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8d 7f       	andi	r24, 0xFD	; 253
     c28:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS00);
	SET_BIT(TCCR0,TCCR0_CS01);
	CLR_BIT(TCCR0,TCCR0_CS02);
#elif TIMER0_PRE==clkI_64
	/*Select prescaler div by 64*/
	SET_BIT(TCCR0,TCCR0_CS00);
     c2a:	a3 e5       	ldi	r26, 0x53	; 83
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e3 e5       	ldi	r30, 0x53	; 83
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	81 60       	ori	r24, 0x01	; 1
     c36:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
     c38:	a3 e5       	ldi	r26, 0x53	; 83
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e3 e5       	ldi	r30, 0x53	; 83
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     c46:	a3 e5       	ldi	r26, 0x53	; 83
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e3 e5       	ldi	r30, 0x53	; 83
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8b 7f       	andi	r24, 0xFB	; 251
     c52:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
	SET_BIT(TCCR0,TCCR0_CS02);
#else
#error "Wrong TIMER0_INTERRUPT_MODE confg option"
#endif
}
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <TIMER0_outputfastpwmmode>:

void TIMER0_outputfastpwmmode(void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62

#if Fast_PWM_mode==clearoncompmatch_setontop
		CLR_BIT(TCCR0,TCCR0_COM00);
     c62:	a3 e5       	ldi	r26, 0x53	; 83
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e3 e5       	ldi	r30, 0x53	; 83
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8f 7e       	andi	r24, 0xEF	; 239
     c6e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
     c70:	a3 e5       	ldi	r26, 0x53	; 83
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e3 e5       	ldi	r30, 0x53	; 83
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	80 62       	ori	r24, 0x20	; 32
     c7c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
#else
#error "Wrong TIMER0_Fast_PWM_MODE confg option"
#endif

}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <TIMER0_u8setcompmatchvalue>:

void TIMER0_u8setcompmatchvalue(u8 copy_u8value)
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	0f 92       	push	r0
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	89 83       	std	Y+1, r24	; 0x01
	OCR0=copy_u8value;
     c90:	ec e5       	ldi	r30, 0x5C	; 92
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	80 83       	st	Z, r24
}
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <TIMER0_u8Setcallback>:

u8 TIMER0_u8Setcallback(void(*Copy_pvCallBackFunc)(void))
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <TIMER0_u8Setcallback+0x6>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9b 83       	std	Y+3, r25	; 0x03
     cae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     cb0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <TIMER0_u8Setcallback+0x28>
	{
		TIMER0_pvCallBackFunc= Copy_pvCallBackFunc;
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	90 93 81 00 	sts	0x0081, r25
     cc2:	80 93 80 00 	sts	0x0080, r24
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <TIMER0_u8Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <__vector_10>:

void __vector_10 (void)__attribute__((signal));
void __vector_10 (void)
{
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc!= NULL)
     d04:	80 91 80 00 	lds	r24, 0x0080
     d08:	90 91 81 00 	lds	r25, 0x0081
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	29 f0       	breq	.+10     	; 0xd1a <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
     d10:	e0 91 80 00 	lds	r30, 0x0080
     d14:	f0 91 81 00 	lds	r31, 0x0081
     d18:	09 95       	icall
	}
}
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	ff 91       	pop	r31
     d20:	ef 91       	pop	r30
     d22:	bf 91       	pop	r27
     d24:	af 91       	pop	r26
     d26:	9f 91       	pop	r25
     d28:	8f 91       	pop	r24
     d2a:	7f 91       	pop	r23
     d2c:	6f 91       	pop	r22
     d2e:	5f 91       	pop	r21
     d30:	4f 91       	pop	r20
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	0f 90       	pop	r0
     d3c:	1f 90       	pop	r1
     d3e:	18 95       	reti

00000d40 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     d40:	df 93       	push	r29
     d42:	cf 93       	push	r28
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
     d50:	e7 e3       	ldi	r30, 0x37	; 55
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     d58:	e4 e3       	ldi	r30, 0x34	; 52
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
     d60:	e1 e3       	ldi	r30, 0x31	; 49
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	80 83       	st	Z, r24

	PORTA=PORTA_INIT_VALUE;
     d68:	eb e3       	ldi	r30, 0x3B	; 59
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VALUE;
     d6e:	e8 e3       	ldi	r30, 0x38	; 56
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	10 82       	st	Z, r1
	PORTD=PORTD_INIT_VALUE;
     d74:	e2 e3       	ldi	r30, 0x32	; 50
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	80 83       	st	Z, r24
	PORTD=PORTC_INIT_VALUE;
     d7c:	e2 e3       	ldi	r30, 0x32	; 50
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	10 82       	st	Z, r1
}
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <GIE_voidEnable>:
#include "../../lib/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     d90:	af e5       	ldi	r26, 0x5F	; 95
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ef e5       	ldi	r30, 0x5F	; 95
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c 93       	st	X, r24
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     dac:	af e5       	ldi	r26, 0x5F	; 95
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ef e5       	ldi	r30, 0x5F	; 95
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8f 77       	andi	r24, 0x7F	; 127
     db8:	8c 93       	st	X, r24
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <EXTI_voidInt0Init>:
/*Global pointer to function to hold int2 ISR address */

void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE == on_change
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE == falling_edge
	CLR_BIT(MCUCR,MCUCR_ISC00);
     dc8:	a5 e5       	ldi	r26, 0x55	; 85
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e5       	ldi	r30, 0x55	; 85
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	8e 7f       	andi	r24, 0xFE	; 254
     dd4:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
     dd6:	a5 e5       	ldi	r26, 0x55	; 85
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e5 e5       	ldi	r30, 0x55	; 85
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE confg option"
#endif

	/*peripheral interrupt enable for int0 */
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
     de4:	ab e5       	ldi	r26, 0x5B	; 91
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	eb e5       	ldi	r30, 0x5B	; 91
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE option"
#endif
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <EXTI_voidInt1Init>:
void EXTI_voidInt1Init(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE == on_change
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE == falling_edge
	CLR_BIT(MCUCR,MCUCR_ISC10);
     e00:	a5 e5       	ldi	r26, 0x55	; 85
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e5 e5       	ldi	r30, 0x55	; 85
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	8b 7f       	andi	r24, 0xFB	; 251
     e0c:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
     e0e:	a5 e5       	ldi	r26, 0x55	; 85
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e5       	ldi	r30, 0x55	; 85
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	88 60       	ori	r24, 0x08	; 8
     e1a:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE confg option"
#endif

	/*peripheral interrupt enable for int0 */
#if INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     e1c:	ab e5       	ldi	r26, 0x5B	; 91
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	eb e5       	ldi	r30, 0x5B	; 91
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 68       	ori	r24, 0x80	; 128
     e28:	8c 93       	st	X, r24
#elif INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INT1_INITIAL_STATE option"
#endif
}
     e2a:	cf 91       	pop	r28
     e2c:	df 91       	pop	r29
     e2e:	08 95       	ret

00000e30 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE == falling_edge
	CLR_BIT(MCUCSR,MCUCSR_INT2);
     e38:	a4 e5       	ldi	r26, 0x54	; 84
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e4 e5       	ldi	r30, 0x54	; 84
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	8f 7b       	andi	r24, 0xBF	; 191
     e44:	8c 93       	st	X, r24

	/*peripheral interrupt enable for int0 */
#if INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
#elif INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
     e46:	ab e5       	ldi	r26, 0x5B	; 91
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	eb e5       	ldi	r30, 0x5B	; 91
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	8f 7b       	andi	r24, 0xBF	; 191
     e52:	8c 93       	st	X, r24
#else
#error "Wrong INT1_INITIAL_STATE option"
#endif
}
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <EXTI_u8INT0Setcallback>:
u8 EXTI_u8INT0Setcallback(void(*Copy_pvInt0func)(void))
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <EXTI_u8INT0Setcallback+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9b 83       	std	Y+3, r25	; 0x03
     e68:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     e6a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0func != NULL)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	9b 81       	ldd	r25, Y+3	; 0x03
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	39 f0       	breq	.+14     	; 0xe82 <EXTI_u8INT0Setcallback+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0func;
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	9b 81       	ldd	r25, Y+3	; 0x03
     e78:	90 93 83 00 	sts	0x0083, r25
     e7c:	80 93 82 00 	sts	0x0082, r24
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <EXTI_u8INT0Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
}
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	cf 91       	pop	r28
     e90:	df 91       	pop	r29
     e92:	08 95       	ret

00000e94 <EXTI_u8INT1Setcallback>:
u8 EXTI_u8INT1Setcallback(void(*Copy_pvInt1func)(void))
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <EXTI_u8INT1Setcallback+0x6>
     e9a:	0f 92       	push	r0
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	9b 83       	std	Y+3, r25	; 0x03
     ea2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1func != NULL)
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	39 f0       	breq	.+14     	; 0xebc <EXTI_u8INT1Setcallback+0x28>
	{
		EXTI_pvInt1Func=Copy_pvInt1func;
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	9b 81       	ldd	r25, Y+3	; 0x03
     eb2:	90 93 85 00 	sts	0x0085, r25
     eb6:	80 93 84 00 	sts	0x0084, r24
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <EXTI_u8INT1Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     ebc:	82 e0       	ldi	r24, 0x02	; 2
     ebe:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <__vector_1>:
/*INT0 ISR*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     ece:	1f 92       	push	r1
     ed0:	0f 92       	push	r0
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	0f 92       	push	r0
     ed6:	11 24       	eor	r1, r1
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
     ef8:	80 91 82 00 	lds	r24, 0x0082
     efc:	90 91 83 00 	lds	r25, 0x0083
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	29 f0       	breq	.+10     	; 0xf0e <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
     f04:	e0 91 82 00 	lds	r30, 0x0082
     f08:	f0 91 83 00 	lds	r31, 0x0083
     f0c:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	7f 91       	pop	r23
     f20:	6f 91       	pop	r22
     f22:	5f 91       	pop	r21
     f24:	4f 91       	pop	r20
     f26:	3f 91       	pop	r19
     f28:	2f 91       	pop	r18
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	0f 90       	pop	r0
     f30:	1f 90       	pop	r1
     f32:	18 95       	reti

00000f34 <__vector_2>:
/*INT1 ISR*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	3f 93       	push	r19
     f42:	4f 93       	push	r20
     f44:	5f 93       	push	r21
     f46:	6f 93       	push	r22
     f48:	7f 93       	push	r23
     f4a:	8f 93       	push	r24
     f4c:	9f 93       	push	r25
     f4e:	af 93       	push	r26
     f50:	bf 93       	push	r27
     f52:	ef 93       	push	r30
     f54:	ff 93       	push	r31
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL)
     f5e:	80 91 84 00 	lds	r24, 0x0084
     f62:	90 91 85 00 	lds	r25, 0x0085
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	29 f0       	breq	.+10     	; 0xf74 <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
     f6a:	e0 91 84 00 	lds	r30, 0x0084
     f6e:	f0 91 85 00 	lds	r31, 0x0085
     f72:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <__vector_3>:
/*INT2 ISR*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	2f 93       	push	r18
     fa6:	3f 93       	push	r19
     fa8:	4f 93       	push	r20
     faa:	5f 93       	push	r21
     fac:	6f 93       	push	r22
     fae:	7f 93       	push	r23
     fb0:	8f 93       	push	r24
     fb2:	9f 93       	push	r25
     fb4:	af 93       	push	r26
     fb6:	bf 93       	push	r27
     fb8:	ef 93       	push	r30
     fba:	ff 93       	push	r31
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL)
     fc4:	80 91 86 00 	lds	r24, 0x0086
     fc8:	90 91 87 00 	lds	r25, 0x0087
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	29 f0       	breq	.+10     	; 0xfda <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
     fd0:	e0 91 86 00 	lds	r30, 0x0086
     fd4:	f0 91 87 00 	lds	r31, 0x0087
     fd8:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <DIO_SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"


u8 DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	28 97       	sbiw	r28, 0x08	; 8
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	8a 83       	std	Y+2, r24	; 0x02
    1016:	6b 83       	std	Y+3, r22	; 0x03
    1018:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    101a:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	08 f0       	brcs	.+2      	; 0x1024 <DIO_SetPinDirection+0x24>
    1022:	f4 c0       	rjmp	.+488    	; 0x120c <DIO_SetPinDirection+0x20c>
	{
        if(u8PinDirCopy==DIO_u8PIN_INPUT)
    1024:	8c 81       	ldd	r24, Y+4	; 0x04
    1026:	88 23       	and	r24, r24
    1028:	09 f0       	breq	.+2      	; 0x102c <DIO_SetPinDirection+0x2c>
    102a:	77 c0       	rjmp	.+238    	; 0x111a <DIO_SetPinDirection+0x11a>
        {
            switch(u8PortIdCopy)
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	38 87       	std	Y+8, r19	; 0x08
    1034:	2f 83       	std	Y+7, r18	; 0x07
    1036:	8f 81       	ldd	r24, Y+7	; 0x07
    1038:	98 85       	ldd	r25, Y+8	; 0x08
    103a:	81 30       	cpi	r24, 0x01	; 1
    103c:	91 05       	cpc	r25, r1
    103e:	59 f1       	breq	.+86     	; 0x1096 <DIO_SetPinDirection+0x96>
    1040:	2f 81       	ldd	r18, Y+7	; 0x07
    1042:	38 85       	ldd	r19, Y+8	; 0x08
    1044:	22 30       	cpi	r18, 0x02	; 2
    1046:	31 05       	cpc	r19, r1
    1048:	2c f4       	brge	.+10     	; 0x1054 <DIO_SetPinDirection+0x54>
    104a:	8f 81       	ldd	r24, Y+7	; 0x07
    104c:	98 85       	ldd	r25, Y+8	; 0x08
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	69 f0       	breq	.+26     	; 0x106c <DIO_SetPinDirection+0x6c>
    1052:	60 c0       	rjmp	.+192    	; 0x1114 <DIO_SetPinDirection+0x114>
    1054:	2f 81       	ldd	r18, Y+7	; 0x07
    1056:	38 85       	ldd	r19, Y+8	; 0x08
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	89 f1       	breq	.+98     	; 0x10c0 <DIO_SetPinDirection+0xc0>
    105e:	8f 81       	ldd	r24, Y+7	; 0x07
    1060:	98 85       	ldd	r25, Y+8	; 0x08
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_SetPinDirection+0x6a>
    1068:	40 c0       	rjmp	.+128    	; 0x10ea <DIO_SetPinDirection+0xea>
    106a:	54 c0       	rjmp	.+168    	; 0x1114 <DIO_SetPinDirection+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(DDRA,u8PinIdCopy); break;
    106c:	aa e3       	ldi	r26, 0x3A	; 58
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ea e3       	ldi	r30, 0x3A	; 58
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_SetPinDirection+0x8a>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_SetPinDirection+0x86>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	bd c0       	rjmp	.+378    	; 0x1210 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,u8PinIdCopy); break;
    1096:	a7 e3       	ldi	r26, 0x37	; 55
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e7 e3       	ldi	r30, 0x37	; 55
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_SetPinDirection+0xb4>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_SetPinDirection+0xb0>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	a8 c0       	rjmp	.+336    	; 0x1210 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,u8PinIdCopy); break;
    10c0:	a4 e3       	ldi	r26, 0x34	; 52
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e4 e3       	ldi	r30, 0x34	; 52
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_SetPinDirection+0xde>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_SetPinDirection+0xda>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	93 c0       	rjmp	.+294    	; 0x1210 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,u8PinIdCopy); break;
    10ea:	a1 e3       	ldi	r26, 0x31	; 49
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e1 e3       	ldi	r30, 0x31	; 49
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_SetPinDirection+0x108>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_SetPinDirection+0x104>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	7e c0       	rjmp	.+252    	; 0x1210 <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	7b c0       	rjmp	.+246    	; 0x1210 <DIO_SetPinDirection+0x210>
            }
        }
        else if(u8PinDirCopy==DIO_u8PIN_OUTPUT)
    111a:	8c 81       	ldd	r24, Y+4	; 0x04
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	09 f0       	breq	.+2      	; 0x1122 <DIO_SetPinDirection+0x122>
    1120:	72 c0       	rjmp	.+228    	; 0x1206 <DIO_SetPinDirection+0x206>
        {
            switch(u8PortIdCopy)
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	3e 83       	std	Y+6, r19	; 0x06
    112a:	2d 83       	std	Y+5, r18	; 0x05
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	91 05       	cpc	r25, r1
    1134:	49 f1       	breq	.+82     	; 0x1188 <DIO_SetPinDirection+0x188>
    1136:	2d 81       	ldd	r18, Y+5	; 0x05
    1138:	3e 81       	ldd	r19, Y+6	; 0x06
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	31 05       	cpc	r19, r1
    113e:	2c f4       	brge	.+10     	; 0x114a <DIO_SetPinDirection+0x14a>
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	61 f0       	breq	.+24     	; 0x1160 <DIO_SetPinDirection+0x160>
    1148:	5b c0       	rjmp	.+182    	; 0x1200 <DIO_SetPinDirection+0x200>
    114a:	2d 81       	ldd	r18, Y+5	; 0x05
    114c:	3e 81       	ldd	r19, Y+6	; 0x06
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	71 f1       	breq	.+92     	; 0x11b0 <DIO_SetPinDirection+0x1b0>
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	e9 f1       	breq	.+122    	; 0x11d8 <DIO_SetPinDirection+0x1d8>
    115e:	50 c0       	rjmp	.+160    	; 0x1200 <DIO_SetPinDirection+0x200>
            {
			case DIO_u8PORTA : SET_BIT(DDRA,u8PinIdCopy); break;
    1160:	aa e3       	ldi	r26, 0x3A	; 58
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	ea e3       	ldi	r30, 0x3A	; 58
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_SetPinDirection+0x17e>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_SetPinDirection+0x17a>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	44 c0       	rjmp	.+136    	; 0x1210 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,u8PinIdCopy); break;
    1188:	a7 e3       	ldi	r26, 0x37	; 55
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e7 e3       	ldi	r30, 0x37	; 55
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_SetPinDirection+0x1a6>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_SetPinDirection+0x1a2>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	30 c0       	rjmp	.+96     	; 0x1210 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,u8PinIdCopy); break;
    11b0:	a4 e3       	ldi	r26, 0x34	; 52
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_SetPinDirection+0x1ce>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_SetPinDirection+0x1ca>
    11d2:	84 2b       	or	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	1c c0       	rjmp	.+56     	; 0x1210 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,u8PinIdCopy); break;
    11d8:	a1 e3       	ldi	r26, 0x31	; 49
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e1 e3       	ldi	r30, 0x31	; 49
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_SetPinDirection+0x1f6>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_SetPinDirection+0x1f2>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	08 c0       	rjmp	.+16     	; 0x1210 <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1; break;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <DIO_SetPinDirection+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_SetPinDirection+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
}
    1212:	28 96       	adiw	r28, 0x08	; 8
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <DIO_SetPortDirection>:

u8 DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_SetPortDirection+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <DIO_SetPortDirection+0x8>
    122c:	0f 92       	push	r0
    122e:	cd b7       	in	r28, 0x3d	; 61
    1230:	de b7       	in	r29, 0x3e	; 62
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    1236:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3d 83       	std	Y+5, r19	; 0x05
    1240:	2c 83       	std	Y+4, r18	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	d1 f0       	breq	.+52     	; 0x1280 <DIO_SetPortDirection+0x5c>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <DIO_SetPortDirection+0x3c>
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	61 f0       	breq	.+24     	; 0x1276 <DIO_SetPortDirection+0x52>
    125e:	1f c0       	rjmp	.+62     	; 0x129e <DIO_SetPortDirection+0x7a>
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	3d 81       	ldd	r19, Y+5	; 0x05
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	81 f0       	breq	.+32     	; 0x128a <DIO_SetPortDirection+0x66>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <DIO_SetPortDirection+0x70>
    1274:	14 c0       	rjmp	.+40     	; 0x129e <DIO_SetPortDirection+0x7a>
    {
			case DIO_u8PORTA : DDRA = u8PortDir ; break;
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	80 83       	st	Z, r24
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTB : DDRB = u8PortDir ; break;
    1280:	e7 e3       	ldi	r30, 0x37	; 55
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	80 83       	st	Z, r24
    1288:	0c c0       	rjmp	.+24     	; 0x12a2 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTC : DDRC = u8PortDir ; break;
    128a:	e4 e3       	ldi	r30, 0x34	; 52
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	80 83       	st	Z, r24
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTD : DDRD = u8PortDir ; break;
    1294:	e1 e3       	ldi	r30, 0x31	; 49
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	80 83       	st	Z, r24
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_SetPortDirection+0x7e>
            default: Local_u8ErrorState=1; break;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	28 97       	sbiw	r28, 0x08	; 8
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	6b 83       	std	Y+3, r22	; 0x03
    12cc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    12ce:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 30       	cpi	r24, 0x08	; 8
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <DIO_SetPinValue+0x24>
    12d6:	f4 c0       	rjmp	.+488    	; 0x14c0 <DIO_SetPinValue+0x20c>
	{
        if(u8PinValCopy==DIO_u8PIN_LOW)
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	88 23       	and	r24, r24
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <DIO_SetPinValue+0x2c>
    12de:	77 c0       	rjmp	.+238    	; 0x13ce <DIO_SetPinValue+0x11a>
        {
            switch(u8PortIdCopy)
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	38 87       	std	Y+8, r19	; 0x08
    12e8:	2f 83       	std	Y+7, r18	; 0x07
    12ea:	8f 81       	ldd	r24, Y+7	; 0x07
    12ec:	98 85       	ldd	r25, Y+8	; 0x08
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	91 05       	cpc	r25, r1
    12f2:	59 f1       	breq	.+86     	; 0x134a <DIO_SetPinValue+0x96>
    12f4:	2f 81       	ldd	r18, Y+7	; 0x07
    12f6:	38 85       	ldd	r19, Y+8	; 0x08
    12f8:	22 30       	cpi	r18, 0x02	; 2
    12fa:	31 05       	cpc	r19, r1
    12fc:	2c f4       	brge	.+10     	; 0x1308 <DIO_SetPinValue+0x54>
    12fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1300:	98 85       	ldd	r25, Y+8	; 0x08
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	69 f0       	breq	.+26     	; 0x1320 <DIO_SetPinValue+0x6c>
    1306:	60 c0       	rjmp	.+192    	; 0x13c8 <DIO_SetPinValue+0x114>
    1308:	2f 81       	ldd	r18, Y+7	; 0x07
    130a:	38 85       	ldd	r19, Y+8	; 0x08
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	89 f1       	breq	.+98     	; 0x1374 <DIO_SetPinValue+0xc0>
    1312:	8f 81       	ldd	r24, Y+7	; 0x07
    1314:	98 85       	ldd	r25, Y+8	; 0x08
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <DIO_SetPinValue+0x6a>
    131c:	40 c0       	rjmp	.+128    	; 0x139e <DIO_SetPinValue+0xea>
    131e:	54 c0       	rjmp	.+168    	; 0x13c8 <DIO_SetPinValue+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(PORTA,u8PinIdCopy); break;
    1320:	ab e3       	ldi	r26, 0x3B	; 59
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	eb e3       	ldi	r30, 0x3B	; 59
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_SetPinValue+0x8a>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_SetPinValue+0x86>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	bd c0       	rjmp	.+378    	; 0x14c4 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,u8PinIdCopy); break;
    134a:	a8 e3       	ldi	r26, 0x38	; 56
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_SetPinValue+0xb4>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_SetPinValue+0xb0>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	a8 c0       	rjmp	.+336    	; 0x14c4 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,u8PinIdCopy); break;
    1374:	a5 e3       	ldi	r26, 0x35	; 53
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_SetPinValue+0xde>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_SetPinValue+0xda>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	93 c0       	rjmp	.+294    	; 0x14c4 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,u8PinIdCopy); break;
    139e:	a2 e3       	ldi	r26, 0x32	; 50
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e2 e3       	ldi	r30, 0x32	; 50
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <DIO_SetPinValue+0x108>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <DIO_SetPinValue+0x104>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	7e c0       	rjmp	.+252    	; 0x14c4 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01
    13cc:	7b c0       	rjmp	.+246    	; 0x14c4 <DIO_SetPinValue+0x210>
            }
        }
        else if(u8PinValCopy==DIO_u8PIN_HIGH)
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <DIO_SetPinValue+0x122>
    13d4:	72 c0       	rjmp	.+228    	; 0x14ba <DIO_SetPinValue+0x206>
        {
            switch(u8PortIdCopy)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3e 83       	std	Y+6, r19	; 0x06
    13de:	2d 83       	std	Y+5, r18	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	49 f1       	breq	.+82     	; 0x143c <DIO_SetPinValue+0x188>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <DIO_SetPinValue+0x14a>
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	61 f0       	breq	.+24     	; 0x1414 <DIO_SetPinValue+0x160>
    13fc:	5b c0       	rjmp	.+182    	; 0x14b4 <DIO_SetPinValue+0x200>
    13fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1400:	3e 81       	ldd	r19, Y+6	; 0x06
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	71 f1       	breq	.+92     	; 0x1464 <DIO_SetPinValue+0x1b0>
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	83 30       	cpi	r24, 0x03	; 3
    140e:	91 05       	cpc	r25, r1
    1410:	e9 f1       	breq	.+122    	; 0x148c <DIO_SetPinValue+0x1d8>
    1412:	50 c0       	rjmp	.+160    	; 0x14b4 <DIO_SetPinValue+0x200>
            {
			case DIO_u8PORTA : SET_BIT(PORTA,u8PinIdCopy); break;
    1414:	ab e3       	ldi	r26, 0x3B	; 59
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	eb e3       	ldi	r30, 0x3B	; 59
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <DIO_SetPinValue+0x17e>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <DIO_SetPinValue+0x17a>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	44 c0       	rjmp	.+136    	; 0x14c4 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,u8PinIdCopy); break;
    143c:	a8 e3       	ldi	r26, 0x38	; 56
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e8 e3       	ldi	r30, 0x38	; 56
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_SetPinValue+0x1a6>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_SetPinValue+0x1a2>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	30 c0       	rjmp	.+96     	; 0x14c4 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,u8PinIdCopy); break;
    1464:	a5 e3       	ldi	r26, 0x35	; 53
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_SetPinValue+0x1ce>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_SetPinValue+0x1ca>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	1c c0       	rjmp	.+56     	; 0x14c4 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,u8PinIdCopy); break;
    148c:	a2 e3       	ldi	r26, 0x32	; 50
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e2 e3       	ldi	r30, 0x32	; 50
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <DIO_SetPinValue+0x1f6>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <DIO_SetPinValue+0x1f2>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	08 c0       	rjmp	.+16     	; 0x14c4 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1; break;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <DIO_SetPinValue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_SetPinValue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c6:	28 96       	adiw	r28, 0x08	; 8
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <DIO_SetPortValue>:

u8 DIO_SetPortValue     (u8 u8PortId, u8 u8PortVal)
{
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	00 d0       	rcall	.+0      	; 0x14de <DIO_SetPortValue+0x6>
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_SetPortValue+0x8>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	8a 83       	std	Y+2, r24	; 0x02
    14e8:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    14ea:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	2c 83       	std	Y+4, r18	; 0x04
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <DIO_SetPortValue+0x5c>
    1500:	2c 81       	ldd	r18, Y+4	; 0x04
    1502:	3d 81       	ldd	r19, Y+5	; 0x05
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <DIO_SetPortValue+0x3c>
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	9d 81       	ldd	r25, Y+5	; 0x05
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <DIO_SetPortValue+0x52>
    1512:	1f c0       	rjmp	.+62     	; 0x1552 <DIO_SetPortValue+0x7a>
    1514:	2c 81       	ldd	r18, Y+4	; 0x04
    1516:	3d 81       	ldd	r19, Y+5	; 0x05
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <DIO_SetPortValue+0x66>
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_SetPortValue+0x70>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <DIO_SetPortValue+0x7a>
    {
			case DIO_u8PORTA : PORTA = u8PortVal ; break;
    152a:	eb e3       	ldi	r30, 0x3B	; 59
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	80 83       	st	Z, r24
    1532:	11 c0       	rjmp	.+34     	; 0x1556 <DIO_SetPortValue+0x7e>
			case DIO_u8PORTB : PORTB = u8PortVal ; break;
    1534:	e8 e3       	ldi	r30, 0x38	; 56
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	80 83       	st	Z, r24
    153c:	0c c0       	rjmp	.+24     	; 0x1556 <DIO_SetPortValue+0x7e>
			case DIO_u8PORTC : PORTC = u8PortVal ; break;
    153e:	e5 e3       	ldi	r30, 0x35	; 53
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	80 83       	st	Z, r24
    1546:	07 c0       	rjmp	.+14     	; 0x1556 <DIO_SetPortValue+0x7e>
			case DIO_u8PORTD : PORTD = u8PortVal ; break;
    1548:	e2 e3       	ldi	r30, 0x32	; 50
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	80 83       	st	Z, r24
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <DIO_SetPortValue+0x7e>
            default: Local_u8ErrorState=1; break;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1556:	89 81       	ldd	r24, Y+1	; 0x01
}
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy , u8* Pu8_ValCopy)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	27 97       	sbiw	r28, 0x07	; 7
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	8a 83       	std	Y+2, r24	; 0x02
    157e:	6b 83       	std	Y+3, r22	; 0x03
    1580:	5d 83       	std	Y+5, r21	; 0x05
    1582:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    1584:	19 82       	std	Y+1, r1	; 0x01
    if((Pu8_ValCopy!=NULL && u8PinIdCopy <= DIO_u8PIN7))
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_GetPinValue+0x28>
    158e:	78 c0       	rjmp	.+240    	; 0x1680 <DIO_GetPinValue+0x118>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	88 30       	cpi	r24, 0x08	; 8
    1594:	08 f0       	brcs	.+2      	; 0x1598 <DIO_GetPinValue+0x30>
    1596:	74 c0       	rjmp	.+232    	; 0x1680 <DIO_GetPinValue+0x118>
    {
    switch(u8PortIdCopy)
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	3f 83       	std	Y+7, r19	; 0x07
    15a0:	2e 83       	std	Y+6, r18	; 0x06
    15a2:	4e 81       	ldd	r20, Y+6	; 0x06
    15a4:	5f 81       	ldd	r21, Y+7	; 0x07
    15a6:	41 30       	cpi	r20, 0x01	; 1
    15a8:	51 05       	cpc	r21, r1
    15aa:	59 f1       	breq	.+86     	; 0x1602 <DIO_GetPinValue+0x9a>
    15ac:	8e 81       	ldd	r24, Y+6	; 0x06
    15ae:	9f 81       	ldd	r25, Y+7	; 0x07
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	91 05       	cpc	r25, r1
    15b4:	34 f4       	brge	.+12     	; 0x15c2 <DIO_GetPinValue+0x5a>
    15b6:	2e 81       	ldd	r18, Y+6	; 0x06
    15b8:	3f 81       	ldd	r19, Y+7	; 0x07
    15ba:	21 15       	cp	r18, r1
    15bc:	31 05       	cpc	r19, r1
    15be:	69 f0       	breq	.+26     	; 0x15da <DIO_GetPinValue+0x72>
    15c0:	5c c0       	rjmp	.+184    	; 0x167a <DIO_GetPinValue+0x112>
    15c2:	4e 81       	ldd	r20, Y+6	; 0x06
    15c4:	5f 81       	ldd	r21, Y+7	; 0x07
    15c6:	42 30       	cpi	r20, 0x02	; 2
    15c8:	51 05       	cpc	r21, r1
    15ca:	79 f1       	breq	.+94     	; 0x162a <DIO_GetPinValue+0xc2>
    15cc:	8e 81       	ldd	r24, Y+6	; 0x06
    15ce:	9f 81       	ldd	r25, Y+7	; 0x07
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <DIO_GetPinValue+0x70>
    15d6:	3d c0       	rjmp	.+122    	; 0x1652 <DIO_GetPinValue+0xea>
    15d8:	50 c0       	rjmp	.+160    	; 0x167a <DIO_GetPinValue+0x112>
        {
			case DIO_u8PORTA : *Pu8_ValCopy = GET_BIT(PINA , u8PinIdCopy) ; break;
    15da:	e9 e3       	ldi	r30, 0x39	; 57
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a9 01       	movw	r20, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_GetPinValue+0x8a>
    15ee:	55 95       	asr	r21
    15f0:	47 95       	ror	r20
    15f2:	8a 95       	dec	r24
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_GetPinValue+0x86>
    15f6:	ca 01       	movw	r24, r20
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	ec 81       	ldd	r30, Y+4	; 0x04
    15fc:	fd 81       	ldd	r31, Y+5	; 0x05
    15fe:	80 83       	st	Z, r24
    1600:	41 c0       	rjmp	.+130    	; 0x1684 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTB : *Pu8_ValCopy = GET_BIT(PINB , u8PinIdCopy) ; break;
    1602:	e6 e3       	ldi	r30, 0x36	; 54
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a9 01       	movw	r20, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_GetPinValue+0xb2>
    1616:	55 95       	asr	r21
    1618:	47 95       	ror	r20
    161a:	8a 95       	dec	r24
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_GetPinValue+0xae>
    161e:	ca 01       	movw	r24, r20
    1620:	81 70       	andi	r24, 0x01	; 1
    1622:	ec 81       	ldd	r30, Y+4	; 0x04
    1624:	fd 81       	ldd	r31, Y+5	; 0x05
    1626:	80 83       	st	Z, r24
    1628:	2d c0       	rjmp	.+90     	; 0x1684 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTC : *Pu8_ValCopy = GET_BIT(PINC , u8PinIdCopy) ; break;
    162a:	e3 e3       	ldi	r30, 0x33	; 51
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_GetPinValue+0xda>
    163e:	55 95       	asr	r21
    1640:	47 95       	ror	r20
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_GetPinValue+0xd6>
    1646:	ca 01       	movw	r24, r20
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	ec 81       	ldd	r30, Y+4	; 0x04
    164c:	fd 81       	ldd	r31, Y+5	; 0x05
    164e:	80 83       	st	Z, r24
    1650:	19 c0       	rjmp	.+50     	; 0x1684 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTD : *Pu8_ValCopy = GET_BIT(PIND , u8PinIdCopy) ; break;
    1652:	e0 e3       	ldi	r30, 0x30	; 48
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a9 01       	movw	r20, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_GetPinValue+0x102>
    1666:	55 95       	asr	r21
    1668:	47 95       	ror	r20
    166a:	8a 95       	dec	r24
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_GetPinValue+0xfe>
    166e:	ca 01       	movw	r24, r20
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	ec 81       	ldd	r30, Y+4	; 0x04
    1674:	fd 81       	ldd	r31, Y+5	; 0x05
    1676:	80 83       	st	Z, r24
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <DIO_GetPinValue+0x11c>
            default: Local_u8ErrorState=1; break;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_GetPinValue+0x11c>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1684:	89 81       	ldd	r24, Y+1	; 0x01

}
    1686:	27 96       	adiw	r28, 0x07	; 7
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_register.h"

void ADC_voidInit(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62

#if VOITAGE_REF==AVCC
	/*AVCC as reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
    16a0:	a7 e2       	ldi	r26, 0x27	; 39
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e7 e2       	ldi	r30, 0x27	; 39
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	80 64       	ori	r24, 0x40	; 64
    16ac:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    16ae:	a7 e2       	ldi	r26, 0x27	; 39
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e7 e2       	ldi	r30, 0x27	; 39
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8f 77       	andi	r24, 0x7F	; 127
    16ba:	8c 93       	st	X, r24
#error "Wrong VOITAGE_REF confg option"
#endif

#if leftright_adj==left_adj
	/*active ADC left adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
    16bc:	a7 e2       	ldi	r26, 0x27	; 39
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e7 e2       	ldi	r30, 0x27	; 39
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	80 62       	ori	r24, 0x20	; 32
    16c8:	8c 93       	st	X, r24
#error "Wrong leftright_adj confg option"
#endif


	/*set Prescaler*/
	ADCSRA&=0b11111000;
    16ca:	a6 e2       	ldi	r26, 0x26	; 38
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e6 e2       	ldi	r30, 0x26	; 38
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 7f       	andi	r24, 0xF8	; 248
    16d6:	8c 93       	st	X, r24
	ADCSRA|=PRESCALE_DIV;
    16d8:	a6 e2       	ldi	r26, 0x26	; 38
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e6 e2       	ldi	r30, 0x26	; 38
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	87 60       	ori	r24, 0x07	; 7
    16e4:	8c 93       	st	X, r24
	/*ADC Enable*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    16e6:	a6 e2       	ldi	r26, 0x26	; 38
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e6 e2       	ldi	r30, 0x26	; 38
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 68       	ori	r24, 0x80	; 128
    16f2:	8c 93       	st	X, r24


}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <ADC_GetChannelReading>:

u8 ADC_GetChannelReading(u8 Copy_u8Channel)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	0f 92       	push	r0
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	89 83       	std	Y+1, r24	; 0x01
	/*clear the MUX bits in ADMUX register*/
	ADMUX &=0b11100000;
    1706:	a7 e2       	ldi	r26, 0x27	; 39
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e7 e2       	ldi	r30, 0x27	; 39
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 7e       	andi	r24, 0xE0	; 224
    1712:	8c 93       	st	X, r24
	/*set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
    1714:	a7 e2       	ldi	r26, 0x27	; 39
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e7 e2       	ldi	r30, 0x27	; 39
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	90 81       	ld	r25, Z
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	89 2b       	or	r24, r25
    1722:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1724:	a6 e2       	ldi	r26, 0x26	; 38
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e6 e2       	ldi	r30, 0x26	; 38
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 64       	ori	r24, 0x40	; 64
    1730:	8c 93       	st	X, r24
	/*Polling until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0); //flag is set
    1732:	e6 e2       	ldi	r30, 0x26	; 38
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	82 95       	swap	r24
    173a:	8f 70       	andi	r24, 0x0F	; 15
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	90 70       	andi	r25, 0x00	; 0
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	a9 f3       	breq	.-22     	; 0x1732 <ADC_GetChannelReading+0x38>
	/*Clear the conversion flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF); //flag is Clear
    1748:	a6 e2       	ldi	r26, 0x26	; 38
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e6 e2       	ldi	r30, 0x26	; 38
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	80 61       	ori	r24, 0x10	; 16
    1754:	8c 93       	st	X, r24

#if  res==_8_bit
	return ADCH;
    1756:	e5 e2       	ldi	r30, 0x25	; 37
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
#else
#error "Wrong leftright_adj confg option"
#endif
	/*Return the reading*/

}
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <KPD_u8GetPressedkey>:
#include "KPD_private.h"
#include <util/delay.h>


u8 KPD_u8GetPressedkey(void)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <KPD_u8GetPressedkey+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <KPD_u8GetPressedkey+0x8>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pressedkey=KPD_NO_PREESED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    1772:	8f ef       	ldi	r24, 0xFF	; 255
    1774:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1776:	1a 82       	std	Y+2, r1	; 0x02
    1778:	5e c0       	rjmp	.+188    	; 0x1836 <KPD_u8GetPressedkey+0xd2>
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	fc 01       	movw	r30, r24
    1782:	e4 59       	subi	r30, 0x94	; 148
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	90 81       	ld	r25, Z
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	69 2f       	mov	r22, r25
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1792:	19 82       	std	Y+1, r1	; 0x01
    1794:	3d c0       	rjmp	.+122    	; 0x1810 <KPD_u8GetPressedkey+0xac>
		{
			/*Read the current row*/
			DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    1796:	89 81       	ldd	r24, Y+1	; 0x01
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	fc 01       	movw	r30, r24
    179e:	e8 59       	subi	r30, 0x98	; 152
    17a0:	ff 4f       	sbci	r31, 0xFF	; 255
    17a2:	90 81       	ld	r25, Z
    17a4:	9e 01       	movw	r18, r28
    17a6:	2c 5f       	subi	r18, 0xFC	; 252
    17a8:	3f 4f       	sbci	r19, 0xFF	; 255
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	69 2f       	mov	r22, r25
    17ae:	a9 01       	movw	r20, r18
    17b0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_GetPinValue>

			/*check if switch is pressed*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	88 23       	and	r24, r24
    17b8:	41 f5       	brne	.+80     	; 0x180a <KPD_u8GetPressedkey+0xa6>
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	48 2f       	mov	r20, r24
    17be:	50 e0       	ldi	r21, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	ca 01       	movw	r24, r20
    17c8:	88 0f       	add	r24, r24
    17ca:	99 1f       	adc	r25, r25
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	fc 01       	movw	r30, r24
    17d6:	e0 59       	subi	r30, 0x90	; 144
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	8b 83       	std	Y+3, r24	; 0x03
    17de:	0f c0       	rjmp	.+30     	; 0x17fe <KPD_u8GetPressedkey+0x9a>

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	fc 01       	movw	r30, r24
    17e8:	e8 59       	subi	r30, 0x98	; 152
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	90 81       	ld	r25, Z
    17ee:	9e 01       	movw	r18, r28
    17f0:	2c 5f       	subi	r18, 0xFC	; 252
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	69 2f       	mov	r22, r25
    17f8:	a9 01       	movw	r20, r18
    17fa:	0e 94 b4 0a 	call	0x1568	; 0x1568 <DIO_GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	88 23       	and	r24, r24
    1802:	71 f3       	breq	.-36     	; 0x17e0 <KPD_u8GetPressedkey+0x7c>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8Pressedkey;
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	1c c0       	rjmp	.+56     	; 0x1842 <KPD_u8GetPressedkey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	08 f4       	brcc	.+2      	; 0x1818 <KPD_u8GetPressedkey+0xb4>
    1816:	bf cf       	rjmp	.-130    	; 0x1796 <KPD_u8GetPressedkey+0x32>
				}
				return Local_u8Pressedkey;
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 2f       	mov	r24, r24
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	fc 01       	movw	r30, r24
    1820:	e4 59       	subi	r30, 0x94	; 148
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	90 81       	ld	r25, Z
    1826:	83 e0       	ldi	r24, 0x03	; 3
    1828:	69 2f       	mov	r22, r25
    182a:	41 e0       	ldi	r20, 0x01	; 1
    182c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	8f 5f       	subi	r24, 0xFF	; 255
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	84 30       	cpi	r24, 0x04	; 4
    183a:	08 f4       	brcc	.+2      	; 0x183e <KPD_u8GetPressedkey+0xda>
    183c:	9e cf       	rjmp	.-196    	; 0x177a <KPD_u8GetPressedkey+0x16>
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8Pressedkey;
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <DAC_voidAnalogvalue>:
#include "../../lib/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "DAC_interface.h"

void DAC_voidAnalogvalue(u8 Copy_u8Value,u8 Copy_u8Port)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <DAC_voidAnalogvalue+0x6>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DigetalOutput=Copy_u8Value*51;
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	83 e3       	ldi	r24, 0x33	; 51
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	ac 01       	movw	r20, r24
    1870:	24 9f       	mul	r18, r20
    1872:	c0 01       	movw	r24, r0
    1874:	25 9f       	mul	r18, r21
    1876:	90 0d       	add	r25, r0
    1878:	34 9f       	mul	r19, r20
    187a:	90 0d       	add	r25, r0
    187c:	11 24       	eor	r1, r1
    187e:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortValue(Copy_u8Port,Local_u8DigetalOutput);
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	69 81       	ldd	r22, Y+1	; 0x01
    1884:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <DIO_SetPortValue>
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <CLCD_voidSendCommand>:
#include <util/delay.h>



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	2f 97       	sbiw	r28, 0x0f	; 15
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin Low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	40 e0       	ldi	r20, 0x00	; 0
    18ba:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

	/*Set command to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    18c2:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	62 e0       	ldi	r22, 0x02	; 2
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e0       	ldi	r26, 0x00	; 0
    18d6:	b0 e4       	ldi	r27, 0x40	; 64
    18d8:	8b 87       	std	Y+11, r24	; 0x0b
    18da:	9c 87       	std	Y+12, r25	; 0x0c
    18dc:	ad 87       	std	Y+13, r26	; 0x0d
    18de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8f 83       	std	Y+7, r24	; 0x07
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	a9 87       	std	Y+9, r26	; 0x09
    18fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6b 85       	ldd	r22, Y+11	; 0x0b
    193c:	7c 85       	ldd	r23, Y+12	; 0x0c
    193e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1940:	9e 85       	ldd	r25, Y+14	; 0x0e
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <CLCD_voidSendCommand+0xee>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <CLCD_voidSendCommand+0xdc>
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <CLCD_voidSendCommand+0xd0>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <CLCD_voidSendCommand+0x118>
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

}
    19be:	2f 96       	adiw	r28, 0x0f	; 15
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	2f 97       	sbiw	r28, 0x0f	; 15
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin High for data*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

	/*Set data to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    19fe:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a0 e0       	ldi	r26, 0x00	; 0
    1a12:	b0 e4       	ldi	r27, 0x40	; 64
    1a14:	8b 87       	std	Y+11, r24	; 0x0b
    1a16:	9c 87       	std	Y+12, r25	; 0x0c
    1a18:	ad 87       	std	Y+13, r26	; 0x0d
    1a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a ef       	ldi	r20, 0xFA	; 250
    1a2a:	54 e4       	ldi	r21, 0x44	; 68
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8f 83       	std	Y+7, r24	; 0x07
    1a36:	98 87       	std	Y+8, r25	; 0x08
    1a38:	a9 87       	std	Y+9, r26	; 0x09
    1a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <CLCD_voidSendData+0xee>
    1aa0:	88 ec       	ldi	r24, 0xC8	; 200
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9c 83       	std	Y+4, r25	; 0x04
    1aa6:	8b 83       	std	Y+3, r24	; 0x03
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <CLCD_voidSendData+0xdc>
    1ab0:	9c 83       	std	Y+4, r25	; 0x04
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <CLCD_voidSendData+0xd0>
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	9a 83       	std	Y+2, r25	; 0x02
    1ae2:	89 83       	std	Y+1, r24	; 0x01
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <CLCD_voidSendData+0x118>
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>

}
    1afa:	2f 96       	adiw	r28, 0x0f	; 15
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <CLCD_voidInit>:

void CLCD_voidInit(void)

{
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	2e 97       	sbiw	r28, 0x0e	; 14
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e2       	ldi	r26, 0x20	; 32
    1b26:	b2 e4       	ldi	r27, 0x42	; 66
    1b28:	8b 87       	std	Y+11, r24	; 0x0b
    1b2a:	9c 87       	std	Y+12, r25	; 0x0c
    1b2c:	ad 87       	std	Y+13, r26	; 0x0d
    1b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	4a ef       	ldi	r20, 0xFA	; 250
    1b3e:	54 e4       	ldi	r21, 0x44	; 68
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8f 83       	std	Y+7, r24	; 0x07
    1b4a:	98 87       	std	Y+8, r25	; 0x08
    1b4c:	a9 87       	std	Y+9, r26	; 0x09
    1b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	5f e3       	ldi	r21, 0x3F	; 63
    1b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b64:	88 23       	and	r24, r24
    1b66:	2c f4       	brge	.+10     	; 0x1b72 <CLCD_voidInit+0x66>
		__ticks = 1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	3f c0       	rjmp	.+126    	; 0x1bf0 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1b72:	6f 81       	ldd	r22, Y+7	; 0x07
    1b74:	78 85       	ldd	r23, Y+8	; 0x08
    1b76:	89 85       	ldd	r24, Y+9	; 0x09
    1b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	3f ef       	ldi	r19, 0xFF	; 255
    1b7e:	4f e7       	ldi	r20, 0x7F	; 127
    1b80:	57 e4       	ldi	r21, 0x47	; 71
    1b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b86:	18 16       	cp	r1, r24
    1b88:	4c f5       	brge	.+82     	; 0x1bdc <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	40 e2       	ldi	r20, 0x20	; 32
    1b98:	51 e4       	ldi	r21, 0x41	; 65
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
    1bb2:	0f c0       	rjmp	.+30     	; 0x1bd2 <CLCD_voidInit+0xc6>
    1bb4:	88 ec       	ldi	r24, 0xC8	; 200
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <CLCD_voidInit+0xb4>
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	9e 81       	ldd	r25, Y+6	; 0x06
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	69 f7       	brne	.-38     	; 0x1bb4 <CLCD_voidInit+0xa8>
    1bda:	14 c0       	rjmp	.+40     	; 0x1c04 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	9a 83       	std	Y+2, r25	; 0x02
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <CLCD_voidInit+0xf0>
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms */
	_delay_ms(40);

	/* function set command : 2 line , 5*8 font size */
	CLCD_voidSendCommand(0b00111100);
    1c04:	8c e3       	ldi	r24, 0x3C	; 60
    1c06:	0e 94 4a 0c 	call	0x1894	; 0x1894 <CLCD_voidSendCommand>

	/* display on off control: display enable, disable cursor , no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    1c0a:	8c e0       	ldi	r24, 0x0C	; 12
    1c0c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <CLCD_voidSendCommand>

	/* clear display */
	CLCD_voidSendCommand(1);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	0e 94 4a 0c 	call	0x1894	; 0x1894 <CLCD_voidSendCommand>

}
    1c16:	2e 96       	adiw	r28, 0x0e	; 14
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	f8 94       	cli
    1c1c:	de bf       	out	0x3e, r29	; 62
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	cd bf       	out	0x3d, r28	; 61
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <CLCD_voidSendString+0x6>
    1c2e:	0f 92       	push	r0
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	9b 83       	std	Y+3, r25	; 0x03
    1c36:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1c38:	19 82       	std	Y+1, r1	; 0x01
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <CLCD_voidSendString+0x32>
	while (Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	9b 81       	ldd	r25, Y+3	; 0x03
    1c46:	fc 01       	movw	r30, r24
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	90 81       	ld	r25, Z
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	8f 5f       	subi	r24, 0xFF	; 255
    1c52:	89 83       	std	Y+1, r24	; 0x01
    1c54:	89 2f       	mov	r24, r25
    1c56:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != '\0')
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	9b 81       	ldd	r25, Y+3	; 0x03
    1c64:	fc 01       	movw	r30, r24
    1c66:	e2 0f       	add	r30, r18
    1c68:	f3 1f       	adc	r31, r19
    1c6a:	80 81       	ld	r24, Z
    1c6c:	88 23       	and	r24, r24
    1c6e:	31 f7       	brne	.-52     	; 0x1c3c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
	}
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <CLCD_voidGoToXY+0x6>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	8a 83       	std	Y+2, r24	; 0x02
    1c8a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8XPos==0)
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	88 23       	and	r24, r24
    1c90:	19 f4       	brne	.+6      	; 0x1c98 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	89 83       	std	Y+1, r24	; 0x01
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	19 f4       	brne	.+6      	; 0x1ca4 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	80 5c       	subi	r24, 0xC0	; 192
    1ca2:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+ 128);
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	80 58       	subi	r24, 0x80	; 128
    1ca8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <CLCD_voidSendCommand>
}
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8* Copy_u8ArrayPtr, u8 Copy_u8BlockNum, u8 Copy_XPos, u8 Copy_YPos)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	27 97       	sbiw	r28, 0x07	; 7
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
    1cd0:	6d 83       	std	Y+5, r22	; 0x05
    1cd2:	4e 83       	std	Y+6, r20	; 0x06
    1cd4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0;
    1cd6:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	80 5c       	subi	r24, 0xC0	; 192
    1cf0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <CLCD_voidSendCommand>

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1cf4:	19 82       	std	Y+1, r1	; 0x01
    1cf6:	0e c0       	rjmp	.+28     	; 0x1d14 <CLCD_voidDisplaySpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	80 81       	ld	r24, Z
    1d0a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	8f 5f       	subi	r24, 0xFF	; 255
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	78 f3       	brcs	.-34     	; 0x1cf8 <CLCD_voidDisplaySpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
	}

	CLCD_voidGoToXY(Copy_XPos,Copy_YPos);
    1d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1e:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <CLCD_voidGoToXY>

	CLCD_voidSendData(Copy_u8BlockNum);
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
}
    1d28:	27 96       	adiw	r28, 0x07	; 7
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <CLCD_voidDisplayNumber>:

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	65 97       	sbiw	r28, 0x15	; 21
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	6a 87       	std	Y+10, r22	; 0x0a
    1d50:	7b 87       	std	Y+11, r23	; 0x0b
    1d52:	8c 87       	std	Y+12, r24	; 0x0c
    1d54:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1d56:	2d b7       	in	r18, 0x3d	; 61
    1d58:	3e b7       	in	r19, 0x3e	; 62
    1d5a:	3d 8b       	std	Y+21, r19	; 0x15
    1d5c:	2c 8b       	std	Y+20, r18	; 0x14
	CLCD_voidSendData(Copy_u8BlockNum);
}

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    1d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d62:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d64:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	a1 05       	cpc	r26, r1
    1d6a:	b1 05       	cpc	r27, r1
    1d6c:	21 f4       	brne	.+8      	; 0x1d76 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    1d6e:	80 e3       	ldi	r24, 0x30	; 48
    1d70:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1d74:	13 c1       	rjmp	.+550    	; 0x1f9c <CLCD_voidDisplayNumber+0x262>
    1d76:	8d b7       	in	r24, 0x3d	; 61
    1d78:	9e b7       	in	r25, 0x3e	; 62
    1d7a:	9f 87       	std	Y+15, r25	; 0x0f
    1d7c:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;;
    1d7e:	1f 82       	std	Y+7, r1	; 0x07
    1d80:	1e 82       	std	Y+6, r1	; 0x06
    1d82:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    1d84:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d86:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d88:	ac 85       	ldd	r26, Y+12	; 0x0c
    1d8a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	9a 83       	std	Y+2, r25	; 0x02
    1d90:	ab 83       	std	Y+3, r26	; 0x03
    1d92:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    1d94:	8d 81       	ldd	r24, Y+5	; 0x05
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	ab 81       	ldd	r26, Y+3	; 0x03
    1da0:	bc 81       	ldd	r27, Y+4	; 0x04
    1da2:	2a e0       	ldi	r18, 0x0A	; 10
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodsi4>
    1db2:	da 01       	movw	r26, r20
    1db4:	c9 01       	movw	r24, r18
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	9a 83       	std	Y+2, r25	; 0x02
    1dba:	ab 83       	std	Y+3, r26	; 0x03
    1dbc:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	ab 81       	ldd	r26, Y+3	; 0x03
    1dc4:	bc 81       	ldd	r27, Y+4	; 0x04
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	a1 05       	cpc	r26, r1
    1dca:	b1 05       	cpc	r27, r1
    1dcc:	19 f7       	brne	.-58     	; 0x1d94 <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	2d b7       	in	r18, 0x3d	; 61
    1dd6:	3e b7       	in	r19, 0x3e	; 62
    1dd8:	28 1b       	sub	r18, r24
    1dda:	39 0b       	sbc	r19, r25
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	3e bf       	out	0x3e, r19	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	2d bf       	out	0x3d, r18	; 61
    1de6:	8d b7       	in	r24, 0x3d	; 61
    1de8:	9e b7       	in	r25, 0x3e	; 62
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	9b 8b       	std	Y+19, r25	; 0x13
    1dee:	8a 8b       	std	Y+18, r24	; 0x12
    1df0:	8a 89       	ldd	r24, Y+18	; 0x12
    1df2:	9b 89       	ldd	r25, Y+19	; 0x13
    1df4:	00 96       	adiw	r24, 0x00	; 0
    1df6:	9b 8b       	std	Y+19, r25	; 0x13
    1df8:	8a 8b       	std	Y+18, r24	; 0x12
    1dfa:	2a 89       	ldd	r18, Y+18	; 0x12
    1dfc:	3b 89       	ldd	r19, Y+19	; 0x13
    1dfe:	39 87       	std	Y+9, r19	; 0x09
    1e00:	28 87       	std	Y+8, r18	; 0x08
    1e02:	2e c0       	rjmp	.+92     	; 0x1e60 <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    1e04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e08:	ac 85       	ldd	r26, Y+12	; 0x0c
    1e0a:	bd 85       	ldd	r27, Y+13	; 0x0d
    1e0c:	2a e0       	ldi	r18, 0x0A	; 10
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodsi4>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    1e22:	8e 81       	ldd	r24, Y+6	; 0x06
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	88 85       	ldd	r24, Y+8	; 0x08
    1e2a:	99 85       	ldd	r25, Y+9	; 0x09
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	e2 0f       	add	r30, r18
    1e30:	f3 1f       	adc	r31, r19
    1e32:	8f 81       	ldd	r24, Y+7	; 0x07
    1e34:	80 83       	st	Z, r24
		Local_u8Counter++;
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	8f 5f       	subi	r24, 0xFF	; 255
    1e3a:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    1e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e40:	ac 85       	ldd	r26, Y+12	; 0x0c
    1e42:	bd 85       	ldd	r27, Y+13	; 0x0d
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 09 10 	call	0x2012	; 0x2012 <__udivmodsi4>
    1e54:	da 01       	movw	r26, r20
    1e56:	c9 01       	movw	r24, r18
    1e58:	8a 87       	std	Y+10, r24	; 0x0a
    1e5a:	9b 87       	std	Y+11, r25	; 0x0b
    1e5c:	ac 87       	std	Y+12, r26	; 0x0c
    1e5e:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    1e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e64:	ac 85       	ldd	r26, Y+12	; 0x0c
    1e66:	bd 85       	ldd	r27, Y+13	; 0x0d
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	a1 05       	cpc	r26, r1
    1e6c:	b1 05       	cpc	r27, r1
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <CLCD_voidDisplayNumber+0x13e>
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	8d 81       	ldd	r24, Y+5	; 0x05
    1e74:	98 17       	cp	r25, r24
    1e76:	30 f2       	brcs	.-116    	; 0x1e04 <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	81 50       	subi	r24, 0x01	; 1
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1e7e:	1e 82       	std	Y+6, r1	; 0x06
    1e80:	81 c0       	rjmp	.+258    	; 0x1f84 <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	28 1b       	sub	r18, r24
    1e90:	39 0b       	sbc	r19, r25
    1e92:	88 85       	ldd	r24, Y+8	; 0x08
    1e94:	99 85       	ldd	r25, Y+9	; 0x09
    1e96:	fc 01       	movw	r30, r24
    1e98:	e2 0f       	add	r30, r18
    1e9a:	f3 1f       	adc	r31, r19
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	39 8b       	std	Y+17, r19	; 0x11
    1ea4:	28 8b       	std	Y+16, r18	; 0x10
    1ea6:	88 89       	ldd	r24, Y+16	; 0x10
    1ea8:	99 89       	ldd	r25, Y+17	; 0x11
    1eaa:	84 30       	cpi	r24, 0x04	; 4
    1eac:	91 05       	cpc	r25, r1
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <CLCD_voidDisplayNumber+0x178>
    1eb0:	4f c0       	rjmp	.+158    	; 0x1f50 <CLCD_voidDisplayNumber+0x216>
    1eb2:	28 89       	ldd	r18, Y+16	; 0x10
    1eb4:	39 89       	ldd	r19, Y+17	; 0x11
    1eb6:	25 30       	cpi	r18, 0x05	; 5
    1eb8:	31 05       	cpc	r19, r1
    1eba:	d4 f4       	brge	.+52     	; 0x1ef0 <CLCD_voidDisplayNumber+0x1b6>
    1ebc:	88 89       	ldd	r24, Y+16	; 0x10
    1ebe:	99 89       	ldd	r25, Y+17	; 0x11
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	91 05       	cpc	r25, r1
    1ec4:	c9 f1       	breq	.+114    	; 0x1f38 <CLCD_voidDisplayNumber+0x1fe>
    1ec6:	28 89       	ldd	r18, Y+16	; 0x10
    1ec8:	39 89       	ldd	r19, Y+17	; 0x11
    1eca:	22 30       	cpi	r18, 0x02	; 2
    1ecc:	31 05       	cpc	r19, r1
    1ece:	2c f4       	brge	.+10     	; 0x1eda <CLCD_voidDisplayNumber+0x1a0>
    1ed0:	88 89       	ldd	r24, Y+16	; 0x10
    1ed2:	99 89       	ldd	r25, Y+17	; 0x11
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	61 f1       	breq	.+88     	; 0x1f30 <CLCD_voidDisplayNumber+0x1f6>
    1ed8:	52 c0       	rjmp	.+164    	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
    1eda:	28 89       	ldd	r18, Y+16	; 0x10
    1edc:	39 89       	ldd	r19, Y+17	; 0x11
    1ede:	22 30       	cpi	r18, 0x02	; 2
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	71 f1       	breq	.+92     	; 0x1f40 <CLCD_voidDisplayNumber+0x206>
    1ee4:	88 89       	ldd	r24, Y+16	; 0x10
    1ee6:	99 89       	ldd	r25, Y+17	; 0x11
    1ee8:	83 30       	cpi	r24, 0x03	; 3
    1eea:	91 05       	cpc	r25, r1
    1eec:	69 f1       	breq	.+90     	; 0x1f48 <CLCD_voidDisplayNumber+0x20e>
    1eee:	47 c0       	rjmp	.+142    	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
    1ef0:	28 89       	ldd	r18, Y+16	; 0x10
    1ef2:	39 89       	ldd	r19, Y+17	; 0x11
    1ef4:	27 30       	cpi	r18, 0x07	; 7
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	b9 f1       	breq	.+110    	; 0x1f68 <CLCD_voidDisplayNumber+0x22e>
    1efa:	88 89       	ldd	r24, Y+16	; 0x10
    1efc:	99 89       	ldd	r25, Y+17	; 0x11
    1efe:	88 30       	cpi	r24, 0x08	; 8
    1f00:	91 05       	cpc	r25, r1
    1f02:	5c f4       	brge	.+22     	; 0x1f1a <CLCD_voidDisplayNumber+0x1e0>
    1f04:	28 89       	ldd	r18, Y+16	; 0x10
    1f06:	39 89       	ldd	r19, Y+17	; 0x11
    1f08:	25 30       	cpi	r18, 0x05	; 5
    1f0a:	31 05       	cpc	r19, r1
    1f0c:	29 f1       	breq	.+74     	; 0x1f58 <CLCD_voidDisplayNumber+0x21e>
    1f0e:	88 89       	ldd	r24, Y+16	; 0x10
    1f10:	99 89       	ldd	r25, Y+17	; 0x11
    1f12:	86 30       	cpi	r24, 0x06	; 6
    1f14:	91 05       	cpc	r25, r1
    1f16:	21 f1       	breq	.+72     	; 0x1f60 <CLCD_voidDisplayNumber+0x226>
    1f18:	32 c0       	rjmp	.+100    	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
    1f1a:	28 89       	ldd	r18, Y+16	; 0x10
    1f1c:	39 89       	ldd	r19, Y+17	; 0x11
    1f1e:	28 30       	cpi	r18, 0x08	; 8
    1f20:	31 05       	cpc	r19, r1
    1f22:	31 f1       	breq	.+76     	; 0x1f70 <CLCD_voidDisplayNumber+0x236>
    1f24:	88 89       	ldd	r24, Y+16	; 0x10
    1f26:	99 89       	ldd	r25, Y+17	; 0x11
    1f28:	89 30       	cpi	r24, 0x09	; 9
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	29 f1       	breq	.+74     	; 0x1f78 <CLCD_voidDisplayNumber+0x23e>
    1f2e:	27 c0       	rjmp	.+78     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    1f30:	80 e3       	ldi	r24, 0x30	; 48
    1f32:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f36:	23 c0       	rjmp	.+70     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    1f38:	81 e3       	ldi	r24, 0x31	; 49
    1f3a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f3e:	1f c0       	rjmp	.+62     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    1f40:	82 e3       	ldi	r24, 0x32	; 50
    1f42:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f46:	1b c0       	rjmp	.+54     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    1f48:	83 e3       	ldi	r24, 0x33	; 51
    1f4a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f4e:	17 c0       	rjmp	.+46     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    1f50:	84 e3       	ldi	r24, 0x34	; 52
    1f52:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f56:	13 c0       	rjmp	.+38     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    1f58:	85 e3       	ldi	r24, 0x35	; 53
    1f5a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    1f60:	86 e3       	ldi	r24, 0x36	; 54
    1f62:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f66:	0b c0       	rjmp	.+22     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    1f68:	87 e3       	ldi	r24, 0x37	; 55
    1f6a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    1f70:	88 e3       	ldi	r24, 0x38	; 56
    1f72:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
    1f76:	03 c0       	rjmp	.+6      	; 0x1f7e <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    1f78:	89 e3       	ldi	r24, 0x39	; 57
    1f7a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1f7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	8e 83       	std	Y+6, r24	; 0x06
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	89 17       	cp	r24, r25
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <CLCD_voidDisplayNumber+0x254>
    1f8c:	7a cf       	rjmp	.-268    	; 0x1e82 <CLCD_voidDisplayNumber+0x148>
    1f8e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f90:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	3e bf       	out	0x3e, r19	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1f9c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f9e:	9d 89       	ldd	r25, Y+21	; 0x15
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	9e bf       	out	0x3e, r25	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	8d bf       	out	0x3d, r24	; 61
    1faa:	65 96       	adiw	r28, 0x15	; 21
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <CLCD_voidClearLCD>:

void CLCD_voidClearLCD(void)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLEAR_CMD);
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <CLCD_voidSendCommand>
}
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <main>:
#include "../../../Hall/CLCD/CLCD_interface.h"
#include "../../../MCAL/USART/USART_intrface.h"
#include <util/delay.h>
//void PWM(void);
void main(void)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    1fda:	0e 94 a0 06 	call	0xd40	; 0xd40 <PORT_voidInit>
	USART_init();
    1fde:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_init>

	//TIMER0_u8Setcallback(&PWM);
	//GIE_voidEnable();
	while(1)
	{
		u8 data=USART_recive_data();
    1fe2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <USART_recive_data>
    1fe6:	89 83       	std	Y+1, r24	; 0x01
		if(data=='1')
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	81 33       	cpi	r24, 0x31	; 49
    1fec:	31 f4       	brne	.+12     	; 0x1ffa <main+0x2a>
		{
			DIO_SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>
    1ff8:	08 c0       	rjmp	.+16     	; 0x200a <main+0x3a>
		}
		else if(data=='2')
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	82 33       	cpi	r24, 0x32	; 50
    1ffe:	29 f4       	brne	.+10     	; 0x200a <main+0x3a>
		{
			DIO_SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_LOW);
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	60 e0       	ldi	r22, 0x00	; 0
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <DIO_SetPinValue>
		}

		USART_send_data('D');
    200a:	84 e4       	ldi	r24, 0x44	; 68
    200c:	0e 94 cc 05 	call	0xb98	; 0xb98 <USART_send_data>
    2010:	e8 cf       	rjmp	.-48     	; 0x1fe2 <main+0x12>

00002012 <__udivmodsi4>:
    2012:	a1 e2       	ldi	r26, 0x21	; 33
    2014:	1a 2e       	mov	r1, r26
    2016:	aa 1b       	sub	r26, r26
    2018:	bb 1b       	sub	r27, r27
    201a:	fd 01       	movw	r30, r26
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <__udivmodsi4_ep>

0000201e <__udivmodsi4_loop>:
    201e:	aa 1f       	adc	r26, r26
    2020:	bb 1f       	adc	r27, r27
    2022:	ee 1f       	adc	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	a2 17       	cp	r26, r18
    2028:	b3 07       	cpc	r27, r19
    202a:	e4 07       	cpc	r30, r20
    202c:	f5 07       	cpc	r31, r21
    202e:	20 f0       	brcs	.+8      	; 0x2038 <__udivmodsi4_ep>
    2030:	a2 1b       	sub	r26, r18
    2032:	b3 0b       	sbc	r27, r19
    2034:	e4 0b       	sbc	r30, r20
    2036:	f5 0b       	sbc	r31, r21

00002038 <__udivmodsi4_ep>:
    2038:	66 1f       	adc	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	88 1f       	adc	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	1a 94       	dec	r1
    2042:	69 f7       	brne	.-38     	; 0x201e <__udivmodsi4_loop>
    2044:	60 95       	com	r22
    2046:	70 95       	com	r23
    2048:	80 95       	com	r24
    204a:	90 95       	com	r25
    204c:	9b 01       	movw	r18, r22
    204e:	ac 01       	movw	r20, r24
    2050:	bd 01       	movw	r22, r26
    2052:	cf 01       	movw	r24, r30
    2054:	08 95       	ret

00002056 <__prologue_saves__>:
    2056:	2f 92       	push	r2
    2058:	3f 92       	push	r3
    205a:	4f 92       	push	r4
    205c:	5f 92       	push	r5
    205e:	6f 92       	push	r6
    2060:	7f 92       	push	r7
    2062:	8f 92       	push	r8
    2064:	9f 92       	push	r9
    2066:	af 92       	push	r10
    2068:	bf 92       	push	r11
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	ca 1b       	sub	r28, r26
    2080:	db 0b       	sbc	r29, r27
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	09 94       	ijmp

0000208e <__epilogue_restores__>:
    208e:	2a 88       	ldd	r2, Y+18	; 0x12
    2090:	39 88       	ldd	r3, Y+17	; 0x11
    2092:	48 88       	ldd	r4, Y+16	; 0x10
    2094:	5f 84       	ldd	r5, Y+15	; 0x0f
    2096:	6e 84       	ldd	r6, Y+14	; 0x0e
    2098:	7d 84       	ldd	r7, Y+13	; 0x0d
    209a:	8c 84       	ldd	r8, Y+12	; 0x0c
    209c:	9b 84       	ldd	r9, Y+11	; 0x0b
    209e:	aa 84       	ldd	r10, Y+10	; 0x0a
    20a0:	b9 84       	ldd	r11, Y+9	; 0x09
    20a2:	c8 84       	ldd	r12, Y+8	; 0x08
    20a4:	df 80       	ldd	r13, Y+7	; 0x07
    20a6:	ee 80       	ldd	r14, Y+6	; 0x06
    20a8:	fd 80       	ldd	r15, Y+5	; 0x05
    20aa:	0c 81       	ldd	r16, Y+4	; 0x04
    20ac:	1b 81       	ldd	r17, Y+3	; 0x03
    20ae:	aa 81       	ldd	r26, Y+2	; 0x02
    20b0:	b9 81       	ldd	r27, Y+1	; 0x01
    20b2:	ce 0f       	add	r28, r30
    20b4:	d1 1d       	adc	r29, r1
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	ed 01       	movw	r28, r26
    20c2:	08 95       	ret

000020c4 <_exit>:
    20c4:	f8 94       	cli

000020c6 <__stop_program>:
    20c6:	ff cf       	rjmp	.-2      	; 0x20c6 <__stop_program>
