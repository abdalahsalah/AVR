
cots.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000028d4  00002968  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080008e  0080008e  00002996  2**0
                  ALLOC
  3 .stab         00003624  00000000  00000000  00002998  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000164b  00000000  00000000  00005fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007607  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007747  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b198  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_1>
       8:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__vector_2>
       c:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 13 	call	0x265a	; 0x265a <main>
      8a:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4d 14 	jmp	0x289a	; 0x289a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 59 14 	jmp	0x28b2	; 0x28b2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 41 14 	jmp	0x2882	; 0x2882 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
	DDRB=PORTB_DIR;
     b54:	e7 e3       	ldi	r30, 0x37	; 55
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     b5c:	e4 e3       	ldi	r30, 0x34	; 52
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	87 e0       	ldi	r24, 0x07	; 7
     b6a:	80 83       	st	Z, r24

	PORTA=PORTA_INIT_VALUE;
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VALUE;
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTD=PORTD_INIT_VALUE;
     b78:	e2 e3       	ldi	r30, 0x32	; 50
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	80 83       	st	Z, r24
	PORTD=PORTC_INIT_VALUE;
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <GIE_voidEnable>:
#include "../../lib/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     b94:	af e5       	ldi	r26, 0x5F	; 95
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ef e5       	ldi	r30, 0x5F	; 95
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     bb0:	af e5       	ldi	r26, 0x5F	; 95
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e5       	ldi	r30, 0x5F	; 95
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <EXTI_voidInt0Init>:
/*Global pointer to function to hold int2 ISR address */

void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE == on_change
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE == falling_edge
	CLR_BIT(MCUCR,MCUCR_ISC00);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
     bda:	a5 e5       	ldi	r26, 0x55	; 85
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e5       	ldi	r30, 0x55	; 85
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE confg option"
#endif

	/*peripheral interrupt enable for int0 */
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
     be8:	ab e5       	ldi	r26, 0x5B	; 91
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	eb e5       	ldi	r30, 0x5B	; 91
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE option"
#endif
}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <EXTI_voidInt1Init>:
void EXTI_voidInt1Init(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE == on_change
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE == falling_edge
	CLR_BIT(MCUCR,MCUCR_ISC10);
     c04:	a5 e5       	ldi	r26, 0x55	; 85
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e5       	ldi	r30, 0x55	; 85
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
     c12:	a5 e5       	ldi	r26, 0x55	; 85
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e5 e5       	ldi	r30, 0x55	; 85
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 60       	ori	r24, 0x08	; 8
     c1e:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE confg option"
#endif

	/*peripheral interrupt enable for int0 */
#if INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 68       	ori	r24, 0x80	; 128
     c2c:	8c 93       	st	X, r24
#elif INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INT1_INITIAL_STATE option"
#endif
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE == falling_edge
	CLR_BIT(MCUCSR,MCUCSR_INT2);
     c3c:	a4 e5       	ldi	r26, 0x54	; 84
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e4 e5       	ldi	r30, 0x54	; 84
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8f 7b       	andi	r24, 0xBF	; 191
     c48:	8c 93       	st	X, r24

	/*peripheral interrupt enable for int0 */
#if INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
#elif INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
     c4a:	ab e5       	ldi	r26, 0x5B	; 91
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e5       	ldi	r30, 0x5B	; 91
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8f 7b       	andi	r24, 0xBF	; 191
     c56:	8c 93       	st	X, r24
#else
#error "Wrong INT1_INITIAL_STATE option"
#endif
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <EXTI_u8INT0Setcallback>:
u8 EXTI_u8INT0Setcallback(void(*Copy_pvInt0func)(void))
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <EXTI_u8INT0Setcallback+0x6>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9b 83       	std	Y+3, r25	; 0x03
     c6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     c6e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0func != NULL)
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	39 f0       	breq	.+14     	; 0xc86 <EXTI_u8INT0Setcallback+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0func;
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	90 93 8f 00 	sts	0x008F, r25
     c80:	80 93 8e 00 	sts	0x008E, r24
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <EXTI_u8INT0Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <EXTI_u8INT1Setcallback>:
u8 EXTI_u8INT1Setcallback(void(*Copy_pvInt1func)(void))
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <EXTI_u8INT1Setcallback+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1func != NULL)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <EXTI_u8INT1Setcallback+0x28>
	{
		EXTI_pvInt1Func=Copy_pvInt1func;
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	90 93 91 00 	sts	0x0091, r25
     cba:	80 93 90 00 	sts	0x0090, r24
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <EXTI_u8INT1Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <__vector_1>:
/*INT0 ISR*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
     cfc:	80 91 8e 00 	lds	r24, 0x008E
     d00:	90 91 8f 00 	lds	r25, 0x008F
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	29 f0       	breq	.+10     	; 0xd12 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
     d08:	e0 91 8e 00 	lds	r30, 0x008E
     d0c:	f0 91 8f 00 	lds	r31, 0x008F
     d10:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <__vector_2>:
/*INT1 ISR*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL)
     d62:	80 91 90 00 	lds	r24, 0x0090
     d66:	90 91 91 00 	lds	r25, 0x0091
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	29 f0       	breq	.+10     	; 0xd78 <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
     d6e:	e0 91 90 00 	lds	r30, 0x0090
     d72:	f0 91 91 00 	lds	r31, 0x0091
     d76:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_3>:
/*INT2 ISR*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL)
     dc8:	80 91 92 00 	lds	r24, 0x0092
     dcc:	90 91 93 00 	lds	r25, 0x0093
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	29 f0       	breq	.+10     	; 0xdde <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
     dd4:	e0 91 92 00 	lds	r30, 0x0092
     dd8:	f0 91 93 00 	lds	r31, 0x0093
     ddc:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <DIO_SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"


u8 DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	28 97       	sbiw	r28, 0x08	; 8
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	6b 83       	std	Y+3, r22	; 0x03
     e1c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
     e1e:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 30       	cpi	r24, 0x08	; 8
     e24:	08 f0       	brcs	.+2      	; 0xe28 <DIO_SetPinDirection+0x24>
     e26:	f4 c0       	rjmp	.+488    	; 0x1010 <DIO_SetPinDirection+0x20c>
	{
        if(u8PinDirCopy==DIO_u8PIN_INPUT)
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	88 23       	and	r24, r24
     e2c:	09 f0       	breq	.+2      	; 0xe30 <DIO_SetPinDirection+0x2c>
     e2e:	77 c0       	rjmp	.+238    	; 0xf1e <DIO_SetPinDirection+0x11a>
        {
            switch(u8PortIdCopy)
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	38 87       	std	Y+8, r19	; 0x08
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	59 f1       	breq	.+86     	; 0xe9a <DIO_SetPinDirection+0x96>
     e44:	2f 81       	ldd	r18, Y+7	; 0x07
     e46:	38 85       	ldd	r19, Y+8	; 0x08
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	2c f4       	brge	.+10     	; 0xe58 <DIO_SetPinDirection+0x54>
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f0       	breq	.+26     	; 0xe70 <DIO_SetPinDirection+0x6c>
     e56:	60 c0       	rjmp	.+192    	; 0xf18 <DIO_SetPinDirection+0x114>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	89 f1       	breq	.+98     	; 0xec4 <DIO_SetPinDirection+0xc0>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <DIO_SetPinDirection+0x6a>
     e6c:	40 c0       	rjmp	.+128    	; 0xeee <DIO_SetPinDirection+0xea>
     e6e:	54 c0       	rjmp	.+168    	; 0xf18 <DIO_SetPinDirection+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(DDRA,u8PinIdCopy); break;
     e70:	aa e3       	ldi	r26, 0x3A	; 58
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_SetPinDirection+0x8a>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_SetPinDirection+0x86>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	bd c0       	rjmp	.+378    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,u8PinIdCopy); break;
     e9a:	a7 e3       	ldi	r26, 0x37	; 55
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e3       	ldi	r30, 0x37	; 55
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_SetPinDirection+0xb4>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_SetPinDirection+0xb0>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	a8 c0       	rjmp	.+336    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,u8PinIdCopy); break;
     ec4:	a4 e3       	ldi	r26, 0x34	; 52
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e4 e3       	ldi	r30, 0x34	; 52
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_SetPinDirection+0xde>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_SetPinDirection+0xda>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	93 c0       	rjmp	.+294    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,u8PinIdCopy); break;
     eee:	a1 e3       	ldi	r26, 0x31	; 49
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e1 e3       	ldi	r30, 0x31	; 49
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_SetPinDirection+0x108>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_SetPinDirection+0x104>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	7e c0       	rjmp	.+252    	; 0x1014 <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	7b c0       	rjmp	.+246    	; 0x1014 <DIO_SetPinDirection+0x210>
            }
        }
        else if(u8PinDirCopy==DIO_u8PIN_OUTPUT)
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_SetPinDirection+0x122>
     f24:	72 c0       	rjmp	.+228    	; 0x100a <DIO_SetPinDirection+0x206>
        {
            switch(u8PortIdCopy)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3e 83       	std	Y+6, r19	; 0x06
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	49 f1       	breq	.+82     	; 0xf8c <DIO_SetPinDirection+0x188>
     f3a:	2d 81       	ldd	r18, Y+5	; 0x05
     f3c:	3e 81       	ldd	r19, Y+6	; 0x06
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <DIO_SetPinDirection+0x14a>
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	61 f0       	breq	.+24     	; 0xf64 <DIO_SetPinDirection+0x160>
     f4c:	5b c0       	rjmp	.+182    	; 0x1004 <DIO_SetPinDirection+0x200>
     f4e:	2d 81       	ldd	r18, Y+5	; 0x05
     f50:	3e 81       	ldd	r19, Y+6	; 0x06
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	71 f1       	breq	.+92     	; 0xfb4 <DIO_SetPinDirection+0x1b0>
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	e9 f1       	breq	.+122    	; 0xfdc <DIO_SetPinDirection+0x1d8>
     f62:	50 c0       	rjmp	.+160    	; 0x1004 <DIO_SetPinDirection+0x200>
            {
			case DIO_u8PORTA : SET_BIT(DDRA,u8PinIdCopy); break;
     f64:	aa e3       	ldi	r26, 0x3A	; 58
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ea e3       	ldi	r30, 0x3A	; 58
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_SetPinDirection+0x17e>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_SetPinDirection+0x17a>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	44 c0       	rjmp	.+136    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,u8PinIdCopy); break;
     f8c:	a7 e3       	ldi	r26, 0x37	; 55
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_SetPinDirection+0x1a6>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_SetPinDirection+0x1a2>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	30 c0       	rjmp	.+96     	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,u8PinIdCopy); break;
     fb4:	a4 e3       	ldi	r26, 0x34	; 52
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e4 e3       	ldi	r30, 0x34	; 52
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_SetPinDirection+0x1ce>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_SetPinDirection+0x1ca>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	1c c0       	rjmp	.+56     	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,u8PinIdCopy); break;
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_SetPinDirection+0x1f6>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_SetPinDirection+0x1f2>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1; break;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <DIO_SetPinDirection+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_SetPinDirection+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
}
    1016:	28 96       	adiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_SetPortDirection>:

u8 DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_SetPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_SetPortDirection+0x8>
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    103a:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3d 83       	std	Y+5, r19	; 0x05
    1044:	2c 83       	std	Y+4, r18	; 0x04
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	d1 f0       	breq	.+52     	; 0x1084 <DIO_SetPortDirection+0x5c>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <DIO_SetPortDirection+0x3c>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	61 f0       	breq	.+24     	; 0x107a <DIO_SetPortDirection+0x52>
    1062:	1f c0       	rjmp	.+62     	; 0x10a2 <DIO_SetPortDirection+0x7a>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	81 f0       	breq	.+32     	; 0x108e <DIO_SetPortDirection+0x66>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <DIO_SetPortDirection+0x70>
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <DIO_SetPortDirection+0x7a>
    {
			case DIO_u8PORTA : DDRA = u8PortDir ; break;
    107a:	ea e3       	ldi	r30, 0x3A	; 58
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	80 83       	st	Z, r24
    1082:	11 c0       	rjmp	.+34     	; 0x10a6 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTB : DDRB = u8PortDir ; break;
    1084:	e7 e3       	ldi	r30, 0x37	; 55
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	80 83       	st	Z, r24
    108c:	0c c0       	rjmp	.+24     	; 0x10a6 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTC : DDRC = u8PortDir ; break;
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	80 83       	st	Z, r24
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTD : DDRD = u8PortDir ; break;
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	80 83       	st	Z, r24
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_SetPortDirection+0x7e>
            default: Local_u8ErrorState=1; break;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	28 97       	sbiw	r28, 0x08	; 8
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6b 83       	std	Y+3, r22	; 0x03
    10d0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_SetPinValue+0x24>
    10da:	f4 c0       	rjmp	.+488    	; 0x12c4 <DIO_SetPinValue+0x20c>
	{
        if(u8PinValCopy==DIO_u8PIN_LOW)
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	88 23       	and	r24, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <DIO_SetPinValue+0x2c>
    10e2:	77 c0       	rjmp	.+238    	; 0x11d2 <DIO_SetPinValue+0x11a>
        {
            switch(u8PortIdCopy)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	38 87       	std	Y+8, r19	; 0x08
    10ec:	2f 83       	std	Y+7, r18	; 0x07
    10ee:	8f 81       	ldd	r24, Y+7	; 0x07
    10f0:	98 85       	ldd	r25, Y+8	; 0x08
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	59 f1       	breq	.+86     	; 0x114e <DIO_SetPinValue+0x96>
    10f8:	2f 81       	ldd	r18, Y+7	; 0x07
    10fa:	38 85       	ldd	r19, Y+8	; 0x08
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_SetPinValue+0x54>
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	98 85       	ldd	r25, Y+8	; 0x08
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f0       	breq	.+26     	; 0x1124 <DIO_SetPinValue+0x6c>
    110a:	60 c0       	rjmp	.+192    	; 0x11cc <DIO_SetPinValue+0x114>
    110c:	2f 81       	ldd	r18, Y+7	; 0x07
    110e:	38 85       	ldd	r19, Y+8	; 0x08
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	89 f1       	breq	.+98     	; 0x1178 <DIO_SetPinValue+0xc0>
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_SetPinValue+0x6a>
    1120:	40 c0       	rjmp	.+128    	; 0x11a2 <DIO_SetPinValue+0xea>
    1122:	54 c0       	rjmp	.+168    	; 0x11cc <DIO_SetPinValue+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(PORTA,u8PinIdCopy); break;
    1124:	ab e3       	ldi	r26, 0x3B	; 59
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e3       	ldi	r30, 0x3B	; 59
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_SetPinValue+0x8a>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_SetPinValue+0x86>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	bd c0       	rjmp	.+378    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,u8PinIdCopy); break;
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_SetPinValue+0xb4>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_SetPinValue+0xb0>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	a8 c0       	rjmp	.+336    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,u8PinIdCopy); break;
    1178:	a5 e3       	ldi	r26, 0x35	; 53
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_SetPinValue+0xde>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_SetPinValue+0xda>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	93 c0       	rjmp	.+294    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,u8PinIdCopy); break;
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_SetPinValue+0x108>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_SetPinValue+0x104>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	7e c0       	rjmp	.+252    	; 0x12c8 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	7b c0       	rjmp	.+246    	; 0x12c8 <DIO_SetPinValue+0x210>
            }
        }
        else if(u8PinValCopy==DIO_u8PIN_HIGH)
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	09 f0       	breq	.+2      	; 0x11da <DIO_SetPinValue+0x122>
    11d8:	72 c0       	rjmp	.+228    	; 0x12be <DIO_SetPinValue+0x206>
        {
            switch(u8PortIdCopy)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	2d 83       	std	Y+5, r18	; 0x05
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	49 f1       	breq	.+82     	; 0x1240 <DIO_SetPinValue+0x188>
    11ee:	2d 81       	ldd	r18, Y+5	; 0x05
    11f0:	3e 81       	ldd	r19, Y+6	; 0x06
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_SetPinValue+0x14a>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_SetPinValue+0x160>
    1200:	5b c0       	rjmp	.+182    	; 0x12b8 <DIO_SetPinValue+0x200>
    1202:	2d 81       	ldd	r18, Y+5	; 0x05
    1204:	3e 81       	ldd	r19, Y+6	; 0x06
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	71 f1       	breq	.+92     	; 0x1268 <DIO_SetPinValue+0x1b0>
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	e9 f1       	breq	.+122    	; 0x1290 <DIO_SetPinValue+0x1d8>
    1216:	50 c0       	rjmp	.+160    	; 0x12b8 <DIO_SetPinValue+0x200>
            {
			case DIO_u8PORTA : SET_BIT(PORTA,u8PinIdCopy); break;
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_SetPinValue+0x17e>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_SetPinValue+0x17a>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	44 c0       	rjmp	.+136    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,u8PinIdCopy); break;
    1240:	a8 e3       	ldi	r26, 0x38	; 56
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e8 e3       	ldi	r30, 0x38	; 56
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_SetPinValue+0x1a6>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_SetPinValue+0x1a2>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	30 c0       	rjmp	.+96     	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,u8PinIdCopy); break;
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_SetPinValue+0x1ce>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_SetPinValue+0x1ca>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	1c c0       	rjmp	.+56     	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,u8PinIdCopy); break;
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_SetPinValue+0x1f6>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_SetPinValue+0x1f2>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1; break;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <DIO_SetPinValue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_SetPinValue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	28 96       	adiw	r28, 0x08	; 8
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <DIO_SetPortValue>:

u8 DIO_SetPortValue     (u8 u8PortId, u8 u8PortVal)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <DIO_SetPortValue+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_SetPortValue+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3d 83       	std	Y+5, r19	; 0x05
    12f8:	2c 83       	std	Y+4, r18	; 0x04
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <DIO_SetPortValue+0x5c>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <DIO_SetPortValue+0x3c>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <DIO_SetPortValue+0x52>
    1316:	1f c0       	rjmp	.+62     	; 0x1356 <DIO_SetPortValue+0x7a>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <DIO_SetPortValue+0x66>
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <DIO_SetPortValue+0x70>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <DIO_SetPortValue+0x7a>
    {
			case DIO_u8PORTA : PORTA = u8PortVal ; break;
    132e:	eb e3       	ldi	r30, 0x3B	; 59
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	80 83       	st	Z, r24
    1336:	11 c0       	rjmp	.+34     	; 0x135a <DIO_SetPortValue+0x7e>
			case DIO_u8PORTB : PORTB = u8PortVal ; break;
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	80 83       	st	Z, r24
    1340:	0c c0       	rjmp	.+24     	; 0x135a <DIO_SetPortValue+0x7e>
			case DIO_u8PORTC : PORTC = u8PortVal ; break;
    1342:	e5 e3       	ldi	r30, 0x35	; 53
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	80 83       	st	Z, r24
    134a:	07 c0       	rjmp	.+14     	; 0x135a <DIO_SetPortValue+0x7e>
			case DIO_u8PORTD : PORTD = u8PortVal ; break;
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	80 83       	st	Z, r24
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_SetPortValue+0x7e>
            default: Local_u8ErrorState=1; break;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy , u8* Pu8_ValCopy)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	27 97       	sbiw	r28, 0x07	; 7
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	6b 83       	std	Y+3, r22	; 0x03
    1384:	5d 83       	std	Y+5, r21	; 0x05
    1386:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    1388:	19 82       	std	Y+1, r1	; 0x01
    if((Pu8_ValCopy!=NULL && u8PinIdCopy <= DIO_u8PIN7))
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	09 f4       	brne	.+2      	; 0x1394 <DIO_GetPinValue+0x28>
    1392:	78 c0       	rjmp	.+240    	; 0x1484 <DIO_GetPinValue+0x118>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	08 f0       	brcs	.+2      	; 0x139c <DIO_GetPinValue+0x30>
    139a:	74 c0       	rjmp	.+232    	; 0x1484 <DIO_GetPinValue+0x118>
    {
    switch(u8PortIdCopy)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3f 83       	std	Y+7, r19	; 0x07
    13a4:	2e 83       	std	Y+6, r18	; 0x06
    13a6:	4e 81       	ldd	r20, Y+6	; 0x06
    13a8:	5f 81       	ldd	r21, Y+7	; 0x07
    13aa:	41 30       	cpi	r20, 0x01	; 1
    13ac:	51 05       	cpc	r21, r1
    13ae:	59 f1       	breq	.+86     	; 0x1406 <DIO_GetPinValue+0x9a>
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	9f 81       	ldd	r25, Y+7	; 0x07
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	91 05       	cpc	r25, r1
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <DIO_GetPinValue+0x5a>
    13ba:	2e 81       	ldd	r18, Y+6	; 0x06
    13bc:	3f 81       	ldd	r19, Y+7	; 0x07
    13be:	21 15       	cp	r18, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	69 f0       	breq	.+26     	; 0x13de <DIO_GetPinValue+0x72>
    13c4:	5c c0       	rjmp	.+184    	; 0x147e <DIO_GetPinValue+0x112>
    13c6:	4e 81       	ldd	r20, Y+6	; 0x06
    13c8:	5f 81       	ldd	r21, Y+7	; 0x07
    13ca:	42 30       	cpi	r20, 0x02	; 2
    13cc:	51 05       	cpc	r21, r1
    13ce:	79 f1       	breq	.+94     	; 0x142e <DIO_GetPinValue+0xc2>
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_GetPinValue+0x70>
    13da:	3d c0       	rjmp	.+122    	; 0x1456 <DIO_GetPinValue+0xea>
    13dc:	50 c0       	rjmp	.+160    	; 0x147e <DIO_GetPinValue+0x112>
        {
			case DIO_u8PORTA : *Pu8_ValCopy = GET_BIT(PINA , u8PinIdCopy) ; break;
    13de:	e9 e3       	ldi	r30, 0x39	; 57
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a9 01       	movw	r20, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_GetPinValue+0x8a>
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_GetPinValue+0x86>
    13fa:	ca 01       	movw	r24, r20
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1400:	fd 81       	ldd	r31, Y+5	; 0x05
    1402:	80 83       	st	Z, r24
    1404:	41 c0       	rjmp	.+130    	; 0x1488 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTB : *Pu8_ValCopy = GET_BIT(PINB , u8PinIdCopy) ; break;
    1406:	e6 e3       	ldi	r30, 0x36	; 54
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_GetPinValue+0xb2>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_GetPinValue+0xae>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	ec 81       	ldd	r30, Y+4	; 0x04
    1428:	fd 81       	ldd	r31, Y+5	; 0x05
    142a:	80 83       	st	Z, r24
    142c:	2d c0       	rjmp	.+90     	; 0x1488 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTC : *Pu8_ValCopy = GET_BIT(PINC , u8PinIdCopy) ; break;
    142e:	e3 e3       	ldi	r30, 0x33	; 51
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_GetPinValue+0xda>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_GetPinValue+0xd6>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	ec 81       	ldd	r30, Y+4	; 0x04
    1450:	fd 81       	ldd	r31, Y+5	; 0x05
    1452:	80 83       	st	Z, r24
    1454:	19 c0       	rjmp	.+50     	; 0x1488 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTD : *Pu8_ValCopy = GET_BIT(PIND , u8PinIdCopy) ; break;
    1456:	e0 e3       	ldi	r30, 0x30	; 48
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 01       	movw	r20, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_GetPinValue+0x102>
    146a:	55 95       	asr	r21
    146c:	47 95       	ror	r20
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_GetPinValue+0xfe>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	80 83       	st	Z, r24
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <DIO_GetPinValue+0x11c>
            default: Local_u8ErrorState=1; break;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_GetPinValue+0x11c>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1488:	89 81       	ldd	r24, Y+1	; 0x01

}
    148a:	27 96       	adiw	r28, 0x07	; 7
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_register.h"

void ADC_voidInit(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62

#if VOITAGE_REF==AVCC
	/*AVCC as reference voltage*/
	SET_BIT(ADMUX,ADMUX_REFS0);
    14a4:	a7 e2       	ldi	r26, 0x27	; 39
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e7 e2       	ldi	r30, 0x27	; 39
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	80 64       	ori	r24, 0x40	; 64
    14b0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    14b2:	a7 e2       	ldi	r26, 0x27	; 39
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e7 e2       	ldi	r30, 0x27	; 39
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8f 77       	andi	r24, 0x7F	; 127
    14be:	8c 93       	st	X, r24
#error "Wrong VOITAGE_REF confg option"
#endif

#if leftright_adj==left_adj
	/*active ADC left adjust*/
	SET_BIT(ADMUX,ADMUX_ADLAR);
    14c0:	a7 e2       	ldi	r26, 0x27	; 39
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e7 e2       	ldi	r30, 0x27	; 39
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	80 62       	ori	r24, 0x20	; 32
    14cc:	8c 93       	st	X, r24
#error "Wrong leftright_adj confg option"
#endif


	/*set Prescaler*/
	ADCSRA&=0b11111000;
    14ce:	a6 e2       	ldi	r26, 0x26	; 38
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e6 e2       	ldi	r30, 0x26	; 38
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	88 7f       	andi	r24, 0xF8	; 248
    14da:	8c 93       	st	X, r24
	ADCSRA|=PRESCALE_DIV;
    14dc:	a6 e2       	ldi	r26, 0x26	; 38
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e6 e2       	ldi	r30, 0x26	; 38
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	87 60       	ori	r24, 0x07	; 7
    14e8:	8c 93       	st	X, r24
	/*ADC Enable*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    14ea:	a6 e2       	ldi	r26, 0x26	; 38
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e6 e2       	ldi	r30, 0x26	; 38
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 68       	ori	r24, 0x80	; 128
    14f6:	8c 93       	st	X, r24


}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <ADC_GetChannelReading>:

u8 ADC_GetChannelReading(u8 Copy_u8Channel)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	0f 92       	push	r0
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
	/*clear the MUX bits in ADMUX register*/
	ADMUX &=0b11100000;
    150a:	a7 e2       	ldi	r26, 0x27	; 39
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e7 e2       	ldi	r30, 0x27	; 39
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	80 7e       	andi	r24, 0xE0	; 224
    1516:	8c 93       	st	X, r24
	/*set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
    1518:	a7 e2       	ldi	r26, 0x27	; 39
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e7 e2       	ldi	r30, 0x27	; 39
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	90 81       	ld	r25, Z
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	89 2b       	or	r24, r25
    1526:	8c 93       	st	X, r24
	/*start conversion*/
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1528:	a6 e2       	ldi	r26, 0x26	; 38
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e6 e2       	ldi	r30, 0x26	; 38
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 64       	ori	r24, 0x40	; 64
    1534:	8c 93       	st	X, r24
	/*Polling until the conversion complete flag is set*/
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0); //flag is set
    1536:	e6 e2       	ldi	r30, 0x26	; 38
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	82 95       	swap	r24
    153e:	8f 70       	andi	r24, 0x0F	; 15
    1540:	88 2f       	mov	r24, r24
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	90 70       	andi	r25, 0x00	; 0
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	a9 f3       	breq	.-22     	; 0x1536 <ADC_GetChannelReading+0x38>
	/*Clear the conversion flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF); //flag is Clear
    154c:	a6 e2       	ldi	r26, 0x26	; 38
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e6 e2       	ldi	r30, 0x26	; 38
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 61       	ori	r24, 0x10	; 16
    1558:	8c 93       	st	X, r24

#if  res==_8_bit
	return ADCH;
    155a:	e5 e2       	ldi	r30, 0x25	; 37
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
#else
#error "Wrong leftright_adj confg option"
#endif
	/*Return the reading*/

}
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <SWITCH_u8Switchgetpressed>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "SWITCH_interface.h"
#include <util/delay.h>

// Function to get the pressed state of a SWITCH
u8 SWITCH_u8Switchgetpressed(const SWITCH_T *SWITCH, u8 *copySwitchState) {
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	69 97       	sbiw	r28, 0x19	; 25
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	9a 8b       	std	Y+18, r25	; 0x12
    157e:	89 8b       	std	Y+17, r24	; 0x11
    1580:	7c 8b       	std	Y+20, r23	; 0x14
    1582:	6b 8b       	std	Y+19, r22	; 0x13
	u8 local_u8error = 0, local_pinValue;
    1584:	1f 86       	std	Y+15, r1	; 0x0f

	if ((copySwitchState != NULL) && (SWITCH != NULL) && (SWITCH->SWITCH_u8pin <= DIO_u8PIN7) && (SWITCH->SWITCH_u8port <= DIO_u8PORTD) && (SWITCH->SWITCH_u8BounceType < 2) && (SWITCH->SWITCH_u8ConnectionType < 3)) {
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
    1588:	9c 89       	ldd	r25, Y+20	; 0x14
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	09 f4       	brne	.+2      	; 0x1590 <SWITCH_u8Switchgetpressed+0x28>
    158e:	03 c1       	rjmp	.+518    	; 0x1796 <SWITCH_u8Switchgetpressed+0x22e>
    1590:	89 89       	ldd	r24, Y+17	; 0x11
    1592:	9a 89       	ldd	r25, Y+18	; 0x12
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	09 f4       	brne	.+2      	; 0x159a <SWITCH_u8Switchgetpressed+0x32>
    1598:	fe c0       	rjmp	.+508    	; 0x1796 <SWITCH_u8Switchgetpressed+0x22e>
    159a:	e9 89       	ldd	r30, Y+17	; 0x11
    159c:	fa 89       	ldd	r31, Y+18	; 0x12
    159e:	81 81       	ldd	r24, Z+1	; 0x01
    15a0:	88 30       	cpi	r24, 0x08	; 8
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <SWITCH_u8Switchgetpressed+0x3e>
    15a4:	f8 c0       	rjmp	.+496    	; 0x1796 <SWITCH_u8Switchgetpressed+0x22e>
    15a6:	e9 89       	ldd	r30, Y+17	; 0x11
    15a8:	fa 89       	ldd	r31, Y+18	; 0x12
    15aa:	80 81       	ld	r24, Z
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <SWITCH_u8Switchgetpressed+0x4a>
    15b0:	f2 c0       	rjmp	.+484    	; 0x1796 <SWITCH_u8Switchgetpressed+0x22e>
    15b2:	e9 89       	ldd	r30, Y+17	; 0x11
    15b4:	fa 89       	ldd	r31, Y+18	; 0x12
    15b6:	83 81       	ldd	r24, Z+3	; 0x03
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	08 f0       	brcs	.+2      	; 0x15be <SWITCH_u8Switchgetpressed+0x56>
    15bc:	ec c0       	rjmp	.+472    	; 0x1796 <SWITCH_u8Switchgetpressed+0x22e>
    15be:	e9 89       	ldd	r30, Y+17	; 0x11
    15c0:	fa 89       	ldd	r31, Y+18	; 0x12
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	83 30       	cpi	r24, 0x03	; 3
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <SWITCH_u8Switchgetpressed+0x62>
    15c8:	e6 c0       	rjmp	.+460    	; 0x1796 <SWITCH_u8Switchgetpressed+0x22e>
		// Configure pin as input

		// Apply bounce or debounce based on connection type
		if (SWITCH->SWITCH_u8BounceType == SWITCH_u8Bounce) {
    15ca:	e9 89       	ldd	r30, Y+17	; 0x11
    15cc:	fa 89       	ldd	r31, Y+18	; 0x12
    15ce:	83 81       	ldd	r24, Z+3	; 0x03
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <SWITCH_u8Switchgetpressed+0x6e>
    15d4:	8d c0       	rjmp	.+282    	; 0x16f0 <SWITCH_u8Switchgetpressed+0x188>
			// Apply bounce handling by reading the pin value after a delay
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    15d6:	e9 89       	ldd	r30, Y+17	; 0x11
    15d8:	fa 89       	ldd	r31, Y+18	; 0x12
    15da:	80 81       	ld	r24, Z
    15dc:	e9 89       	ldd	r30, Y+17	; 0x11
    15de:	fa 89       	ldd	r31, Y+18	; 0x12
    15e0:	91 81       	ldd	r25, Z+1	; 0x01
    15e2:	9e 01       	movw	r18, r28
    15e4:	20 5f       	subi	r18, 0xF0	; 240
    15e6:	3f 4f       	sbci	r19, 0xFF	; 255
    15e8:	69 2f       	mov	r22, r25
    15ea:	a9 01       	movw	r20, r18
    15ec:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	aa ef       	ldi	r26, 0xFA	; 250
    15f6:	b3 e4       	ldi	r27, 0x43	; 67
    15f8:	8b 87       	std	Y+11, r24	; 0x0b
    15fa:	9c 87       	std	Y+12, r25	; 0x0c
    15fc:	ad 87       	std	Y+13, r26	; 0x0d
    15fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	6b 85       	ldd	r22, Y+11	; 0x0b
    1602:	7c 85       	ldd	r23, Y+12	; 0x0c
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8f 83       	std	Y+7, r24	; 0x07
    161a:	98 87       	std	Y+8, r25	; 0x08
    161c:	a9 87       	std	Y+9, r26	; 0x09
    161e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1620:	6f 81       	ldd	r22, Y+7	; 0x07
    1622:	78 85       	ldd	r23, Y+8	; 0x08
    1624:	89 85       	ldd	r24, Y+9	; 0x09
    1626:	9a 85       	ldd	r25, Y+10	; 0x0a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <SWITCH_u8Switchgetpressed+0xda>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9e 83       	std	Y+6, r25	; 0x06
    163e:	8d 83       	std	Y+5, r24	; 0x05
    1640:	3f c0       	rjmp	.+126    	; 0x16c0 <SWITCH_u8Switchgetpressed+0x158>
	else if (__tmp > 65535)
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	4c f5       	brge	.+82     	; 0x16ac <SWITCH_u8Switchgetpressed+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	6b 85       	ldd	r22, Y+11	; 0x0b
    165c:	7c 85       	ldd	r23, Y+12	; 0x0c
    165e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1660:	9e 85       	ldd	r25, Y+14	; 0x0e
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <SWITCH_u8Switchgetpressed+0x13a>
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9c 83       	std	Y+4, r25	; 0x04
    168a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <SWITCH_u8Switchgetpressed+0x128>
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9e 83       	std	Y+6, r25	; 0x06
    16a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f7       	brne	.-38     	; 0x1684 <SWITCH_u8Switchgetpressed+0x11c>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <SWITCH_u8Switchgetpressed+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
    16c0:	8d 81       	ldd	r24, Y+5	; 0x05
    16c2:	9e 81       	ldd	r25, Y+6	; 0x06
    16c4:	9a 83       	std	Y+2, r25	; 0x02
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <SWITCH_u8Switchgetpressed+0x164>
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    16d4:	e9 89       	ldd	r30, Y+17	; 0x11
    16d6:	fa 89       	ldd	r31, Y+18	; 0x12
    16d8:	80 81       	ld	r24, Z
    16da:	e9 89       	ldd	r30, Y+17	; 0x11
    16dc:	fa 89       	ldd	r31, Y+18	; 0x12
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	9e 01       	movw	r18, r28
    16e2:	20 5f       	subi	r18, 0xF0	; 240
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	69 2f       	mov	r22, r25
    16e8:	a9 01       	movw	r20, r18
    16ea:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
    16ee:	12 c0       	rjmp	.+36     	; 0x1714 <SWITCH_u8Switchgetpressed+0x1ac>
		} else if (SWITCH->SWITCH_u8BounceType == SWITCH_u8Debounce) {
    16f0:	e9 89       	ldd	r30, Y+17	; 0x11
    16f2:	fa 89       	ldd	r31, Y+18	; 0x12
    16f4:	83 81       	ldd	r24, Z+3	; 0x03
    16f6:	88 23       	and	r24, r24
    16f8:	69 f4       	brne	.+26     	; 0x1714 <SWITCH_u8Switchgetpressed+0x1ac>
			// Apply debounce by reading the pin value twice
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    16fa:	e9 89       	ldd	r30, Y+17	; 0x11
    16fc:	fa 89       	ldd	r31, Y+18	; 0x12
    16fe:	80 81       	ld	r24, Z
    1700:	e9 89       	ldd	r30, Y+17	; 0x11
    1702:	fa 89       	ldd	r31, Y+18	; 0x12
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	9e 01       	movw	r18, r28
    1708:	20 5f       	subi	r18, 0xF0	; 240
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	69 2f       	mov	r22, r25
    170e:	a9 01       	movw	r20, r18
    1710:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
		}

		// Determine the switch state based on connection type and pin value
		switch (SWITCH->SWITCH_u8ConnectionType) {
    1714:	e9 89       	ldd	r30, Y+17	; 0x11
    1716:	fa 89       	ldd	r31, Y+18	; 0x12
    1718:	82 81       	ldd	r24, Z+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	38 8f       	std	Y+24, r19	; 0x18
    1720:	2f 8b       	std	Y+23, r18	; 0x17
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	91 05       	cpc	r25, r1
    172a:	a1 f0       	breq	.+40     	; 0x1754 <SWITCH_u8Switchgetpressed+0x1ec>
    172c:	2f 89       	ldd	r18, Y+23	; 0x17
    172e:	38 8d       	ldd	r19, Y+24	; 0x18
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	d9 f0       	breq	.+54     	; 0x176c <SWITCH_u8Switchgetpressed+0x204>
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	71 f5       	brne	.+92     	; 0x179a <SWITCH_u8Switchgetpressed+0x232>
			case SWITCH_u8PullUp:
				*copySwitchState = (local_pinValue) ? SWITCH_u8NotPressed : SWITCH_u8Pressed;
    173e:	88 89       	ldd	r24, Y+16	; 0x10
    1740:	1e 8a       	std	Y+22, r1	; 0x16
    1742:	88 23       	and	r24, r24
    1744:	11 f4       	brne	.+4      	; 0x174a <SWITCH_u8Switchgetpressed+0x1e2>
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	9e 8b       	std	Y+22, r25	; 0x16
    174a:	eb 89       	ldd	r30, Y+19	; 0x13
    174c:	fc 89       	ldd	r31, Y+20	; 0x14
    174e:	2e 89       	ldd	r18, Y+22	; 0x16
    1750:	20 83       	st	Z, r18
    1752:	23 c0       	rjmp	.+70     	; 0x179a <SWITCH_u8Switchgetpressed+0x232>
				break;
			case SWITCH_u8PullDown:
				*copySwitchState = (local_pinValue) ? SWITCH_u8Pressed : SWITCH_u8NotPressed;
    1754:	88 89       	ldd	r24, Y+16	; 0x10
    1756:	89 8f       	std	Y+25, r24	; 0x19
    1758:	39 8d       	ldd	r19, Y+25	; 0x19
    175a:	33 23       	and	r19, r19
    175c:	11 f0       	breq	.+4      	; 0x1762 <SWITCH_u8Switchgetpressed+0x1fa>
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 8f       	std	Y+25, r24	; 0x19
    1762:	89 8d       	ldd	r24, Y+25	; 0x19
    1764:	eb 89       	ldd	r30, Y+19	; 0x13
    1766:	fc 89       	ldd	r31, Y+20	; 0x14
    1768:	80 83       	st	Z, r24
    176a:	17 c0       	rjmp	.+46     	; 0x179a <SWITCH_u8Switchgetpressed+0x232>
				break;
			case SWITCH_u8InternalPullUp:
				DIO_SetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, DIO_u8PIN_OUTPUT);
    176c:	e9 89       	ldd	r30, Y+17	; 0x11
    176e:	fa 89       	ldd	r31, Y+18	; 0x12
    1770:	80 81       	ld	r24, Z
    1772:	e9 89       	ldd	r30, Y+17	; 0x11
    1774:	fa 89       	ldd	r31, Y+18	; 0x12
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	69 2f       	mov	r22, r25
    177a:	41 e0       	ldi	r20, 0x01	; 1
    177c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
				*copySwitchState = (local_pinValue) ? SWITCH_u8NotPressed : SWITCH_u8Pressed;
    1780:	88 89       	ldd	r24, Y+16	; 0x10
    1782:	1d 8a       	std	Y+21, r1	; 0x15
    1784:	88 23       	and	r24, r24
    1786:	11 f4       	brne	.+4      	; 0x178c <SWITCH_u8Switchgetpressed+0x224>
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	9d 8b       	std	Y+21, r25	; 0x15
    178c:	eb 89       	ldd	r30, Y+19	; 0x13
    178e:	fc 89       	ldd	r31, Y+20	; 0x14
    1790:	2d 89       	ldd	r18, Y+21	; 0x15
    1792:	20 83       	st	Z, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <SWITCH_u8Switchgetpressed+0x232>
				break;
		}
	} else {
		local_u8error = 1;  // Invalid pin, set error flag
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return local_u8error;
    179a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    179c:	69 96       	adiw	r28, 0x19	; 25
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <SWITCH_u8Switchinitialize>:

// Function to initialize a SWITCH
u8 SWITCH_u8Switchinitialize(const SWITCH_T *SWITCH) {
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	00 d0       	rcall	.+0      	; 0x17b4 <SWITCH_u8Switchinitialize+0x6>
    17b4:	0f 92       	push	r0
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	9b 83       	std	Y+3, r25	; 0x03
    17bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;
    17be:	19 82       	std	Y+1, r1	; 0x01

	if ((SWITCH != NULL) && (SWITCH->SWITCH_u8pin <= DIO_u8PIN7) && (SWITCH->SWITCH_u8port <= DIO_u8PORTD) && (SWITCH->SWITCH_u8BounceType < 2) && (SWITCH->SWITCH_u8ConnectionType < 2)) {
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	f9 f0       	breq	.+62     	; 0x1806 <SWITCH_u8Switchinitialize+0x58>
    17c8:	ea 81       	ldd	r30, Y+2	; 0x02
    17ca:	fb 81       	ldd	r31, Y+3	; 0x03
    17cc:	81 81       	ldd	r24, Z+1	; 0x01
    17ce:	88 30       	cpi	r24, 0x08	; 8
    17d0:	d0 f4       	brcc	.+52     	; 0x1806 <SWITCH_u8Switchinitialize+0x58>
    17d2:	ea 81       	ldd	r30, Y+2	; 0x02
    17d4:	fb 81       	ldd	r31, Y+3	; 0x03
    17d6:	80 81       	ld	r24, Z
    17d8:	84 30       	cpi	r24, 0x04	; 4
    17da:	a8 f4       	brcc	.+42     	; 0x1806 <SWITCH_u8Switchinitialize+0x58>
    17dc:	ea 81       	ldd	r30, Y+2	; 0x02
    17de:	fb 81       	ldd	r31, Y+3	; 0x03
    17e0:	83 81       	ldd	r24, Z+3	; 0x03
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	80 f4       	brcc	.+32     	; 0x1806 <SWITCH_u8Switchinitialize+0x58>
    17e6:	ea 81       	ldd	r30, Y+2	; 0x02
    17e8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	58 f4       	brcc	.+22     	; 0x1806 <SWITCH_u8Switchinitialize+0x58>
		DIO_SetPinDirection(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, DIO_u8PIN_INPUT);
    17f0:	ea 81       	ldd	r30, Y+2	; 0x02
    17f2:	fb 81       	ldd	r31, Y+3	; 0x03
    17f4:	80 81       	ld	r24, Z
    17f6:	ea 81       	ldd	r30, Y+2	; 0x02
    17f8:	fb 81       	ldd	r31, Y+3	; 0x03
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	69 2f       	mov	r22, r25
    17fe:	40 e0       	ldi	r20, 0x00	; 0
    1800:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
    1804:	02 c0       	rjmp	.+4      	; 0x180a <SWITCH_u8Switchinitialize+0x5c>
	} else {
		local_u8error = 1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    180a:	89 81       	ldd	r24, Y+1	; 0x01
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <LED_u8Initialize>:
#include "../../lib/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "LED_interface.h" // Include necessary definitions


u8 LED_u8Initialize(const LED_T *LED) {
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <LED_u8Initialize+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <LED_u8Initialize+0x8>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	9b 83       	std	Y+3, r25	; 0x03
    1828:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    182a:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	d1 f1       	breq	.+116    	; 0x18a8 <LED_u8Initialize+0x90>
    1834:	ea 81       	ldd	r30, Y+2	; 0x02
    1836:	fb 81       	ldd	r31, Y+3	; 0x03
    1838:	81 81       	ldd	r24, Z+1	; 0x01
    183a:	88 30       	cpi	r24, 0x08	; 8
    183c:	a8 f5       	brcc	.+106    	; 0x18a8 <LED_u8Initialize+0x90>
    183e:	ea 81       	ldd	r30, Y+2	; 0x02
    1840:	fb 81       	ldd	r31, Y+3	; 0x03
    1842:	80 81       	ld	r24, Z
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	80 f5       	brcc	.+96     	; 0x18a8 <LED_u8Initialize+0x90>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Configure pin as an output and set it to low
		DIO_SetPinDirection(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_OUTPUT);
    1848:	ea 81       	ldd	r30, Y+2	; 0x02
    184a:	fb 81       	ldd	r31, Y+3	; 0x03
    184c:	80 81       	ld	r24, Z
    184e:	ea 81       	ldd	r30, Y+2	; 0x02
    1850:	fb 81       	ldd	r31, Y+3	; 0x03
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	69 2f       	mov	r22, r25
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
		switch (LED->LED_u8ConnectionType) {
    185c:	ea 81       	ldd	r30, Y+2	; 0x02
    185e:	fb 81       	ldd	r31, Y+3	; 0x03
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3d 83       	std	Y+5, r19	; 0x05
    1868:	2c 83       	std	Y+4, r18	; 0x04
    186a:	8c 81       	ldd	r24, Y+4	; 0x04
    186c:	9d 81       	ldd	r25, Y+5	; 0x05
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	81 f0       	breq	.+32     	; 0x1892 <LED_u8Initialize+0x7a>
    1872:	2c 81       	ldd	r18, Y+4	; 0x04
    1874:	3d 81       	ldd	r19, Y+5	; 0x05
    1876:	21 30       	cpi	r18, 0x01	; 1
    1878:	31 05       	cpc	r19, r1
    187a:	c1 f4       	brne	.+48     	; 0x18ac <LED_u8Initialize+0x94>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    187c:	ea 81       	ldd	r30, Y+2	; 0x02
    187e:	fb 81       	ldd	r31, Y+3	; 0x03
    1880:	80 81       	ld	r24, Z
    1882:	ea 81       	ldd	r30, Y+2	; 0x02
    1884:	fb 81       	ldd	r31, Y+3	; 0x03
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	69 2f       	mov	r22, r25
    188a:	40 e0       	ldi	r20, 0x00	; 0
    188c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <LED_u8Initialize+0x94>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    1892:	ea 81       	ldd	r30, Y+2	; 0x02
    1894:	fb 81       	ldd	r31, Y+3	; 0x03
    1896:	80 81       	ld	r24, Z
    1898:	ea 81       	ldd	r30, Y+2	; 0x02
    189a:	fb 81       	ldd	r31, Y+3	; 0x03
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	69 2f       	mov	r22, r25
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <LED_u8Initialize+0x94>
		}
		} else {
		local_u8error = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <LED_u8TurnOnLED>:

// Function to turn on an LED based on connection type
u8 LED_u8TurnOnLED(const LED_T *LED) {
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <LED_u8TurnOnLED+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <LED_u8TurnOnLED+0x8>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	9b 83       	std	Y+3, r25	; 0x03
    18ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    18d0:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	81 f1       	breq	.+96     	; 0x193a <LED_u8TurnOnLED+0x7c>
    18da:	ea 81       	ldd	r30, Y+2	; 0x02
    18dc:	fb 81       	ldd	r31, Y+3	; 0x03
    18de:	81 81       	ldd	r24, Z+1	; 0x01
    18e0:	88 30       	cpi	r24, 0x08	; 8
    18e2:	58 f5       	brcc	.+86     	; 0x193a <LED_u8TurnOnLED+0x7c>
    18e4:	ea 81       	ldd	r30, Y+2	; 0x02
    18e6:	fb 81       	ldd	r31, Y+3	; 0x03
    18e8:	80 81       	ld	r24, Z
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	30 f5       	brcc	.+76     	; 0x193a <LED_u8TurnOnLED+0x7c>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Switch based on the connection type
		switch (LED->LED_u8ConnectionType) {
    18ee:	ea 81       	ldd	r30, Y+2	; 0x02
    18f0:	fb 81       	ldd	r31, Y+3	; 0x03
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	3d 83       	std	Y+5, r19	; 0x05
    18fa:	2c 83       	std	Y+4, r18	; 0x04
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	81 f0       	breq	.+32     	; 0x1924 <LED_u8TurnOnLED+0x66>
    1904:	2c 81       	ldd	r18, Y+4	; 0x04
    1906:	3d 81       	ldd	r19, Y+5	; 0x05
    1908:	21 30       	cpi	r18, 0x01	; 1
    190a:	31 05       	cpc	r19, r1
    190c:	c1 f4       	brne	.+48     	; 0x193e <LED_u8TurnOnLED+0x80>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    190e:	ea 81       	ldd	r30, Y+2	; 0x02
    1910:	fb 81       	ldd	r31, Y+3	; 0x03
    1912:	80 81       	ld	r24, Z
    1914:	ea 81       	ldd	r30, Y+2	; 0x02
    1916:	fb 81       	ldd	r31, Y+3	; 0x03
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	69 2f       	mov	r22, r25
    191c:	41 e0       	ldi	r20, 0x01	; 1
    191e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1922:	0d c0       	rjmp	.+26     	; 0x193e <LED_u8TurnOnLED+0x80>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    1924:	ea 81       	ldd	r30, Y+2	; 0x02
    1926:	fb 81       	ldd	r31, Y+3	; 0x03
    1928:	80 81       	ld	r24, Z
    192a:	ea 81       	ldd	r30, Y+2	; 0x02
    192c:	fb 81       	ldd	r31, Y+3	; 0x03
    192e:	91 81       	ldd	r25, Z+1	; 0x01
    1930:	69 2f       	mov	r22, r25
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1938:	02 c0       	rjmp	.+4      	; 0x193e <LED_u8TurnOnLED+0x80>
		}
	}
	else {
		local_u8error = 1;  // Invalid pin, set error flag
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    193e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <LED_u8TurnOffLED>:

// Function to turn off an LED based on connection type
u8 LED_u8TurnOffLED(const LED_T *LED) {
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <LED_u8TurnOffLED+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <LED_u8TurnOffLED+0x8>
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	9b 83       	std	Y+3, r25	; 0x03
    1960:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    1962:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	81 f1       	breq	.+96     	; 0x19cc <LED_u8TurnOffLED+0x7c>
    196c:	ea 81       	ldd	r30, Y+2	; 0x02
    196e:	fb 81       	ldd	r31, Y+3	; 0x03
    1970:	81 81       	ldd	r24, Z+1	; 0x01
    1972:	88 30       	cpi	r24, 0x08	; 8
    1974:	58 f5       	brcc	.+86     	; 0x19cc <LED_u8TurnOffLED+0x7c>
    1976:	ea 81       	ldd	r30, Y+2	; 0x02
    1978:	fb 81       	ldd	r31, Y+3	; 0x03
    197a:	80 81       	ld	r24, Z
    197c:	84 30       	cpi	r24, 0x04	; 4
    197e:	30 f5       	brcc	.+76     	; 0x19cc <LED_u8TurnOffLED+0x7c>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Switch based on the connection type
		switch (LED->LED_u8ConnectionType) {
    1980:	ea 81       	ldd	r30, Y+2	; 0x02
    1982:	fb 81       	ldd	r31, Y+3	; 0x03
    1984:	82 81       	ldd	r24, Z+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	3d 83       	std	Y+5, r19	; 0x05
    198c:	2c 83       	std	Y+4, r18	; 0x04
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	81 f0       	breq	.+32     	; 0x19b6 <LED_u8TurnOffLED+0x66>
    1996:	2c 81       	ldd	r18, Y+4	; 0x04
    1998:	3d 81       	ldd	r19, Y+5	; 0x05
    199a:	21 30       	cpi	r18, 0x01	; 1
    199c:	31 05       	cpc	r19, r1
    199e:	c1 f4       	brne	.+48     	; 0x19d0 <LED_u8TurnOffLED+0x80>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    19a0:	ea 81       	ldd	r30, Y+2	; 0x02
    19a2:	fb 81       	ldd	r31, Y+3	; 0x03
    19a4:	80 81       	ld	r24, Z
    19a6:	ea 81       	ldd	r30, Y+2	; 0x02
    19a8:	fb 81       	ldd	r31, Y+3	; 0x03
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	69 2f       	mov	r22, r25
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    19b4:	0d c0       	rjmp	.+26     	; 0x19d0 <LED_u8TurnOffLED+0x80>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    19b6:	ea 81       	ldd	r30, Y+2	; 0x02
    19b8:	fb 81       	ldd	r31, Y+3	; 0x03
    19ba:	80 81       	ld	r24, Z
    19bc:	ea 81       	ldd	r30, Y+2	; 0x02
    19be:	fb 81       	ldd	r31, Y+3	; 0x03
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	69 2f       	mov	r22, r25
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <LED_u8TurnOffLED+0x80>
		}
		} else {
		local_u8error = 1;  // Invalid pin, set error flag
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <KPD_u8GetPressedkey>:
#include "KPD_private.h"
#include <util/delay.h>


u8 KPD_u8GetPressedkey(void)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <KPD_u8GetPressedkey+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <KPD_u8GetPressedkey+0x8>
    19ea:	0f 92       	push	r0
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pressedkey=KPD_NO_PREESED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    19f4:	1a 82       	std	Y+2, r1	; 0x02
    19f6:	5e c0       	rjmp	.+188    	; 0x1ab4 <KPD_u8GetPressedkey+0xd2>
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	fc 01       	movw	r30, r24
    1a00:	e0 59       	subi	r30, 0x90	; 144
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	90 81       	ld	r25, Z
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	69 2f       	mov	r22, r25
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1a10:	19 82       	std	Y+1, r1	; 0x01
    1a12:	3d c0       	rjmp	.+122    	; 0x1a8e <KPD_u8GetPressedkey+0xac>
		{
			/*Read the current row*/
			DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	88 2f       	mov	r24, r24
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	e4 59       	subi	r30, 0x94	; 148
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	90 81       	ld	r25, Z
    1a22:	9e 01       	movw	r18, r28
    1a24:	2c 5f       	subi	r18, 0xFC	; 252
    1a26:	3f 4f       	sbci	r19, 0xFF	; 255
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	69 2f       	mov	r22, r25
    1a2c:	a9 01       	movw	r20, r18
    1a2e:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>

			/*check if switch is pressed*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	88 23       	and	r24, r24
    1a36:	41 f5       	brne	.+80     	; 0x1a88 <KPD_u8GetPressedkey+0xa6>
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	ca 01       	movw	r24, r20
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	82 0f       	add	r24, r18
    1a50:	93 1f       	adc	r25, r19
    1a52:	fc 01       	movw	r30, r24
    1a54:	ec 58       	subi	r30, 0x8C	; 140
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	0f c0       	rjmp	.+30     	; 0x1a7c <KPD_u8GetPressedkey+0x9a>

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	fc 01       	movw	r30, r24
    1a66:	e4 59       	subi	r30, 0x94	; 148
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	90 81       	ld	r25, Z
    1a6c:	9e 01       	movw	r18, r28
    1a6e:	2c 5f       	subi	r18, 0xFC	; 252
    1a70:	3f 4f       	sbci	r19, 0xFF	; 255
    1a72:	83 e0       	ldi	r24, 0x03	; 3
    1a74:	69 2f       	mov	r22, r25
    1a76:	a9 01       	movw	r20, r18
    1a78:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	88 23       	and	r24, r24
    1a80:	71 f3       	breq	.-36     	; 0x1a5e <KPD_u8GetPressedkey+0x7c>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8Pressedkey;
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	8d 83       	std	Y+5, r24	; 0x05
    1a86:	1c c0       	rjmp	.+56     	; 0x1ac0 <KPD_u8GetPressedkey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	89 81       	ldd	r24, Y+1	; 0x01
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	08 f4       	brcc	.+2      	; 0x1a96 <KPD_u8GetPressedkey+0xb4>
    1a94:	bf cf       	rjmp	.-130    	; 0x1a14 <KPD_u8GetPressedkey+0x32>
				}
				return Local_u8Pressedkey;
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e0 59       	subi	r30, 0x90	; 144
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	90 81       	ld	r25, Z
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	8f 5f       	subi	r24, 0xFF	; 255
    1ab2:	8a 83       	std	Y+2, r24	; 0x02
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	08 f4       	brcc	.+2      	; 0x1abc <KPD_u8GetPressedkey+0xda>
    1aba:	9e cf       	rjmp	.-196    	; 0x19f8 <KPD_u8GetPressedkey+0x16>
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8Pressedkey;
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <DAC_voidAnalogvalue>:
#include "../../lib/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "DAC_interface.h"

void DAC_voidAnalogvalue(u8 Copy_u8Value,u8 Copy_u8Port)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <DAC_voidAnalogvalue+0x6>
    1ad8:	0f 92       	push	r0
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8a 83       	std	Y+2, r24	; 0x02
    1ae0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DigetalOutput=Copy_u8Value*51;
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	83 e3       	ldi	r24, 0x33	; 51
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	ac 01       	movw	r20, r24
    1aee:	24 9f       	mul	r18, r20
    1af0:	c0 01       	movw	r24, r0
    1af2:	25 9f       	mul	r18, r21
    1af4:	90 0d       	add	r25, r0
    1af6:	34 9f       	mul	r19, r20
    1af8:	90 0d       	add	r25, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortValue(Copy_u8Port,Local_u8DigetalOutput);
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	69 81       	ldd	r22, Y+1	; 0x01
    1b02:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <CLCD_voidSendCommand>:
#include <util/delay.h>



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin Low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1b32:	83 e0       	ldi	r24, 0x03	; 3
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set command to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1b3c:	82 e0       	ldi	r24, 0x02	; 2
    1b3e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b40:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1b44:	83 e0       	ldi	r24, 0x03	; 3
    1b46:	62 e0       	ldi	r22, 0x02	; 2
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e0       	ldi	r26, 0x00	; 0
    1b54:	b0 e4       	ldi	r27, 0x40	; 64
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
    1b58:	9c 87       	std	Y+12, r25	; 0x0c
    1b5a:	ad 87       	std	Y+13, r26	; 0x0d
    1b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	4a e7       	ldi	r20, 0x7A	; 122
    1b6c:	53 e4       	ldi	r21, 0x43	; 67
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8f 83       	std	Y+7, r24	; 0x07
    1b78:	98 87       	std	Y+8, r25	; 0x08
    1b7a:	a9 87       	std	Y+9, r26	; 0x09
    1b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <CLCD_voidSendCommand+0xee>
    1be2:	89 e1       	ldi	r24, 0x19	; 25
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <CLCD_voidSendCommand+0xdc>
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <CLCD_voidSendCommand+0xd0>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <CLCD_voidSendCommand+0x118>
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

}
    1c3c:	2f 96       	adiw	r28, 0x0f	; 15
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	2f 97       	sbiw	r28, 0x0f	; 15
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin High for data*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	60 e0       	ldi	r22, 0x00	; 0
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	61 e0       	ldi	r22, 0x01	; 1
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set data to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c7c:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	62 e0       	ldi	r22, 0x02	; 2
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e4       	ldi	r27, 0x40	; 64
    1c92:	8b 87       	std	Y+11, r24	; 0x0b
    1c94:	9c 87       	std	Y+12, r25	; 0x0c
    1c96:	ad 87       	std	Y+13, r26	; 0x0d
    1c98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	53 e4       	ldi	r21, 0x43	; 67
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	8f 83       	std	Y+7, r24	; 0x07
    1cb4:	98 87       	std	Y+8, r25	; 0x08
    1cb6:	a9 87       	std	Y+9, r26	; 0x09
    1cb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cba:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbc:	78 85       	ldd	r23, Y+8	; 0x08
    1cbe:	89 85       	ldd	r24, Y+9	; 0x09
    1cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <CLCD_voidSendData+0xee>
    1d1e:	89 e1       	ldi	r24, 0x19	; 25
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <CLCD_voidSendData+0xdc>
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <CLCD_voidSendData+0xd0>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	6f 81       	ldd	r22, Y+7	; 0x07
    1d48:	78 85       	ldd	r23, Y+8	; 0x08
    1d4a:	89 85       	ldd	r24, Y+9	; 0x09
    1d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	8d 83       	std	Y+5, r24	; 0x05
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
    1d64:	9a 81       	ldd	r25, Y+2	; 0x02
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <CLCD_voidSendData+0x118>
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	62 e0       	ldi	r22, 0x02	; 2
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

}
    1d78:	2f 96       	adiw	r28, 0x0f	; 15
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	08 95       	ret

00001d8a <CLCD_voidInit>:

void CLCD_voidInit(void)

{
    1d8a:	df 93       	push	r29
    1d8c:	cf 93       	push	r28
    1d8e:	cd b7       	in	r28, 0x3d	; 61
    1d90:	de b7       	in	r29, 0x3e	; 62
    1d92:	2e 97       	sbiw	r28, 0x0e	; 14
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e2       	ldi	r26, 0x20	; 32
    1da4:	b2 e4       	ldi	r27, 0x42	; 66
    1da6:	8b 87       	std	Y+11, r24	; 0x0b
    1da8:	9c 87       	std	Y+12, r25	; 0x0c
    1daa:	ad 87       	std	Y+13, r26	; 0x0d
    1dac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1db0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	4a e7       	ldi	r20, 0x7A	; 122
    1dbc:	53 e4       	ldi	r21, 0x43	; 67
    1dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	8f 83       	std	Y+7, r24	; 0x07
    1dc8:	98 87       	std	Y+8, r25	; 0x08
    1dca:	a9 87       	std	Y+9, r26	; 0x09
    1dcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	2c f4       	brge	.+10     	; 0x1df0 <CLCD_voidInit+0x66>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	9e 83       	std	Y+6, r25	; 0x06
    1dec:	8d 83       	std	Y+5, r24	; 0x05
    1dee:	3f c0       	rjmp	.+126    	; 0x1e6e <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1df0:	6f 81       	ldd	r22, Y+7	; 0x07
    1df2:	78 85       	ldd	r23, Y+8	; 0x08
    1df4:	89 85       	ldd	r24, Y+9	; 0x09
    1df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	3f ef       	ldi	r19, 0xFF	; 255
    1dfc:	4f e7       	ldi	r20, 0x7F	; 127
    1dfe:	57 e4       	ldi	r21, 0x47	; 71
    1e00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e04:	18 16       	cp	r1, r24
    1e06:	4c f5       	brge	.+82     	; 0x1e5a <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	9e 83       	std	Y+6, r25	; 0x06
    1e2e:	8d 83       	std	Y+5, r24	; 0x05
    1e30:	0f c0       	rjmp	.+30     	; 0x1e50 <CLCD_voidInit+0xc6>
    1e32:	89 e1       	ldi	r24, 0x19	; 25
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	9c 83       	std	Y+4, r25	; 0x04
    1e38:	8b 83       	std	Y+3, r24	; 0x03
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <CLCD_voidInit+0xb4>
    1e42:	9c 83       	std	Y+4, r25	; 0x04
    1e44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e50:	8d 81       	ldd	r24, Y+5	; 0x05
    1e52:	9e 81       	ldd	r25, Y+6	; 0x06
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	69 f7       	brne	.-38     	; 0x1e32 <CLCD_voidInit+0xa8>
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e5c:	78 85       	ldd	r23, Y+8	; 0x08
    1e5e:	89 85       	ldd	r24, Y+9	; 0x09
    1e60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9e 83       	std	Y+6, r25	; 0x06
    1e6c:	8d 83       	std	Y+5, r24	; 0x05
    1e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e70:	9e 81       	ldd	r25, Y+6	; 0x06
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <CLCD_voidInit+0xf0>
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms */
	_delay_ms(40);

	/* function set command : 2 line , 5*8 font size */
	CLCD_voidSendCommand(0b00111100);
    1e82:	8c e3       	ldi	r24, 0x3C	; 60
    1e84:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <CLCD_voidSendCommand>

	/* display on off control: display enable, disable cursor , no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    1e88:	8c e0       	ldi	r24, 0x0C	; 12
    1e8a:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <CLCD_voidSendCommand>

	/* clear display */
	CLCD_voidSendCommand(1);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <CLCD_voidSendCommand>

}
    1e94:	2e 96       	adiw	r28, 0x0e	; 14
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <CLCD_voidSendString+0x6>
    1eac:	0f 92       	push	r0
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9b 83       	std	Y+3, r25	; 0x03
    1eb4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1eb6:	19 82       	std	Y+1, r1	; 0x01
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <CLCD_voidSendString+0x32>
	while (Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	90 81       	ld	r25, Z
    1ecc:	89 81       	ldd	r24, Y+1	; 0x01
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	89 2f       	mov	r24, r25
    1ed4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != '\0')
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	e2 0f       	add	r30, r18
    1ee6:	f3 1f       	adc	r31, r19
    1ee8:	80 81       	ld	r24, Z
    1eea:	88 23       	and	r24, r24
    1eec:	31 f7       	brne	.-52     	; 0x1eba <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
	}
}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <CLCD_voidGoToXY+0x6>
    1f00:	0f 92       	push	r0
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8XPos==0)
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	88 23       	and	r24, r24
    1f0e:	19 f4       	brne	.+6      	; 0x1f16 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	06 c0       	rjmp	.+12     	; 0x1f22 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	19 f4       	brne	.+6      	; 0x1f22 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	80 5c       	subi	r24, 0xC0	; 192
    1f20:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+ 128);
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	80 58       	subi	r24, 0x80	; 128
    1f26:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <CLCD_voidSendCommand>
}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8* Copy_u8ArrayPtr, u8 Copy_u8BlockNum, u8 Copy_XPos, u8 Copy_YPos)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	27 97       	sbiw	r28, 0x07	; 7
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	6d 83       	std	Y+5, r22	; 0x05
    1f50:	4e 83       	std	Y+6, r20	; 0x06
    1f52:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0;
    1f54:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	80 5c       	subi	r24, 0xC0	; 192
    1f6e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <CLCD_voidSendCommand>

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1f72:	19 82       	std	Y+1, r1	; 0x01
    1f74:	0e c0       	rjmp	.+28     	; 0x1f92 <CLCD_voidDisplaySpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	28 2f       	mov	r18, r24
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	80 81       	ld	r24, Z
    1f88:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	88 30       	cpi	r24, 0x08	; 8
    1f96:	78 f3       	brcs	.-34     	; 0x1f76 <CLCD_voidDisplaySpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
	}

	CLCD_voidGoToXY(Copy_XPos,Copy_YPos);
    1f98:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <CLCD_voidGoToXY>

	CLCD_voidSendData(Copy_u8BlockNum);
    1fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
}
    1fa6:	27 96       	adiw	r28, 0x07	; 7
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <CLCD_voidDisplayNumber>:

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	65 97       	sbiw	r28, 0x15	; 21
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	f8 94       	cli
    1fc6:	de bf       	out	0x3e, r29	; 62
    1fc8:	0f be       	out	0x3f, r0	; 63
    1fca:	cd bf       	out	0x3d, r28	; 61
    1fcc:	6a 87       	std	Y+10, r22	; 0x0a
    1fce:	7b 87       	std	Y+11, r23	; 0x0b
    1fd0:	8c 87       	std	Y+12, r24	; 0x0c
    1fd2:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1fd4:	2d b7       	in	r18, 0x3d	; 61
    1fd6:	3e b7       	in	r19, 0x3e	; 62
    1fd8:	3d 8b       	std	Y+21, r19	; 0x15
    1fda:	2c 8b       	std	Y+20, r18	; 0x14
	CLCD_voidSendData(Copy_u8BlockNum);
}

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    1fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fde:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe0:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fe2:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	a1 05       	cpc	r26, r1
    1fe8:	b1 05       	cpc	r27, r1
    1fea:	21 f4       	brne	.+8      	; 0x1ff4 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    1fec:	80 e3       	ldi	r24, 0x30	; 48
    1fee:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    1ff2:	13 c1       	rjmp	.+550    	; 0x221a <CLCD_voidDisplayNumber+0x262>
    1ff4:	8d b7       	in	r24, 0x3d	; 61
    1ff6:	9e b7       	in	r25, 0x3e	; 62
    1ff8:	9f 87       	std	Y+15, r25	; 0x0f
    1ffa:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;;
    1ffc:	1f 82       	std	Y+7, r1	; 0x07
    1ffe:	1e 82       	std	Y+6, r1	; 0x06
    2000:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    2002:	8a 85       	ldd	r24, Y+10	; 0x0a
    2004:	9b 85       	ldd	r25, Y+11	; 0x0b
    2006:	ac 85       	ldd	r26, Y+12	; 0x0c
    2008:	bd 85       	ldd	r27, Y+13	; 0x0d
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	ab 83       	std	Y+3, r26	; 0x03
    2010:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    2012:	8d 81       	ldd	r24, Y+5	; 0x05
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	ab 81       	ldd	r26, Y+3	; 0x03
    201e:	bc 81       	ldd	r27, Y+4	; 0x04
    2020:	2a e0       	ldi	r18, 0x0A	; 10
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 0f 14 	call	0x281e	; 0x281e <__udivmodsi4>
    2030:	da 01       	movw	r26, r20
    2032:	c9 01       	movw	r24, r18
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	ab 83       	std	Y+3, r26	; 0x03
    203a:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	9a 81       	ldd	r25, Y+2	; 0x02
    2040:	ab 81       	ldd	r26, Y+3	; 0x03
    2042:	bc 81       	ldd	r27, Y+4	; 0x04
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	a1 05       	cpc	r26, r1
    2048:	b1 05       	cpc	r27, r1
    204a:	19 f7       	brne	.-58     	; 0x2012 <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	2d b7       	in	r18, 0x3d	; 61
    2054:	3e b7       	in	r19, 0x3e	; 62
    2056:	28 1b       	sub	r18, r24
    2058:	39 0b       	sbc	r19, r25
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	3e bf       	out	0x3e, r19	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	2d bf       	out	0x3d, r18	; 61
    2064:	8d b7       	in	r24, 0x3d	; 61
    2066:	9e b7       	in	r25, 0x3e	; 62
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	9b 8b       	std	Y+19, r25	; 0x13
    206c:	8a 8b       	std	Y+18, r24	; 0x12
    206e:	8a 89       	ldd	r24, Y+18	; 0x12
    2070:	9b 89       	ldd	r25, Y+19	; 0x13
    2072:	00 96       	adiw	r24, 0x00	; 0
    2074:	9b 8b       	std	Y+19, r25	; 0x13
    2076:	8a 8b       	std	Y+18, r24	; 0x12
    2078:	2a 89       	ldd	r18, Y+18	; 0x12
    207a:	3b 89       	ldd	r19, Y+19	; 0x13
    207c:	39 87       	std	Y+9, r19	; 0x09
    207e:	28 87       	std	Y+8, r18	; 0x08
    2080:	2e c0       	rjmp	.+92     	; 0x20de <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    2082:	8a 85       	ldd	r24, Y+10	; 0x0a
    2084:	9b 85       	ldd	r25, Y+11	; 0x0b
    2086:	ac 85       	ldd	r26, Y+12	; 0x0c
    2088:	bd 85       	ldd	r27, Y+13	; 0x0d
    208a:	2a e0       	ldi	r18, 0x0A	; 10
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 0f 14 	call	0x281e	; 0x281e <__udivmodsi4>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    20a0:	8e 81       	ldd	r24, Y+6	; 0x06
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	88 85       	ldd	r24, Y+8	; 0x08
    20a8:	99 85       	ldd	r25, Y+9	; 0x09
    20aa:	fc 01       	movw	r30, r24
    20ac:	e2 0f       	add	r30, r18
    20ae:	f3 1f       	adc	r31, r19
    20b0:	8f 81       	ldd	r24, Y+7	; 0x07
    20b2:	80 83       	st	Z, r24
		Local_u8Counter++;
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	8f 5f       	subi	r24, 0xFF	; 255
    20b8:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    20ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    20bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20be:	ac 85       	ldd	r26, Y+12	; 0x0c
    20c0:	bd 85       	ldd	r27, Y+13	; 0x0d
    20c2:	2a e0       	ldi	r18, 0x0A	; 10
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	0e 94 0f 14 	call	0x281e	; 0x281e <__udivmodsi4>
    20d2:	da 01       	movw	r26, r20
    20d4:	c9 01       	movw	r24, r18
    20d6:	8a 87       	std	Y+10, r24	; 0x0a
    20d8:	9b 87       	std	Y+11, r25	; 0x0b
    20da:	ac 87       	std	Y+12, r26	; 0x0c
    20dc:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    20de:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e2:	ac 85       	ldd	r26, Y+12	; 0x0c
    20e4:	bd 85       	ldd	r27, Y+13	; 0x0d
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	a1 05       	cpc	r26, r1
    20ea:	b1 05       	cpc	r27, r1
    20ec:	21 f0       	breq	.+8      	; 0x20f6 <CLCD_voidDisplayNumber+0x13e>
    20ee:	9e 81       	ldd	r25, Y+6	; 0x06
    20f0:	8d 81       	ldd	r24, Y+5	; 0x05
    20f2:	98 17       	cp	r25, r24
    20f4:	30 f2       	brcs	.-116    	; 0x2082 <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	81 50       	subi	r24, 0x01	; 1
    20fa:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    20fc:	1e 82       	std	Y+6, r1	; 0x06
    20fe:	81 c0       	rjmp	.+258    	; 0x2202 <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	8e 81       	ldd	r24, Y+6	; 0x06
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	28 1b       	sub	r18, r24
    210e:	39 0b       	sbc	r19, r25
    2110:	88 85       	ldd	r24, Y+8	; 0x08
    2112:	99 85       	ldd	r25, Y+9	; 0x09
    2114:	fc 01       	movw	r30, r24
    2116:	e2 0f       	add	r30, r18
    2118:	f3 1f       	adc	r31, r19
    211a:	80 81       	ld	r24, Z
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	39 8b       	std	Y+17, r19	; 0x11
    2122:	28 8b       	std	Y+16, r18	; 0x10
    2124:	88 89       	ldd	r24, Y+16	; 0x10
    2126:	99 89       	ldd	r25, Y+17	; 0x11
    2128:	84 30       	cpi	r24, 0x04	; 4
    212a:	91 05       	cpc	r25, r1
    212c:	09 f4       	brne	.+2      	; 0x2130 <CLCD_voidDisplayNumber+0x178>
    212e:	4f c0       	rjmp	.+158    	; 0x21ce <CLCD_voidDisplayNumber+0x216>
    2130:	28 89       	ldd	r18, Y+16	; 0x10
    2132:	39 89       	ldd	r19, Y+17	; 0x11
    2134:	25 30       	cpi	r18, 0x05	; 5
    2136:	31 05       	cpc	r19, r1
    2138:	d4 f4       	brge	.+52     	; 0x216e <CLCD_voidDisplayNumber+0x1b6>
    213a:	88 89       	ldd	r24, Y+16	; 0x10
    213c:	99 89       	ldd	r25, Y+17	; 0x11
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	c9 f1       	breq	.+114    	; 0x21b6 <CLCD_voidDisplayNumber+0x1fe>
    2144:	28 89       	ldd	r18, Y+16	; 0x10
    2146:	39 89       	ldd	r19, Y+17	; 0x11
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	2c f4       	brge	.+10     	; 0x2158 <CLCD_voidDisplayNumber+0x1a0>
    214e:	88 89       	ldd	r24, Y+16	; 0x10
    2150:	99 89       	ldd	r25, Y+17	; 0x11
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	61 f1       	breq	.+88     	; 0x21ae <CLCD_voidDisplayNumber+0x1f6>
    2156:	52 c0       	rjmp	.+164    	; 0x21fc <CLCD_voidDisplayNumber+0x244>
    2158:	28 89       	ldd	r18, Y+16	; 0x10
    215a:	39 89       	ldd	r19, Y+17	; 0x11
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	71 f1       	breq	.+92     	; 0x21be <CLCD_voidDisplayNumber+0x206>
    2162:	88 89       	ldd	r24, Y+16	; 0x10
    2164:	99 89       	ldd	r25, Y+17	; 0x11
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	91 05       	cpc	r25, r1
    216a:	69 f1       	breq	.+90     	; 0x21c6 <CLCD_voidDisplayNumber+0x20e>
    216c:	47 c0       	rjmp	.+142    	; 0x21fc <CLCD_voidDisplayNumber+0x244>
    216e:	28 89       	ldd	r18, Y+16	; 0x10
    2170:	39 89       	ldd	r19, Y+17	; 0x11
    2172:	27 30       	cpi	r18, 0x07	; 7
    2174:	31 05       	cpc	r19, r1
    2176:	b9 f1       	breq	.+110    	; 0x21e6 <CLCD_voidDisplayNumber+0x22e>
    2178:	88 89       	ldd	r24, Y+16	; 0x10
    217a:	99 89       	ldd	r25, Y+17	; 0x11
    217c:	88 30       	cpi	r24, 0x08	; 8
    217e:	91 05       	cpc	r25, r1
    2180:	5c f4       	brge	.+22     	; 0x2198 <CLCD_voidDisplayNumber+0x1e0>
    2182:	28 89       	ldd	r18, Y+16	; 0x10
    2184:	39 89       	ldd	r19, Y+17	; 0x11
    2186:	25 30       	cpi	r18, 0x05	; 5
    2188:	31 05       	cpc	r19, r1
    218a:	29 f1       	breq	.+74     	; 0x21d6 <CLCD_voidDisplayNumber+0x21e>
    218c:	88 89       	ldd	r24, Y+16	; 0x10
    218e:	99 89       	ldd	r25, Y+17	; 0x11
    2190:	86 30       	cpi	r24, 0x06	; 6
    2192:	91 05       	cpc	r25, r1
    2194:	21 f1       	breq	.+72     	; 0x21de <CLCD_voidDisplayNumber+0x226>
    2196:	32 c0       	rjmp	.+100    	; 0x21fc <CLCD_voidDisplayNumber+0x244>
    2198:	28 89       	ldd	r18, Y+16	; 0x10
    219a:	39 89       	ldd	r19, Y+17	; 0x11
    219c:	28 30       	cpi	r18, 0x08	; 8
    219e:	31 05       	cpc	r19, r1
    21a0:	31 f1       	breq	.+76     	; 0x21ee <CLCD_voidDisplayNumber+0x236>
    21a2:	88 89       	ldd	r24, Y+16	; 0x10
    21a4:	99 89       	ldd	r25, Y+17	; 0x11
    21a6:	89 30       	cpi	r24, 0x09	; 9
    21a8:	91 05       	cpc	r25, r1
    21aa:	29 f1       	breq	.+74     	; 0x21f6 <CLCD_voidDisplayNumber+0x23e>
    21ac:	27 c0       	rjmp	.+78     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    21ae:	80 e3       	ldi	r24, 0x30	; 48
    21b0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21b4:	23 c0       	rjmp	.+70     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    21b6:	81 e3       	ldi	r24, 0x31	; 49
    21b8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21bc:	1f c0       	rjmp	.+62     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    21be:	82 e3       	ldi	r24, 0x32	; 50
    21c0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21c4:	1b c0       	rjmp	.+54     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    21c6:	83 e3       	ldi	r24, 0x33	; 51
    21c8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21cc:	17 c0       	rjmp	.+46     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    21ce:	84 e3       	ldi	r24, 0x34	; 52
    21d0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21d4:	13 c0       	rjmp	.+38     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    21d6:	85 e3       	ldi	r24, 0x35	; 53
    21d8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21dc:	0f c0       	rjmp	.+30     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    21de:	86 e3       	ldi	r24, 0x36	; 54
    21e0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21e4:	0b c0       	rjmp	.+22     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    21e6:	87 e3       	ldi	r24, 0x37	; 55
    21e8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21ec:	07 c0       	rjmp	.+14     	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    21ee:	88 e3       	ldi	r24, 0x38	; 56
    21f0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    21f6:	89 e3       	ldi	r24, 0x39	; 57
    21f8:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    21fc:	8e 81       	ldd	r24, Y+6	; 0x06
    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	8e 83       	std	Y+6, r24	; 0x06
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	89 17       	cp	r24, r25
    2208:	08 f0       	brcs	.+2      	; 0x220c <CLCD_voidDisplayNumber+0x254>
    220a:	7a cf       	rjmp	.-268    	; 0x2100 <CLCD_voidDisplayNumber+0x148>
    220c:	2e 85       	ldd	r18, Y+14	; 0x0e
    220e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2210:	0f b6       	in	r0, 0x3f	; 63
    2212:	f8 94       	cli
    2214:	3e bf       	out	0x3e, r19	; 62
    2216:	0f be       	out	0x3f, r0	; 63
    2218:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    221a:	8c 89       	ldd	r24, Y+20	; 0x14
    221c:	9d 89       	ldd	r25, Y+21	; 0x15
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	9e bf       	out	0x3e, r25	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	8d bf       	out	0x3d, r24	; 61
    2228:	65 96       	adiw	r28, 0x15	; 21
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <CLCD_voidClearLCD>:

void CLCD_voidClearLCD(void)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLEAR_CMD);
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <CLCD_voidSendCommand>
}
    2248:	cf 91       	pop	r28
    224a:	df 91       	pop	r29
    224c:	08 95       	ret

0000224e <_7SEGMENT_u8ShowNumber>:
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @param copy_u8number The number to be displayed (0-9).
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8ShowNumber(const _7SEGMENT_T  *_7SEGMENT, const u8 copy_u8number)
{
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	2b 97       	sbiw	r28, 0x0b	; 11
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	8b 83       	std	Y+3, r24	; 0x03
    2266:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8error = 0;
    2268:	1a 82       	std	Y+2, r1	; 0x02
	s8 i = 0;
    226a:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2) && (copy_u8number < 10)  )
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	09 f4       	brne	.+2      	; 0x2276 <_7SEGMENT_u8ShowNumber+0x28>
    2274:	13 c1       	rjmp	.+550    	; 0x249c <_7SEGMENT_u8ShowNumber+0x24e>
    2276:	eb 81       	ldd	r30, Y+3	; 0x03
    2278:	fc 81       	ldd	r31, Y+4	; 0x04
    227a:	80 81       	ld	r24, Z
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	08 f0       	brcs	.+2      	; 0x2282 <_7SEGMENT_u8ShowNumber+0x34>
    2280:	0d c1       	rjmp	.+538    	; 0x249c <_7SEGMENT_u8ShowNumber+0x24e>
    2282:	eb 81       	ldd	r30, Y+3	; 0x03
    2284:	fc 81       	ldd	r31, Y+4	; 0x04
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	87 30       	cpi	r24, 0x07	; 7
    228a:	08 f0       	brcs	.+2      	; 0x228e <_7SEGMENT_u8ShowNumber+0x40>
    228c:	07 c1       	rjmp	.+526    	; 0x249c <_7SEGMENT_u8ShowNumber+0x24e>
    228e:	eb 81       	ldd	r30, Y+3	; 0x03
    2290:	fc 81       	ldd	r31, Y+4	; 0x04
    2292:	81 81       	ldd	r24, Z+1	; 0x01
    2294:	84 30       	cpi	r24, 0x04	; 4
    2296:	08 f0       	brcs	.+2      	; 0x229a <_7SEGMENT_u8ShowNumber+0x4c>
    2298:	01 c1       	rjmp	.+514    	; 0x249c <_7SEGMENT_u8ShowNumber+0x24e>
    229a:	eb 81       	ldd	r30, Y+3	; 0x03
    229c:	fc 81       	ldd	r31, Y+4	; 0x04
    229e:	83 81       	ldd	r24, Z+3	; 0x03
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <_7SEGMENT_u8ShowNumber+0x58>
    22a4:	fb c0       	rjmp	.+502    	; 0x249c <_7SEGMENT_u8ShowNumber+0x24e>
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	8a 30       	cpi	r24, 0x0A	; 10
    22aa:	08 f0       	brcs	.+2      	; 0x22ae <_7SEGMENT_u8ShowNumber+0x60>
    22ac:	f7 c0       	rjmp	.+494    	; 0x249c <_7SEGMENT_u8ShowNumber+0x24e>
	{

		switch (_7SEGMENT->_7SEGMENT_u8Decoders)
    22ae:	eb 81       	ldd	r30, Y+3	; 0x03
    22b0:	fc 81       	ldd	r31, Y+4	; 0x04
    22b2:	84 81       	ldd	r24, Z+4	; 0x04
    22b4:	28 2f       	mov	r18, r24
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	3b 87       	std	Y+11, r19	; 0x0b
    22ba:	2a 87       	std	Y+10, r18	; 0x0a
    22bc:	4a 85       	ldd	r20, Y+10	; 0x0a
    22be:	5b 85       	ldd	r21, Y+11	; 0x0b
    22c0:	41 15       	cp	r20, r1
    22c2:	51 05       	cpc	r21, r1
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <_7SEGMENT_u8ShowNumber+0x7a>
    22c6:	a2 c0       	rjmp	.+324    	; 0x240c <_7SEGMENT_u8ShowNumber+0x1be>
    22c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    22ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <_7SEGMENT_u8ShowNumber+0x86>
    22d2:	e1 c0       	rjmp	.+450    	; 0x2496 <_7SEGMENT_u8ShowNumber+0x248>
		{
			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
    22d4:	eb 81       	ldd	r30, Y+3	; 0x03
    22d6:	fc 81       	ldd	r31, Y+4	; 0x04
    22d8:	85 81       	ldd	r24, Z+5	; 0x05
    22da:	85 30       	cpi	r24, 0x05	; 5
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <_7SEGMENT_u8ShowNumber+0x92>
    22de:	93 c0       	rjmp	.+294    	; 0x2406 <_7SEGMENT_u8ShowNumber+0x1b8>
			{
				switch (_7SEGMENT->_7SEGMENT_u8commontype)
    22e0:	eb 81       	ldd	r30, Y+3	; 0x03
    22e2:	fc 81       	ldd	r31, Y+4	; 0x04
    22e4:	83 81       	ldd	r24, Z+3	; 0x03
    22e6:	28 2f       	mov	r18, r24
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	39 87       	std	Y+9, r19	; 0x09
    22ec:	28 87       	std	Y+8, r18	; 0x08
    22ee:	48 85       	ldd	r20, Y+8	; 0x08
    22f0:	59 85       	ldd	r21, Y+9	; 0x09
    22f2:	41 15       	cp	r20, r1
    22f4:	51 05       	cpc	r21, r1
    22f6:	09 f4       	brne	.+2      	; 0x22fa <_7SEGMENT_u8ShowNumber+0xac>
    22f8:	46 c0       	rjmp	.+140    	; 0x2386 <_7SEGMENT_u8ShowNumber+0x138>
    22fa:	88 85       	ldd	r24, Y+8	; 0x08
    22fc:	99 85       	ldd	r25, Y+9	; 0x09
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	09 f0       	breq	.+2      	; 0x2306 <_7SEGMENT_u8ShowNumber+0xb8>
    2304:	cd c0       	rjmp	.+410    	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
				{
					case _7SEGMENT_u8COMMONCATHODE:
					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    2306:	eb 81       	ldd	r30, Y+3	; 0x03
    2308:	fc 81       	ldd	r31, Y+4	; 0x04
    230a:	81 81       	ldd	r24, Z+1	; 0x01
    230c:	eb 81       	ldd	r30, Y+3	; 0x03
    230e:	fc 81       	ldd	r31, Y+4	; 0x04
    2310:	92 81       	ldd	r25, Z+2	; 0x02
    2312:	69 2f       	mov	r22, r25
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
					for (i=0;i<4;i++)
    231a:	19 82       	std	Y+1, r1	; 0x01
    231c:	30 c0       	rjmp	.+96     	; 0x237e <_7SEGMENT_u8ShowNumber+0x130>
					{
						if ((copy_u8number & (1 <<i)))
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	99 27       	eor	r25, r25
    2328:	87 fd       	sbrc	r24, 7
    232a:	90 95       	com	r25
    232c:	a9 01       	movw	r20, r18
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <_7SEGMENT_u8ShowNumber+0xe6>
    2330:	55 95       	asr	r21
    2332:	47 95       	ror	r20
    2334:	8a 95       	dec	r24
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <_7SEGMENT_u8ShowNumber+0xe2>
    2338:	ca 01       	movw	r24, r20
    233a:	81 70       	andi	r24, 0x01	; 1
    233c:	90 70       	andi	r25, 0x00	; 0
    233e:	88 23       	and	r24, r24
    2340:	71 f0       	breq	.+28     	; 0x235e <_7SEGMENT_u8ShowNumber+0x110>
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_HIGH);
    2342:	eb 81       	ldd	r30, Y+3	; 0x03
    2344:	fc 81       	ldd	r31, Y+4	; 0x04
    2346:	20 81       	ld	r18, Z
    2348:	eb 81       	ldd	r30, Y+3	; 0x03
    234a:	fc 81       	ldd	r31, Y+4	; 0x04
    234c:	95 81       	ldd	r25, Z+5	; 0x05
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	98 0f       	add	r25, r24
    2352:	82 2f       	mov	r24, r18
    2354:	69 2f       	mov	r22, r25
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    235c:	0d c0       	rjmp	.+26     	; 0x2378 <_7SEGMENT_u8ShowNumber+0x12a>
						}
						else
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_LOW);
    235e:	eb 81       	ldd	r30, Y+3	; 0x03
    2360:	fc 81       	ldd	r31, Y+4	; 0x04
    2362:	20 81       	ld	r18, Z
    2364:	eb 81       	ldd	r30, Y+3	; 0x03
    2366:	fc 81       	ldd	r31, Y+4	; 0x04
    2368:	95 81       	ldd	r25, Z+5	; 0x05
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	98 0f       	add	r25, r24
    236e:	82 2f       	mov	r24, r18
    2370:	69 2f       	mov	r22, r25
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
			{
				switch (_7SEGMENT->_7SEGMENT_u8commontype)
				{
					case _7SEGMENT_u8COMMONCATHODE:
					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
					for (i=0;i<4;i++)
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	8f 5f       	subi	r24, 0xFF	; 255
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	84 30       	cpi	r24, 0x04	; 4
    2382:	6c f2       	brlt	.-102    	; 0x231e <_7SEGMENT_u8ShowNumber+0xd0>
    2384:	8d c0       	rjmp	.+282    	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
						}
					}
					break;
					case _7SEGMENT_u8COMMONANODE:

					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    2386:	eb 81       	ldd	r30, Y+3	; 0x03
    2388:	fc 81       	ldd	r31, Y+4	; 0x04
    238a:	81 81       	ldd	r24, Z+1	; 0x01
    238c:	eb 81       	ldd	r30, Y+3	; 0x03
    238e:	fc 81       	ldd	r31, Y+4	; 0x04
    2390:	92 81       	ldd	r25, Z+2	; 0x02
    2392:	69 2f       	mov	r22, r25
    2394:	41 e0       	ldi	r20, 0x01	; 1
    2396:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
					for (i = 0; i < 4; i++)
    239a:	19 82       	std	Y+1, r1	; 0x01
    239c:	30 c0       	rjmp	.+96     	; 0x23fe <_7SEGMENT_u8ShowNumber+0x1b0>
					{
						if ((copy_u8number & (1 << i)))
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	99 27       	eor	r25, r25
    23a8:	87 fd       	sbrc	r24, 7
    23aa:	90 95       	com	r25
    23ac:	a9 01       	movw	r20, r18
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <_7SEGMENT_u8ShowNumber+0x166>
    23b0:	55 95       	asr	r21
    23b2:	47 95       	ror	r20
    23b4:	8a 95       	dec	r24
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <_7SEGMENT_u8ShowNumber+0x162>
    23b8:	ca 01       	movw	r24, r20
    23ba:	81 70       	andi	r24, 0x01	; 1
    23bc:	90 70       	andi	r25, 0x00	; 0
    23be:	88 23       	and	r24, r24
    23c0:	71 f0       	breq	.+28     	; 0x23de <_7SEGMENT_u8ShowNumber+0x190>
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_LOW);
    23c2:	eb 81       	ldd	r30, Y+3	; 0x03
    23c4:	fc 81       	ldd	r31, Y+4	; 0x04
    23c6:	20 81       	ld	r18, Z
    23c8:	eb 81       	ldd	r30, Y+3	; 0x03
    23ca:	fc 81       	ldd	r31, Y+4	; 0x04
    23cc:	95 81       	ldd	r25, Z+5	; 0x05
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	98 0f       	add	r25, r24
    23d2:	82 2f       	mov	r24, r18
    23d4:	69 2f       	mov	r22, r25
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    23dc:	0d c0       	rjmp	.+26     	; 0x23f8 <_7SEGMENT_u8ShowNumber+0x1aa>
						}
						else
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_HIGH);
    23de:	eb 81       	ldd	r30, Y+3	; 0x03
    23e0:	fc 81       	ldd	r31, Y+4	; 0x04
    23e2:	20 81       	ld	r18, Z
    23e4:	eb 81       	ldd	r30, Y+3	; 0x03
    23e6:	fc 81       	ldd	r31, Y+4	; 0x04
    23e8:	95 81       	ldd	r25, Z+5	; 0x05
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	98 0f       	add	r25, r24
    23ee:	82 2f       	mov	r24, r18
    23f0:	69 2f       	mov	r22, r25
    23f2:	41 e0       	ldi	r20, 0x01	; 1
    23f4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
					}
					break;
					case _7SEGMENT_u8COMMONANODE:

					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
					for (i = 0; i < 4; i++)
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	8f 5f       	subi	r24, 0xFF	; 255
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	84 30       	cpi	r24, 0x04	; 4
    2402:	6c f2       	brlt	.-102    	; 0x239e <_7SEGMENT_u8ShowNumber+0x150>
    2404:	4d c0       	rjmp	.+154    	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>


			}
			else
			{
				local_u8error=1;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	8a 83       	std	Y+2, r24	; 0x02
    240a:	4a c0       	rjmp	.+148    	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
			}
			break;
			case _7SEGMENT_u8Nodecoder:
			switch (_7SEGMENT->_7SEGMENT_u8commontype)
    240c:	eb 81       	ldd	r30, Y+3	; 0x03
    240e:	fc 81       	ldd	r31, Y+4	; 0x04
    2410:	83 81       	ldd	r24, Z+3	; 0x03
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	3f 83       	std	Y+7, r19	; 0x07
    2418:	2e 83       	std	Y+6, r18	; 0x06
    241a:	4e 81       	ldd	r20, Y+6	; 0x06
    241c:	5f 81       	ldd	r21, Y+7	; 0x07
    241e:	41 15       	cp	r20, r1
    2420:	51 05       	cpc	r21, r1
    2422:	f1 f0       	breq	.+60     	; 0x2460 <_7SEGMENT_u8ShowNumber+0x212>
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	9f 81       	ldd	r25, Y+7	; 0x07
    2428:	81 30       	cpi	r24, 0x01	; 1
    242a:	91 05       	cpc	r25, r1
    242c:	c9 f5       	brne	.+114    	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
			{
				case _7SEGMENT_u8COMMONCATHODE:
				DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    242e:	eb 81       	ldd	r30, Y+3	; 0x03
    2430:	fc 81       	ldd	r31, Y+4	; 0x04
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	eb 81       	ldd	r30, Y+3	; 0x03
    2436:	fc 81       	ldd	r31, Y+4	; 0x04
    2438:	92 81       	ldd	r25, Z+2	; 0x02
    243a:	69 2f       	mov	r22, r25
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
				DIO_SetPortValue(_7SEGMENT->_7SEGMENT_u8port, _7SEGMENTNUM[copy_u8number]);
    2442:	eb 81       	ldd	r30, Y+3	; 0x03
    2444:	fc 81       	ldd	r31, Y+4	; 0x04
    2446:	20 81       	ld	r18, Z
    2448:	8d 81       	ldd	r24, Y+5	; 0x05
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	fc 01       	movw	r30, r24
    2450:	ec 57       	subi	r30, 0x7C	; 124
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	90 81       	ld	r25, Z
    2456:	82 2f       	mov	r24, r18
    2458:	69 2f       	mov	r22, r25
    245a:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>
    245e:	20 c0       	rjmp	.+64     	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
				break;
				case _7SEGMENT_u8COMMONANODE:
				DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    2460:	eb 81       	ldd	r30, Y+3	; 0x03
    2462:	fc 81       	ldd	r31, Y+4	; 0x04
    2464:	81 81       	ldd	r24, Z+1	; 0x01
    2466:	eb 81       	ldd	r30, Y+3	; 0x03
    2468:	fc 81       	ldd	r31, Y+4	; 0x04
    246a:	92 81       	ldd	r25, Z+2	; 0x02
    246c:	69 2f       	mov	r22, r25
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
				DIO_SetPortValue(_7SEGMENT->_7SEGMENT_u8port, ~(_7SEGMENTNUM[copy_u8number]));
    2474:	eb 81       	ldd	r30, Y+3	; 0x03
    2476:	fc 81       	ldd	r31, Y+4	; 0x04
    2478:	20 81       	ld	r18, Z
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	fc 01       	movw	r30, r24
    2482:	ec 57       	subi	r30, 0x7C	; 124
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	80 81       	ld	r24, Z
    2488:	98 2f       	mov	r25, r24
    248a:	90 95       	com	r25
    248c:	82 2f       	mov	r24, r18
    248e:	69 2f       	mov	r22, r25
    2490:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>
    2494:	05 c0       	rjmp	.+10     	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
				break;
			}
			break;
			default: local_u8error = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	8a 83       	std	Y+2, r24	; 0x02
    249a:	02 c0       	rjmp	.+4      	; 0x24a0 <_7SEGMENT_u8ShowNumber+0x252>
		}
	}
	else
	{
		local_u8error = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8error;
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24a2:	2b 96       	adiw	r28, 0x0b	; 11
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <_7SEGMENT_u8HideNumber>:
*
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8HideNumber(const _7SEGMENT_T  *_7SEGMENT)
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <_7SEGMENT_u8HideNumber+0x6>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <_7SEGMENT_u8HideNumber+0x8>
    24bc:	0f 92       	push	r0
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	9b 83       	std	Y+3, r25	; 0x03
    24c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;
    24c6:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2))
    24c8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ca:	9b 81       	ldd	r25, Y+3	; 0x03
    24cc:	00 97       	sbiw	r24, 0x00	; 0
    24ce:	d1 f1       	breq	.+116    	; 0x2544 <_7SEGMENT_u8HideNumber+0x90>
    24d0:	ea 81       	ldd	r30, Y+2	; 0x02
    24d2:	fb 81       	ldd	r31, Y+3	; 0x03
    24d4:	80 81       	ld	r24, Z
    24d6:	84 30       	cpi	r24, 0x04	; 4
    24d8:	a8 f5       	brcc	.+106    	; 0x2544 <_7SEGMENT_u8HideNumber+0x90>
    24da:	ea 81       	ldd	r30, Y+2	; 0x02
    24dc:	fb 81       	ldd	r31, Y+3	; 0x03
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	87 30       	cpi	r24, 0x07	; 7
    24e2:	80 f5       	brcc	.+96     	; 0x2544 <_7SEGMENT_u8HideNumber+0x90>
    24e4:	ea 81       	ldd	r30, Y+2	; 0x02
    24e6:	fb 81       	ldd	r31, Y+3	; 0x03
    24e8:	81 81       	ldd	r24, Z+1	; 0x01
    24ea:	84 30       	cpi	r24, 0x04	; 4
    24ec:	58 f5       	brcc	.+86     	; 0x2544 <_7SEGMENT_u8HideNumber+0x90>
    24ee:	ea 81       	ldd	r30, Y+2	; 0x02
    24f0:	fb 81       	ldd	r31, Y+3	; 0x03
    24f2:	83 81       	ldd	r24, Z+3	; 0x03
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	30 f5       	brcc	.+76     	; 0x2544 <_7SEGMENT_u8HideNumber+0x90>
	{
		switch (_7SEGMENT->_7SEGMENT_u8commontype)
    24f8:	ea 81       	ldd	r30, Y+2	; 0x02
    24fa:	fb 81       	ldd	r31, Y+3	; 0x03
    24fc:	83 81       	ldd	r24, Z+3	; 0x03
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3d 83       	std	Y+5, r19	; 0x05
    2504:	2c 83       	std	Y+4, r18	; 0x04
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	9d 81       	ldd	r25, Y+5	; 0x05
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	81 f0       	breq	.+32     	; 0x252e <_7SEGMENT_u8HideNumber+0x7a>
    250e:	2c 81       	ldd	r18, Y+4	; 0x04
    2510:	3d 81       	ldd	r19, Y+5	; 0x05
    2512:	21 30       	cpi	r18, 0x01	; 1
    2514:	31 05       	cpc	r19, r1
    2516:	c1 f4       	brne	.+48     	; 0x2548 <_7SEGMENT_u8HideNumber+0x94>
		{
			case _7SEGMENT_u8COMMONCATHODE:
			DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    2518:	ea 81       	ldd	r30, Y+2	; 0x02
    251a:	fb 81       	ldd	r31, Y+3	; 0x03
    251c:	81 81       	ldd	r24, Z+1	; 0x01
    251e:	ea 81       	ldd	r30, Y+2	; 0x02
    2520:	fb 81       	ldd	r31, Y+3	; 0x03
    2522:	92 81       	ldd	r25, Z+2	; 0x02
    2524:	69 2f       	mov	r22, r25
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    252c:	0d c0       	rjmp	.+26     	; 0x2548 <_7SEGMENT_u8HideNumber+0x94>
			break;
			case _7SEGMENT_u8COMMONANODE:
			DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    252e:	ea 81       	ldd	r30, Y+2	; 0x02
    2530:	fb 81       	ldd	r31, Y+3	; 0x03
    2532:	81 81       	ldd	r24, Z+1	; 0x01
    2534:	ea 81       	ldd	r30, Y+2	; 0x02
    2536:	fb 81       	ldd	r31, Y+3	; 0x03
    2538:	92 81       	ldd	r25, Z+2	; 0x02
    253a:	69 2f       	mov	r22, r25
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    2542:	02 c0       	rjmp	.+4      	; 0x2548 <_7SEGMENT_u8HideNumber+0x94>

	}

	else
	{
		local_u8error = 1;
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    2548:	89 81       	ldd	r24, Y+1	; 0x01
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <_7SEGMENT_u8Initialize>:
*
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8Initialize(const _7SEGMENT_T  *_7SEGMENT)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <_7SEGMENT_u8Initialize+0x6>
    2560:	00 d0       	rcall	.+0      	; 0x2562 <_7SEGMENT_u8Initialize+0x8>
    2562:	00 d0       	rcall	.+0      	; 0x2564 <_7SEGMENT_u8Initialize+0xa>
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	9c 83       	std	Y+4, r25	; 0x04
    256a:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8error = 0;
    256c:	1a 82       	std	Y+2, r1	; 0x02
	u8 i = 0;
    256e:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2) )
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	00 97       	sbiw	r24, 0x00	; 0
    2576:	09 f4       	brne	.+2      	; 0x257a <_7SEGMENT_u8Initialize+0x20>
    2578:	64 c0       	rjmp	.+200    	; 0x2642 <_7SEGMENT_u8Initialize+0xe8>
    257a:	eb 81       	ldd	r30, Y+3	; 0x03
    257c:	fc 81       	ldd	r31, Y+4	; 0x04
    257e:	80 81       	ld	r24, Z
    2580:	84 30       	cpi	r24, 0x04	; 4
    2582:	08 f0       	brcs	.+2      	; 0x2586 <_7SEGMENT_u8Initialize+0x2c>
    2584:	5e c0       	rjmp	.+188    	; 0x2642 <_7SEGMENT_u8Initialize+0xe8>
    2586:	eb 81       	ldd	r30, Y+3	; 0x03
    2588:	fc 81       	ldd	r31, Y+4	; 0x04
    258a:	82 81       	ldd	r24, Z+2	; 0x02
    258c:	87 30       	cpi	r24, 0x07	; 7
    258e:	08 f0       	brcs	.+2      	; 0x2592 <_7SEGMENT_u8Initialize+0x38>
    2590:	58 c0       	rjmp	.+176    	; 0x2642 <_7SEGMENT_u8Initialize+0xe8>
    2592:	eb 81       	ldd	r30, Y+3	; 0x03
    2594:	fc 81       	ldd	r31, Y+4	; 0x04
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	84 30       	cpi	r24, 0x04	; 4
    259a:	08 f0       	brcs	.+2      	; 0x259e <_7SEGMENT_u8Initialize+0x44>
    259c:	52 c0       	rjmp	.+164    	; 0x2642 <_7SEGMENT_u8Initialize+0xe8>
    259e:	eb 81       	ldd	r30, Y+3	; 0x03
    25a0:	fc 81       	ldd	r31, Y+4	; 0x04
    25a2:	83 81       	ldd	r24, Z+3	; 0x03
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	08 f0       	brcs	.+2      	; 0x25aa <_7SEGMENT_u8Initialize+0x50>
    25a8:	4c c0       	rjmp	.+152    	; 0x2642 <_7SEGMENT_u8Initialize+0xe8>
	{
		switch (_7SEGMENT->_7SEGMENT_u8Decoders)
    25aa:	eb 81       	ldd	r30, Y+3	; 0x03
    25ac:	fc 81       	ldd	r31, Y+4	; 0x04
    25ae:	84 81       	ldd	r24, Z+4	; 0x04
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	3e 83       	std	Y+6, r19	; 0x06
    25b6:	2d 83       	std	Y+5, r18	; 0x05
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f1       	breq	.+90     	; 0x261a <_7SEGMENT_u8Initialize+0xc0>
    25c0:	2d 81       	ldd	r18, Y+5	; 0x05
    25c2:	3e 81       	ldd	r19, Y+6	; 0x06
    25c4:	21 30       	cpi	r18, 0x01	; 1
    25c6:	31 05       	cpc	r19, r1
    25c8:	c9 f5       	brne	.+114    	; 0x263c <_7SEGMENT_u8Initialize+0xe2>
		{

			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
    25ca:	eb 81       	ldd	r30, Y+3	; 0x03
    25cc:	fc 81       	ldd	r31, Y+4	; 0x04
    25ce:	85 81       	ldd	r24, Z+5	; 0x05
    25d0:	85 30       	cpi	r24, 0x05	; 5
    25d2:	00 f5       	brcc	.+64     	; 0x2614 <_7SEGMENT_u8Initialize+0xba>
			{
				for (i = 0; i < 4; i++)
    25d4:	19 82       	std	Y+1, r1	; 0x01
    25d6:	10 c0       	rjmp	.+32     	; 0x25f8 <_7SEGMENT_u8Initialize+0x9e>
				{
					DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_OUTPUT);
    25d8:	eb 81       	ldd	r30, Y+3	; 0x03
    25da:	fc 81       	ldd	r31, Y+4	; 0x04
    25dc:	20 81       	ld	r18, Z
    25de:	eb 81       	ldd	r30, Y+3	; 0x03
    25e0:	fc 81       	ldd	r31, Y+4	; 0x04
    25e2:	95 81       	ldd	r25, Z+5	; 0x05
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	98 0f       	add	r25, r24
    25e8:	82 2f       	mov	r24, r18
    25ea:	69 2f       	mov	r22, r25
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
		{

			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
			{
				for (i = 0; i < 4; i++)
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	89 83       	std	Y+1, r24	; 0x01
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	84 30       	cpi	r24, 0x04	; 4
    25fc:	68 f3       	brcs	.-38     	; 0x25d8 <_7SEGMENT_u8Initialize+0x7e>
				{
					DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_OUTPUT);
				}
				DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_OUTPUT);
    25fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2600:	fc 81       	ldd	r31, Y+4	; 0x04
    2602:	81 81       	ldd	r24, Z+1	; 0x01
    2604:	eb 81       	ldd	r30, Y+3	; 0x03
    2606:	fc 81       	ldd	r31, Y+4	; 0x04
    2608:	92 81       	ldd	r25, Z+2	; 0x02
    260a:	69 2f       	mov	r22, r25
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
    2612:	19 c0       	rjmp	.+50     	; 0x2646 <_7SEGMENT_u8Initialize+0xec>

			}
			else
			{
				local_u8error=1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	8a 83       	std	Y+2, r24	; 0x02
    2618:	16 c0       	rjmp	.+44     	; 0x2646 <_7SEGMENT_u8Initialize+0xec>
			}

			break;
			case _7SEGMENT_u8Nodecoder:

			DIO_SetPortDirection(_7SEGMENT->_7SEGMENT_u8port, DIO_u8PORT_OUTPUT);
    261a:	eb 81       	ldd	r30, Y+3	; 0x03
    261c:	fc 81       	ldd	r31, Y+4	; 0x04
    261e:	80 81       	ld	r24, Z
    2620:	6f ef       	ldi	r22, 0xFF	; 255
    2622:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_SetPortDirection>
			DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_OUTPUT);
    2626:	eb 81       	ldd	r30, Y+3	; 0x03
    2628:	fc 81       	ldd	r31, Y+4	; 0x04
    262a:	81 81       	ldd	r24, Z+1	; 0x01
    262c:	eb 81       	ldd	r30, Y+3	; 0x03
    262e:	fc 81       	ldd	r31, Y+4	; 0x04
    2630:	92 81       	ldd	r25, Z+2	; 0x02
    2632:	69 2f       	mov	r22, r25
    2634:	41 e0       	ldi	r20, 0x01	; 1
    2636:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
    263a:	05 c0       	rjmp	.+10     	; 0x2646 <_7SEGMENT_u8Initialize+0xec>

			break;
			default:
			local_u8error = 1;
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	8a 83       	std	Y+2, r24	; 0x02
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <_7SEGMENT_u8Initialize+0xec>
		}
	}

	else
	{
		local_u8error = 1;
    2642:	81 e0       	ldi	r24, 0x01	; 1
    2644:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_u8error;
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2648:	26 96       	adiw	r28, 0x06	; 6
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <main>:
#include "../../../MCAL/ADC/ADC_interface.h"
#include "../../../Hall/CLCD/CLCD_interface.h"
#include <util/delay.h>

void main(void)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	61 97       	sbiw	r28, 0x11	; 17
    2664:	0f b6       	in	r0, 0x3f	; 63
    2666:	f8 94       	cli
    2668:	de bf       	out	0x3e, r29	; 62
    266a:	0f be       	out	0x3f, r0	; 63
    266c:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    266e:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	CLCD_voidInit();
    2672:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <CLCD_voidInit>
	CLCD_voidSendString("ABD");
    2676:	80 e6       	ldi	r24, 0x60	; 96
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <CLCD_voidSendString>
	ADC_voidInit();
    267e:	0e 94 4e 0a 	call	0x149c	; 0x149c <ADC_voidInit>
	u8 local_u8ADCReading;
	u16 millivolt;
	while(1)
	{

		local_u8ADCReading=ADC_GetChannelReading(0);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ADC_GetChannelReading>
    2688:	89 8b       	std	Y+17, r24	; 0x11
		millivolt=(u16)((u32)local_u8ADCReading*5000UL)/256UL;
    268a:	89 89       	ldd	r24, Y+17	; 0x11
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	28 e8       	ldi	r18, 0x88	; 136
    2696:	33 e1       	ldi	r19, 0x13	; 19
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	bc 01       	movw	r22, r24
    269e:	cd 01       	movw	r24, r26
    26a0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <__mulsi3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	89 2f       	mov	r24, r25
    26aa:	99 27       	eor	r25, r25
    26ac:	98 8b       	std	Y+16, r25	; 0x10
    26ae:	8f 87       	std	Y+15, r24	; 0x0f
		CLCD_voidDisplayNumber(millivolt/10);
    26b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b2:	98 89       	ldd	r25, Y+16	; 0x10
    26b4:	2a e0       	ldi	r18, 0x0A	; 10
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	b9 01       	movw	r22, r18
    26ba:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__udivmodhi4>
    26be:	cb 01       	movw	r24, r22
    26c0:	cc 01       	movw	r24, r24
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <CLCD_voidDisplayNumber>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	aa ef       	ldi	r26, 0xFA	; 250
    26d4:	b3 e4       	ldi	r27, 0x43	; 67
    26d6:	8b 87       	std	Y+11, r24	; 0x0b
    26d8:	9c 87       	std	Y+12, r25	; 0x0c
    26da:	ad 87       	std	Y+13, r26	; 0x0d
    26dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26de:	6b 85       	ldd	r22, Y+11	; 0x0b
    26e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	4a e7       	ldi	r20, 0x7A	; 122
    26ec:	53 e4       	ldi	r21, 0x43	; 67
    26ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	8f 83       	std	Y+7, r24	; 0x07
    26f8:	98 87       	std	Y+8, r25	; 0x08
    26fa:	a9 87       	std	Y+9, r26	; 0x09
    26fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2700:	78 85       	ldd	r23, Y+8	; 0x08
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	9a 85       	ldd	r25, Y+10	; 0x0a
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e8       	ldi	r20, 0x80	; 128
    270c:	5f e3       	ldi	r21, 0x3F	; 63
    270e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2712:	88 23       	and	r24, r24
    2714:	2c f4       	brge	.+10     	; 0x2720 <main+0xc6>
		__ticks = 1;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9e 83       	std	Y+6, r25	; 0x06
    271c:	8d 83       	std	Y+5, r24	; 0x05
    271e:	3f c0       	rjmp	.+126    	; 0x279e <main+0x144>
	else if (__tmp > 65535)
    2720:	6f 81       	ldd	r22, Y+7	; 0x07
    2722:	78 85       	ldd	r23, Y+8	; 0x08
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	57 e4       	ldi	r21, 0x47	; 71
    2730:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	4c f5       	brge	.+82     	; 0x278a <main+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2738:	6b 85       	ldd	r22, Y+11	; 0x0b
    273a:	7c 85       	ldd	r23, Y+12	; 0x0c
    273c:	8d 85       	ldd	r24, Y+13	; 0x0d
    273e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <main+0x126>
    2762:	89 e1       	ldi	r24, 0x19	; 25
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <main+0x114>
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	9e 81       	ldd	r25, Y+6	; 0x06
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	69 f7       	brne	.-38     	; 0x2762 <main+0x108>
    2788:	14 c0       	rjmp	.+40     	; 0x27b2 <main+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278a:	6f 81       	ldd	r22, Y+7	; 0x07
    278c:	78 85       	ldd	r23, Y+8	; 0x08
    278e:	89 85       	ldd	r24, Y+9	; 0x09
    2790:	9a 85       	ldd	r25, Y+10	; 0x0a
    2792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	9e 83       	std	Y+6, r25	; 0x06
    279c:	8d 83       	std	Y+5, r24	; 0x05
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	9a 83       	std	Y+2, r25	; 0x02
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	9a 81       	ldd	r25, Y+2	; 0x02
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <main+0x150>
    27ae:	9a 83       	std	Y+2, r25	; 0x02
    27b0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		CLCD_voidClearLCD();
    27b2:	0e 94 1d 11 	call	0x223a	; 0x223a <CLCD_voidClearLCD>
    27b6:	65 cf       	rjmp	.-310    	; 0x2682 <main+0x28>

000027b8 <__mulsi3>:
    27b8:	62 9f       	mul	r22, r18
    27ba:	d0 01       	movw	r26, r0
    27bc:	73 9f       	mul	r23, r19
    27be:	f0 01       	movw	r30, r0
    27c0:	82 9f       	mul	r24, r18
    27c2:	e0 0d       	add	r30, r0
    27c4:	f1 1d       	adc	r31, r1
    27c6:	64 9f       	mul	r22, r20
    27c8:	e0 0d       	add	r30, r0
    27ca:	f1 1d       	adc	r31, r1
    27cc:	92 9f       	mul	r25, r18
    27ce:	f0 0d       	add	r31, r0
    27d0:	83 9f       	mul	r24, r19
    27d2:	f0 0d       	add	r31, r0
    27d4:	74 9f       	mul	r23, r20
    27d6:	f0 0d       	add	r31, r0
    27d8:	65 9f       	mul	r22, r21
    27da:	f0 0d       	add	r31, r0
    27dc:	99 27       	eor	r25, r25
    27de:	72 9f       	mul	r23, r18
    27e0:	b0 0d       	add	r27, r0
    27e2:	e1 1d       	adc	r30, r1
    27e4:	f9 1f       	adc	r31, r25
    27e6:	63 9f       	mul	r22, r19
    27e8:	b0 0d       	add	r27, r0
    27ea:	e1 1d       	adc	r30, r1
    27ec:	f9 1f       	adc	r31, r25
    27ee:	bd 01       	movw	r22, r26
    27f0:	cf 01       	movw	r24, r30
    27f2:	11 24       	eor	r1, r1
    27f4:	08 95       	ret

000027f6 <__udivmodhi4>:
    27f6:	aa 1b       	sub	r26, r26
    27f8:	bb 1b       	sub	r27, r27
    27fa:	51 e1       	ldi	r21, 0x11	; 17
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <__udivmodhi4_ep>

000027fe <__udivmodhi4_loop>:
    27fe:	aa 1f       	adc	r26, r26
    2800:	bb 1f       	adc	r27, r27
    2802:	a6 17       	cp	r26, r22
    2804:	b7 07       	cpc	r27, r23
    2806:	10 f0       	brcs	.+4      	; 0x280c <__udivmodhi4_ep>
    2808:	a6 1b       	sub	r26, r22
    280a:	b7 0b       	sbc	r27, r23

0000280c <__udivmodhi4_ep>:
    280c:	88 1f       	adc	r24, r24
    280e:	99 1f       	adc	r25, r25
    2810:	5a 95       	dec	r21
    2812:	a9 f7       	brne	.-22     	; 0x27fe <__udivmodhi4_loop>
    2814:	80 95       	com	r24
    2816:	90 95       	com	r25
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	08 95       	ret

0000281e <__udivmodsi4>:
    281e:	a1 e2       	ldi	r26, 0x21	; 33
    2820:	1a 2e       	mov	r1, r26
    2822:	aa 1b       	sub	r26, r26
    2824:	bb 1b       	sub	r27, r27
    2826:	fd 01       	movw	r30, r26
    2828:	0d c0       	rjmp	.+26     	; 0x2844 <__udivmodsi4_ep>

0000282a <__udivmodsi4_loop>:
    282a:	aa 1f       	adc	r26, r26
    282c:	bb 1f       	adc	r27, r27
    282e:	ee 1f       	adc	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	a2 17       	cp	r26, r18
    2834:	b3 07       	cpc	r27, r19
    2836:	e4 07       	cpc	r30, r20
    2838:	f5 07       	cpc	r31, r21
    283a:	20 f0       	brcs	.+8      	; 0x2844 <__udivmodsi4_ep>
    283c:	a2 1b       	sub	r26, r18
    283e:	b3 0b       	sbc	r27, r19
    2840:	e4 0b       	sbc	r30, r20
    2842:	f5 0b       	sbc	r31, r21

00002844 <__udivmodsi4_ep>:
    2844:	66 1f       	adc	r22, r22
    2846:	77 1f       	adc	r23, r23
    2848:	88 1f       	adc	r24, r24
    284a:	99 1f       	adc	r25, r25
    284c:	1a 94       	dec	r1
    284e:	69 f7       	brne	.-38     	; 0x282a <__udivmodsi4_loop>
    2850:	60 95       	com	r22
    2852:	70 95       	com	r23
    2854:	80 95       	com	r24
    2856:	90 95       	com	r25
    2858:	9b 01       	movw	r18, r22
    285a:	ac 01       	movw	r20, r24
    285c:	bd 01       	movw	r22, r26
    285e:	cf 01       	movw	r24, r30
    2860:	08 95       	ret

00002862 <__prologue_saves__>:
    2862:	2f 92       	push	r2
    2864:	3f 92       	push	r3
    2866:	4f 92       	push	r4
    2868:	5f 92       	push	r5
    286a:	6f 92       	push	r6
    286c:	7f 92       	push	r7
    286e:	8f 92       	push	r8
    2870:	9f 92       	push	r9
    2872:	af 92       	push	r10
    2874:	bf 92       	push	r11
    2876:	cf 92       	push	r12
    2878:	df 92       	push	r13
    287a:	ef 92       	push	r14
    287c:	ff 92       	push	r15
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	cd b7       	in	r28, 0x3d	; 61
    2888:	de b7       	in	r29, 0x3e	; 62
    288a:	ca 1b       	sub	r28, r26
    288c:	db 0b       	sbc	r29, r27
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	09 94       	ijmp

0000289a <__epilogue_restores__>:
    289a:	2a 88       	ldd	r2, Y+18	; 0x12
    289c:	39 88       	ldd	r3, Y+17	; 0x11
    289e:	48 88       	ldd	r4, Y+16	; 0x10
    28a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    28a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    28a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    28a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    28a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    28aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    28ac:	b9 84       	ldd	r11, Y+9	; 0x09
    28ae:	c8 84       	ldd	r12, Y+8	; 0x08
    28b0:	df 80       	ldd	r13, Y+7	; 0x07
    28b2:	ee 80       	ldd	r14, Y+6	; 0x06
    28b4:	fd 80       	ldd	r15, Y+5	; 0x05
    28b6:	0c 81       	ldd	r16, Y+4	; 0x04
    28b8:	1b 81       	ldd	r17, Y+3	; 0x03
    28ba:	aa 81       	ldd	r26, Y+2	; 0x02
    28bc:	b9 81       	ldd	r27, Y+1	; 0x01
    28be:	ce 0f       	add	r28, r30
    28c0:	d1 1d       	adc	r29, r1
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	ed 01       	movw	r28, r26
    28ce:	08 95       	ret

000028d0 <_exit>:
    28d0:	f8 94       	cli

000028d2 <__stop_program>:
    28d2:	ff cf       	rjmp	.-2      	; 0x28d2 <__stop_program>
