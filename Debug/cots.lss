
cots.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000031d6  0000326a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000de  008000de  000032e8  2**0
                  ALLOC
  3 .stab         00003c00  00000000  00000000  000032e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015b4  00000000  00000000  00006ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000849c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000085dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000874c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c030  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c41d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_1>
       8:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__vector_2>
       c:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3d       	cpi	r26, 0xDE	; 222
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ed       	ldi	r26, 0xDE	; 222
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3e       	cpi	r26, 0xEA	; 234
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 18 	call	0x30ea	; 0x30ea <main>
      8a:	0c 94 e9 18 	jmp	0x31d2	; 0x31d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 eb       	ldi	r26, 0xB2	; 178
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 eb       	ldi	r24, 0xB2	; 178
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 be 18 	jmp	0x317c	; 0x317c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	DDRD=PORTD_DIR;
     b64:	e1 e3       	ldi	r30, 0x31	; 49
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	80 83       	st	Z, r24

	PORTA=PORTA_INIT_VALUE;
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	PORTB=PORTB_INIT_VALUE;
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTD=PORTD_INIT_VALUE;
     b78:	e2 e3       	ldi	r30, 0x32	; 50
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	80 83       	st	Z, r24
	PORTD=PORTC_INIT_VALUE;
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <GIE_voidEnable>:
#include "../../lib/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     b94:	af e5       	ldi	r26, 0x5F	; 95
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ef e5       	ldi	r30, 0x5F	; 95
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     bb0:	af e5       	ldi	r26, 0x5F	; 95
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e5       	ldi	r30, 0x5F	; 95
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <EXTI_voidInt0Init>:
/*Global pointer to function to hold int2 ISR address */

void (*EXTI_pvInt2Func)(void)=NULL;

void EXTI_voidInt0Init(void)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
#elif INT0_SENSE == on_change
	SET_BIT(MCUCR,MCUCR_ISC00);
	CLR_BIT(MCUCR,MCUCR_ISC01);

#elif INT0_SENSE == falling_edge
	CLR_BIT(MCUCR,MCUCR_ISC00);
     bcc:	a5 e5       	ldi	r26, 0x55	; 85
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e5 e5       	ldi	r30, 0x55	; 85
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC01);
     bda:	a5 e5       	ldi	r26, 0x55	; 85
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e5 e5       	ldi	r30, 0x55	; 85
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE confg option"
#endif

	/*peripheral interrupt enable for int0 */
#if INT0_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
     be8:	ab e5       	ldi	r26, 0x5B	; 91
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	eb e5       	ldi	r30, 0x5B	; 91
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 64       	ori	r24, 0x40	; 64
     bf4:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong INT0_INITIAL_STATE option"
#endif
}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <EXTI_voidInt1Init>:
void EXTI_voidInt1Init(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
#elif INT1_SENSE == on_change
	SET_BIT(MCUCR,MCUCR_ISC10);
	CLR_BIT(MCUCR,MCUCR_ISC11);

#elif INT1_SENSE == falling_edge
	CLR_BIT(MCUCR,MCUCR_ISC10);
     c04:	a5 e5       	ldi	r26, 0x55	; 85
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e5 e5       	ldi	r30, 0x55	; 85
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8b 7f       	andi	r24, 0xFB	; 251
     c10:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC11);
     c12:	a5 e5       	ldi	r26, 0x55	; 85
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e5 e5       	ldi	r30, 0x55	; 85
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	88 60       	ori	r24, 0x08	; 8
     c1e:	8c 93       	st	X, r24
#error "Wrong INT0_SENSE confg option"
#endif

	/*peripheral interrupt enable for int0 */
#if INT1_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT1);
     c20:	ab e5       	ldi	r26, 0x5B	; 91
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	eb e5       	ldi	r30, 0x5B	; 91
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	80 68       	ori	r24, 0x80	; 128
     c2c:	8c 93       	st	X, r24
#elif INT1_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
#else
#error "Wrong INT1_INITIAL_STATE option"
#endif
}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <EXTI_voidInt2Init>:
void EXTI_voidInt2Init(void)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
#if INT2_SENSE == falling_edge
	CLR_BIT(MCUCSR,MCUCSR_INT2);
     c3c:	a4 e5       	ldi	r26, 0x54	; 84
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e4 e5       	ldi	r30, 0x54	; 84
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8f 7b       	andi	r24, 0xBF	; 191
     c48:	8c 93       	st	X, r24

	/*peripheral interrupt enable for int0 */
#if INT2_INITIAL_STATE == ENABLED
	SET_BIT(GICR,GICR_INT0);
#elif INT2_INITIAL_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
     c4a:	ab e5       	ldi	r26, 0x5B	; 91
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e5       	ldi	r30, 0x5B	; 91
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8f 7b       	andi	r24, 0xBF	; 191
     c56:	8c 93       	st	X, r24
#else
#error "Wrong INT1_INITIAL_STATE option"
#endif
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <EXTI_u8INT0Setcallback>:
u8 EXTI_u8INT0Setcallback(void(*Copy_pvInt0func)(void))
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <EXTI_u8INT0Setcallback+0x6>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	9b 83       	std	Y+3, r25	; 0x03
     c6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     c6e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0func != NULL)
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	39 f0       	breq	.+14     	; 0xc86 <EXTI_u8INT0Setcallback+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0func;
     c78:	8a 81       	ldd	r24, Y+2	; 0x02
     c7a:	9b 81       	ldd	r25, Y+3	; 0x03
     c7c:	90 93 df 00 	sts	0x00DF, r25
     c80:	80 93 de 00 	sts	0x00DE, r24
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <EXTI_u8INT0Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <EXTI_u8INT1Setcallback>:
u8 EXTI_u8INT1Setcallback(void(*Copy_pvInt1func)(void))
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <EXTI_u8INT1Setcallback+0x6>
     c9e:	0f 92       	push	r0
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	9b 83       	std	Y+3, r25	; 0x03
     ca6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errorstatus=OK;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1func != NULL)
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	39 f0       	breq	.+14     	; 0xcc0 <EXTI_u8INT1Setcallback+0x28>
	{
		EXTI_pvInt1Func=Copy_pvInt1func;
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	9b 81       	ldd	r25, Y+3	; 0x03
     cb6:	90 93 e1 00 	sts	0x00E1, r25
     cba:	80 93 e0 00 	sts	0x00E0, r24
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <EXTI_u8INT1Setcallback+0x2c>
	}
	else
	{
		Local_u8errorstatus=NULL_POINTER;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errorstatus;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	cf 91       	pop	r28
     cce:	df 91       	pop	r29
     cd0:	08 95       	ret

00000cd2 <__vector_1>:
/*INT0 ISR*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
     cfc:	80 91 de 00 	lds	r24, 0x00DE
     d00:	90 91 df 00 	lds	r25, 0x00DF
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	29 f0       	breq	.+10     	; 0xd12 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
     d08:	e0 91 de 00 	lds	r30, 0x00DE
     d0c:	f0 91 df 00 	lds	r31, 0x00DF
     d10:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	ff 91       	pop	r31
     d18:	ef 91       	pop	r30
     d1a:	bf 91       	pop	r27
     d1c:	af 91       	pop	r26
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	7f 91       	pop	r23
     d24:	6f 91       	pop	r22
     d26:	5f 91       	pop	r21
     d28:	4f 91       	pop	r20
     d2a:	3f 91       	pop	r19
     d2c:	2f 91       	pop	r18
     d2e:	0f 90       	pop	r0
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	0f 90       	pop	r0
     d34:	1f 90       	pop	r1
     d36:	18 95       	reti

00000d38 <__vector_2>:
/*INT1 ISR*/
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void)
{
     d38:	1f 92       	push	r1
     d3a:	0f 92       	push	r0
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	0f 92       	push	r0
     d40:	11 24       	eor	r1, r1
     d42:	2f 93       	push	r18
     d44:	3f 93       	push	r19
     d46:	4f 93       	push	r20
     d48:	5f 93       	push	r21
     d4a:	6f 93       	push	r22
     d4c:	7f 93       	push	r23
     d4e:	8f 93       	push	r24
     d50:	9f 93       	push	r25
     d52:	af 93       	push	r26
     d54:	bf 93       	push	r27
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt1Func!=NULL)
     d62:	80 91 e0 00 	lds	r24, 0x00E0
     d66:	90 91 e1 00 	lds	r25, 0x00E1
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	29 f0       	breq	.+10     	; 0xd78 <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
     d6e:	e0 91 e0 00 	lds	r30, 0x00E0
     d72:	f0 91 e1 00 	lds	r31, 0x00E1
     d76:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	ff 91       	pop	r31
     d7e:	ef 91       	pop	r30
     d80:	bf 91       	pop	r27
     d82:	af 91       	pop	r26
     d84:	9f 91       	pop	r25
     d86:	8f 91       	pop	r24
     d88:	7f 91       	pop	r23
     d8a:	6f 91       	pop	r22
     d8c:	5f 91       	pop	r21
     d8e:	4f 91       	pop	r20
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti

00000d9e <__vector_3>:
/*INT2 ISR*/
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void)
{
     d9e:	1f 92       	push	r1
     da0:	0f 92       	push	r0
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	0f 92       	push	r0
     da6:	11 24       	eor	r1, r1
     da8:	2f 93       	push	r18
     daa:	3f 93       	push	r19
     dac:	4f 93       	push	r20
     dae:	5f 93       	push	r21
     db0:	6f 93       	push	r22
     db2:	7f 93       	push	r23
     db4:	8f 93       	push	r24
     db6:	9f 93       	push	r25
     db8:	af 93       	push	r26
     dba:	bf 93       	push	r27
     dbc:	ef 93       	push	r30
     dbe:	ff 93       	push	r31
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt2Func!=NULL)
     dc8:	80 91 e2 00 	lds	r24, 0x00E2
     dcc:	90 91 e3 00 	lds	r25, 0x00E3
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	29 f0       	breq	.+10     	; 0xdde <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
     dd4:	e0 91 e2 00 	lds	r30, 0x00E2
     dd8:	f0 91 e3 00 	lds	r31, 0x00E3
     ddc:	09 95       	icall
	}
	else
	{
		/* Do Nothing*/
	}
}
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <DIO_SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"


u8 DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	28 97       	sbiw	r28, 0x08	; 8
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	8a 83       	std	Y+2, r24	; 0x02
     e1a:	6b 83       	std	Y+3, r22	; 0x03
     e1c:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
     e1e:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
     e20:	8b 81       	ldd	r24, Y+3	; 0x03
     e22:	88 30       	cpi	r24, 0x08	; 8
     e24:	08 f0       	brcs	.+2      	; 0xe28 <DIO_SetPinDirection+0x24>
     e26:	f4 c0       	rjmp	.+488    	; 0x1010 <DIO_SetPinDirection+0x20c>
	{
        if(u8PinDirCopy==DIO_u8PIN_INPUT)
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	88 23       	and	r24, r24
     e2c:	09 f0       	breq	.+2      	; 0xe30 <DIO_SetPinDirection+0x2c>
     e2e:	77 c0       	rjmp	.+238    	; 0xf1e <DIO_SetPinDirection+0x11a>
        {
            switch(u8PortIdCopy)
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	38 87       	std	Y+8, r19	; 0x08
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	91 05       	cpc	r25, r1
     e42:	59 f1       	breq	.+86     	; 0xe9a <DIO_SetPinDirection+0x96>
     e44:	2f 81       	ldd	r18, Y+7	; 0x07
     e46:	38 85       	ldd	r19, Y+8	; 0x08
     e48:	22 30       	cpi	r18, 0x02	; 2
     e4a:	31 05       	cpc	r19, r1
     e4c:	2c f4       	brge	.+10     	; 0xe58 <DIO_SetPinDirection+0x54>
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	69 f0       	breq	.+26     	; 0xe70 <DIO_SetPinDirection+0x6c>
     e56:	60 c0       	rjmp	.+192    	; 0xf18 <DIO_SetPinDirection+0x114>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	22 30       	cpi	r18, 0x02	; 2
     e5e:	31 05       	cpc	r19, r1
     e60:	89 f1       	breq	.+98     	; 0xec4 <DIO_SetPinDirection+0xc0>
     e62:	8f 81       	ldd	r24, Y+7	; 0x07
     e64:	98 85       	ldd	r25, Y+8	; 0x08
     e66:	83 30       	cpi	r24, 0x03	; 3
     e68:	91 05       	cpc	r25, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <DIO_SetPinDirection+0x6a>
     e6c:	40 c0       	rjmp	.+128    	; 0xeee <DIO_SetPinDirection+0xea>
     e6e:	54 c0       	rjmp	.+168    	; 0xf18 <DIO_SetPinDirection+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(DDRA,u8PinIdCopy); break;
     e70:	aa e3       	ldi	r26, 0x3A	; 58
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	ea e3       	ldi	r30, 0x3A	; 58
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	48 2f       	mov	r20, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	02 2e       	mov	r0, r18
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <DIO_SetPinDirection+0x8a>
     e8a:	88 0f       	add	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	0a 94       	dec	r0
     e90:	e2 f7       	brpl	.-8      	; 0xe8a <DIO_SetPinDirection+0x86>
     e92:	80 95       	com	r24
     e94:	84 23       	and	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	bd c0       	rjmp	.+378    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : CLR_BIT(DDRB,u8PinIdCopy); break;
     e9a:	a7 e3       	ldi	r26, 0x37	; 55
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e7 e3       	ldi	r30, 0x37	; 55
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_SetPinDirection+0xb4>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_SetPinDirection+0xb0>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	a8 c0       	rjmp	.+336    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : CLR_BIT(DDRC,u8PinIdCopy); break;
     ec4:	a4 e3       	ldi	r26, 0x34	; 52
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e4 e3       	ldi	r30, 0x34	; 52
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_SetPinDirection+0xde>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_SetPinDirection+0xda>
     ee6:	80 95       	com	r24
     ee8:	84 23       	and	r24, r20
     eea:	8c 93       	st	X, r24
     eec:	93 c0       	rjmp	.+294    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : CLR_BIT(DDRD,u8PinIdCopy); break;
     eee:	a1 e3       	ldi	r26, 0x31	; 49
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e1 e3       	ldi	r30, 0x31	; 49
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	8b 81       	ldd	r24, Y+3	; 0x03
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	02 2e       	mov	r0, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_SetPinDirection+0x108>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	0a 94       	dec	r0
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_SetPinDirection+0x104>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
     f16:	7e c0       	rjmp	.+252    	; 0x1014 <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	7b c0       	rjmp	.+246    	; 0x1014 <DIO_SetPinDirection+0x210>
            }
        }
        else if(u8PinDirCopy==DIO_u8PIN_OUTPUT)
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <DIO_SetPinDirection+0x122>
     f24:	72 c0       	rjmp	.+228    	; 0x100a <DIO_SetPinDirection+0x206>
        {
            switch(u8PortIdCopy)
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	3e 83       	std	Y+6, r19	; 0x06
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	91 05       	cpc	r25, r1
     f38:	49 f1       	breq	.+82     	; 0xf8c <DIO_SetPinDirection+0x188>
     f3a:	2d 81       	ldd	r18, Y+5	; 0x05
     f3c:	3e 81       	ldd	r19, Y+6	; 0x06
     f3e:	22 30       	cpi	r18, 0x02	; 2
     f40:	31 05       	cpc	r19, r1
     f42:	2c f4       	brge	.+10     	; 0xf4e <DIO_SetPinDirection+0x14a>
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
     f46:	9e 81       	ldd	r25, Y+6	; 0x06
     f48:	00 97       	sbiw	r24, 0x00	; 0
     f4a:	61 f0       	breq	.+24     	; 0xf64 <DIO_SetPinDirection+0x160>
     f4c:	5b c0       	rjmp	.+182    	; 0x1004 <DIO_SetPinDirection+0x200>
     f4e:	2d 81       	ldd	r18, Y+5	; 0x05
     f50:	3e 81       	ldd	r19, Y+6	; 0x06
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	71 f1       	breq	.+92     	; 0xfb4 <DIO_SetPinDirection+0x1b0>
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	e9 f1       	breq	.+122    	; 0xfdc <DIO_SetPinDirection+0x1d8>
     f62:	50 c0       	rjmp	.+160    	; 0x1004 <DIO_SetPinDirection+0x200>
            {
			case DIO_u8PORTA : SET_BIT(DDRA,u8PinIdCopy); break;
     f64:	aa e3       	ldi	r26, 0x3A	; 58
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	ea e3       	ldi	r30, 0x3A	; 58
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_SetPinDirection+0x17e>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_SetPinDirection+0x17a>
     f86:	84 2b       	or	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	44 c0       	rjmp	.+136    	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTB : SET_BIT(DDRB,u8PinIdCopy); break;
     f8c:	a7 e3       	ldi	r26, 0x37	; 55
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e7 e3       	ldi	r30, 0x37	; 55
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_SetPinDirection+0x1a6>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_SetPinDirection+0x1a2>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	30 c0       	rjmp	.+96     	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTC : SET_BIT(DDRC,u8PinIdCopy); break;
     fb4:	a4 e3       	ldi	r26, 0x34	; 52
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e4 e3       	ldi	r30, 0x34	; 52
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_SetPinDirection+0x1ce>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_SetPinDirection+0x1ca>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	1c c0       	rjmp	.+56     	; 0x1014 <DIO_SetPinDirection+0x210>
			case DIO_u8PORTD : SET_BIT(DDRD,u8PinIdCopy); break;
     fdc:	a1 e3       	ldi	r26, 0x31	; 49
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e1 e3       	ldi	r30, 0x31	; 49
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_SetPinDirection+0x1f6>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_SetPinDirection+0x1f2>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <DIO_SetPinDirection+0x210>
            default: Local_u8ErrorState=1; break;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	89 83       	std	Y+1, r24	; 0x01
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <DIO_SetPinDirection+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_SetPinDirection+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
}
    1016:	28 96       	adiw	r28, 0x08	; 8
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <DIO_SetPortDirection>:

u8 DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <DIO_SetPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <DIO_SetPortDirection+0x8>
    1030:	0f 92       	push	r0
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    103a:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3d 83       	std	Y+5, r19	; 0x05
    1044:	2c 83       	std	Y+4, r18	; 0x04
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	91 05       	cpc	r25, r1
    104e:	d1 f0       	breq	.+52     	; 0x1084 <DIO_SetPortDirection+0x5c>
    1050:	2c 81       	ldd	r18, Y+4	; 0x04
    1052:	3d 81       	ldd	r19, Y+5	; 0x05
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <DIO_SetPortDirection+0x3c>
    105a:	8c 81       	ldd	r24, Y+4	; 0x04
    105c:	9d 81       	ldd	r25, Y+5	; 0x05
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	61 f0       	breq	.+24     	; 0x107a <DIO_SetPortDirection+0x52>
    1062:	1f c0       	rjmp	.+62     	; 0x10a2 <DIO_SetPortDirection+0x7a>
    1064:	2c 81       	ldd	r18, Y+4	; 0x04
    1066:	3d 81       	ldd	r19, Y+5	; 0x05
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	81 f0       	breq	.+32     	; 0x108e <DIO_SetPortDirection+0x66>
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	9d 81       	ldd	r25, Y+5	; 0x05
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <DIO_SetPortDirection+0x70>
    1078:	14 c0       	rjmp	.+40     	; 0x10a2 <DIO_SetPortDirection+0x7a>
    {
			case DIO_u8PORTA : DDRA = u8PortDir ; break;
    107a:	ea e3       	ldi	r30, 0x3A	; 58
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	80 83       	st	Z, r24
    1082:	11 c0       	rjmp	.+34     	; 0x10a6 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTB : DDRB = u8PortDir ; break;
    1084:	e7 e3       	ldi	r30, 0x37	; 55
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	80 83       	st	Z, r24
    108c:	0c c0       	rjmp	.+24     	; 0x10a6 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTC : DDRC = u8PortDir ; break;
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	80 83       	st	Z, r24
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <DIO_SetPortDirection+0x7e>
			case DIO_u8PORTD : DDRD = u8PortDir ; break;
    1098:	e1 e3       	ldi	r30, 0x31	; 49
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	80 83       	st	Z, r24
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_SetPortDirection+0x7e>
            default: Local_u8ErrorState=1; break;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <DIO_SetPinValue>:

u8 DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	28 97       	sbiw	r28, 0x08	; 8
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	f8 94       	cli
    10c6:	de bf       	out	0x3e, r29	; 62
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	cd bf       	out	0x3d, r28	; 61
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	6b 83       	std	Y+3, r22	; 0x03
    10d0:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    10d2:	19 82       	std	Y+1, r1	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if (u8PinIdCopy <= DIO_u8PIN7)
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	88 30       	cpi	r24, 0x08	; 8
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <DIO_SetPinValue+0x24>
    10da:	f4 c0       	rjmp	.+488    	; 0x12c4 <DIO_SetPinValue+0x20c>
	{
        if(u8PinValCopy==DIO_u8PIN_LOW)
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	88 23       	and	r24, r24
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <DIO_SetPinValue+0x2c>
    10e2:	77 c0       	rjmp	.+238    	; 0x11d2 <DIO_SetPinValue+0x11a>
        {
            switch(u8PortIdCopy)
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	38 87       	std	Y+8, r19	; 0x08
    10ec:	2f 83       	std	Y+7, r18	; 0x07
    10ee:	8f 81       	ldd	r24, Y+7	; 0x07
    10f0:	98 85       	ldd	r25, Y+8	; 0x08
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	91 05       	cpc	r25, r1
    10f6:	59 f1       	breq	.+86     	; 0x114e <DIO_SetPinValue+0x96>
    10f8:	2f 81       	ldd	r18, Y+7	; 0x07
    10fa:	38 85       	ldd	r19, Y+8	; 0x08
    10fc:	22 30       	cpi	r18, 0x02	; 2
    10fe:	31 05       	cpc	r19, r1
    1100:	2c f4       	brge	.+10     	; 0x110c <DIO_SetPinValue+0x54>
    1102:	8f 81       	ldd	r24, Y+7	; 0x07
    1104:	98 85       	ldd	r25, Y+8	; 0x08
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f0       	breq	.+26     	; 0x1124 <DIO_SetPinValue+0x6c>
    110a:	60 c0       	rjmp	.+192    	; 0x11cc <DIO_SetPinValue+0x114>
    110c:	2f 81       	ldd	r18, Y+7	; 0x07
    110e:	38 85       	ldd	r19, Y+8	; 0x08
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	89 f1       	breq	.+98     	; 0x1178 <DIO_SetPinValue+0xc0>
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <DIO_SetPinValue+0x6a>
    1120:	40 c0       	rjmp	.+128    	; 0x11a2 <DIO_SetPinValue+0xea>
    1122:	54 c0       	rjmp	.+168    	; 0x11cc <DIO_SetPinValue+0x114>
            {
			case DIO_u8PORTA : CLR_BIT(PORTA,u8PinIdCopy); break;
    1124:	ab e3       	ldi	r26, 0x3B	; 59
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	eb e3       	ldi	r30, 0x3B	; 59
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_SetPinValue+0x8a>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_SetPinValue+0x86>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	bd c0       	rjmp	.+378    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : CLR_BIT(PORTB,u8PinIdCopy); break;
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <DIO_SetPinValue+0xb4>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <DIO_SetPinValue+0xb0>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
    1176:	a8 c0       	rjmp	.+336    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : CLR_BIT(PORTC,u8PinIdCopy); break;
    1178:	a5 e3       	ldi	r26, 0x35	; 53
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	48 2f       	mov	r20, r24
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 2e       	mov	r0, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_SetPinValue+0xde>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	0a 94       	dec	r0
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_SetPinValue+0xda>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	93 c0       	rjmp	.+294    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : CLR_BIT(PORTD,u8PinIdCopy); break;
    11a2:	a2 e3       	ldi	r26, 0x32	; 50
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e2 e3       	ldi	r30, 0x32	; 50
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 2e       	mov	r0, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_SetPinValue+0x108>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	0a 94       	dec	r0
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_SetPinValue+0x104>
    11c4:	80 95       	com	r24
    11c6:	84 23       	and	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	7e c0       	rjmp	.+252    	; 0x12c8 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	7b c0       	rjmp	.+246    	; 0x12c8 <DIO_SetPinValue+0x210>
            }
        }
        else if(u8PinValCopy==DIO_u8PIN_HIGH)
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	09 f0       	breq	.+2      	; 0x11da <DIO_SetPinValue+0x122>
    11d8:	72 c0       	rjmp	.+228    	; 0x12be <DIO_SetPinValue+0x206>
        {
            switch(u8PortIdCopy)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	2d 83       	std	Y+5, r18	; 0x05
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	49 f1       	breq	.+82     	; 0x1240 <DIO_SetPinValue+0x188>
    11ee:	2d 81       	ldd	r18, Y+5	; 0x05
    11f0:	3e 81       	ldd	r19, Y+6	; 0x06
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_SetPinValue+0x14a>
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <DIO_SetPinValue+0x160>
    1200:	5b c0       	rjmp	.+182    	; 0x12b8 <DIO_SetPinValue+0x200>
    1202:	2d 81       	ldd	r18, Y+5	; 0x05
    1204:	3e 81       	ldd	r19, Y+6	; 0x06
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	71 f1       	breq	.+92     	; 0x1268 <DIO_SetPinValue+0x1b0>
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	e9 f1       	breq	.+122    	; 0x1290 <DIO_SetPinValue+0x1d8>
    1216:	50 c0       	rjmp	.+160    	; 0x12b8 <DIO_SetPinValue+0x200>
            {
			case DIO_u8PORTA : SET_BIT(PORTA,u8PinIdCopy); break;
    1218:	ab e3       	ldi	r26, 0x3B	; 59
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	eb e3       	ldi	r30, 0x3B	; 59
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 2e       	mov	r0, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_SetPinValue+0x17e>
    1232:	88 0f       	add	r24, r24
    1234:	99 1f       	adc	r25, r25
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_SetPinValue+0x17a>
    123a:	84 2b       	or	r24, r20
    123c:	8c 93       	st	X, r24
    123e:	44 c0       	rjmp	.+136    	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTB : SET_BIT(PORTB,u8PinIdCopy); break;
    1240:	a8 e3       	ldi	r26, 0x38	; 56
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e8 e3       	ldi	r30, 0x38	; 56
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_SetPinValue+0x1a6>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_SetPinValue+0x1a2>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	30 c0       	rjmp	.+96     	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTC : SET_BIT(PORTC,u8PinIdCopy); break;
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_SetPinValue+0x1ce>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_SetPinValue+0x1ca>
    128a:	84 2b       	or	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	1c c0       	rjmp	.+56     	; 0x12c8 <DIO_SetPinValue+0x210>
			case DIO_u8PORTD : SET_BIT(PORTD,u8PinIdCopy); break;
    1290:	a2 e3       	ldi	r26, 0x32	; 50
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_SetPinValue+0x1f6>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_SetPinValue+0x1f2>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <DIO_SetPinValue+0x210>
            default: Local_u8ErrorState=1; break;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	89 83       	std	Y+1, r24	; 0x01
    12bc:	05 c0       	rjmp	.+10     	; 0x12c8 <DIO_SetPinValue+0x210>
            }
        }
        else
        {
            Local_u8ErrorState=1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_SetPinValue+0x210>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	28 96       	adiw	r28, 0x08	; 8
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <DIO_SetPortValue>:

u8 DIO_SetPortValue     (u8 u8PortId, u8 u8PortVal)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <DIO_SetPortValue+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <DIO_SetPortValue+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ErrorState=0;
    12ee:	19 82       	std	Y+1, r1	; 0x01
    switch(u8PortId)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3d 83       	std	Y+5, r19	; 0x05
    12f8:	2c 83       	std	Y+4, r18	; 0x04
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	91 05       	cpc	r25, r1
    1302:	d1 f0       	breq	.+52     	; 0x1338 <DIO_SetPortValue+0x5c>
    1304:	2c 81       	ldd	r18, Y+4	; 0x04
    1306:	3d 81       	ldd	r19, Y+5	; 0x05
    1308:	22 30       	cpi	r18, 0x02	; 2
    130a:	31 05       	cpc	r19, r1
    130c:	2c f4       	brge	.+10     	; 0x1318 <DIO_SetPortValue+0x3c>
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	9d 81       	ldd	r25, Y+5	; 0x05
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	61 f0       	breq	.+24     	; 0x132e <DIO_SetPortValue+0x52>
    1316:	1f c0       	rjmp	.+62     	; 0x1356 <DIO_SetPortValue+0x7a>
    1318:	2c 81       	ldd	r18, Y+4	; 0x04
    131a:	3d 81       	ldd	r19, Y+5	; 0x05
    131c:	22 30       	cpi	r18, 0x02	; 2
    131e:	31 05       	cpc	r19, r1
    1320:	81 f0       	breq	.+32     	; 0x1342 <DIO_SetPortValue+0x66>
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	83 30       	cpi	r24, 0x03	; 3
    1328:	91 05       	cpc	r25, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <DIO_SetPortValue+0x70>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <DIO_SetPortValue+0x7a>
    {
			case DIO_u8PORTA : PORTA = u8PortVal ; break;
    132e:	eb e3       	ldi	r30, 0x3B	; 59
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	80 83       	st	Z, r24
    1336:	11 c0       	rjmp	.+34     	; 0x135a <DIO_SetPortValue+0x7e>
			case DIO_u8PORTB : PORTB = u8PortVal ; break;
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	80 83       	st	Z, r24
    1340:	0c c0       	rjmp	.+24     	; 0x135a <DIO_SetPortValue+0x7e>
			case DIO_u8PORTC : PORTC = u8PortVal ; break;
    1342:	e5 e3       	ldi	r30, 0x35	; 53
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	80 83       	st	Z, r24
    134a:	07 c0       	rjmp	.+14     	; 0x135a <DIO_SetPortValue+0x7e>
			case DIO_u8PORTD : PORTD = u8PortVal ; break;
    134c:	e2 e3       	ldi	r30, 0x32	; 50
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	80 83       	st	Z, r24
    1354:	02 c0       	rjmp	.+4      	; 0x135a <DIO_SetPortValue+0x7e>
            default: Local_u8ErrorState=1; break;
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
}
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy , u8* Pu8_ValCopy)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	27 97       	sbiw	r28, 0x07	; 7
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	6b 83       	std	Y+3, r22	; 0x03
    1384:	5d 83       	std	Y+5, r21	; 0x05
    1386:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState=0;
    1388:	19 82       	std	Y+1, r1	; 0x01
    if((Pu8_ValCopy!=NULL && u8PinIdCopy <= DIO_u8PIN7))
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	09 f4       	brne	.+2      	; 0x1394 <DIO_GetPinValue+0x28>
    1392:	78 c0       	rjmp	.+240    	; 0x1484 <DIO_GetPinValue+0x118>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	88 30       	cpi	r24, 0x08	; 8
    1398:	08 f0       	brcs	.+2      	; 0x139c <DIO_GetPinValue+0x30>
    139a:	74 c0       	rjmp	.+232    	; 0x1484 <DIO_GetPinValue+0x118>
    {
    switch(u8PortIdCopy)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3f 83       	std	Y+7, r19	; 0x07
    13a4:	2e 83       	std	Y+6, r18	; 0x06
    13a6:	4e 81       	ldd	r20, Y+6	; 0x06
    13a8:	5f 81       	ldd	r21, Y+7	; 0x07
    13aa:	41 30       	cpi	r20, 0x01	; 1
    13ac:	51 05       	cpc	r21, r1
    13ae:	59 f1       	breq	.+86     	; 0x1406 <DIO_GetPinValue+0x9a>
    13b0:	8e 81       	ldd	r24, Y+6	; 0x06
    13b2:	9f 81       	ldd	r25, Y+7	; 0x07
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	91 05       	cpc	r25, r1
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <DIO_GetPinValue+0x5a>
    13ba:	2e 81       	ldd	r18, Y+6	; 0x06
    13bc:	3f 81       	ldd	r19, Y+7	; 0x07
    13be:	21 15       	cp	r18, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	69 f0       	breq	.+26     	; 0x13de <DIO_GetPinValue+0x72>
    13c4:	5c c0       	rjmp	.+184    	; 0x147e <DIO_GetPinValue+0x112>
    13c6:	4e 81       	ldd	r20, Y+6	; 0x06
    13c8:	5f 81       	ldd	r21, Y+7	; 0x07
    13ca:	42 30       	cpi	r20, 0x02	; 2
    13cc:	51 05       	cpc	r21, r1
    13ce:	79 f1       	breq	.+94     	; 0x142e <DIO_GetPinValue+0xc2>
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_GetPinValue+0x70>
    13da:	3d c0       	rjmp	.+122    	; 0x1456 <DIO_GetPinValue+0xea>
    13dc:	50 c0       	rjmp	.+160    	; 0x147e <DIO_GetPinValue+0x112>
        {
			case DIO_u8PORTA : *Pu8_ValCopy = GET_BIT(PINA , u8PinIdCopy) ; break;
    13de:	e9 e3       	ldi	r30, 0x39	; 57
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	a9 01       	movw	r20, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_GetPinValue+0x8a>
    13f2:	55 95       	asr	r21
    13f4:	47 95       	ror	r20
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_GetPinValue+0x86>
    13fa:	ca 01       	movw	r24, r20
    13fc:	81 70       	andi	r24, 0x01	; 1
    13fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1400:	fd 81       	ldd	r31, Y+5	; 0x05
    1402:	80 83       	st	Z, r24
    1404:	41 c0       	rjmp	.+130    	; 0x1488 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTB : *Pu8_ValCopy = GET_BIT(PINB , u8PinIdCopy) ; break;
    1406:	e6 e3       	ldi	r30, 0x36	; 54
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	88 2f       	mov	r24, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a9 01       	movw	r20, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_GetPinValue+0xb2>
    141a:	55 95       	asr	r21
    141c:	47 95       	ror	r20
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <DIO_GetPinValue+0xae>
    1422:	ca 01       	movw	r24, r20
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	ec 81       	ldd	r30, Y+4	; 0x04
    1428:	fd 81       	ldd	r31, Y+5	; 0x05
    142a:	80 83       	st	Z, r24
    142c:	2d c0       	rjmp	.+90     	; 0x1488 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTC : *Pu8_ValCopy = GET_BIT(PINC , u8PinIdCopy) ; break;
    142e:	e3 e3       	ldi	r30, 0x33	; 51
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <DIO_GetPinValue+0xda>
    1442:	55 95       	asr	r21
    1444:	47 95       	ror	r20
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <DIO_GetPinValue+0xd6>
    144a:	ca 01       	movw	r24, r20
    144c:	81 70       	andi	r24, 0x01	; 1
    144e:	ec 81       	ldd	r30, Y+4	; 0x04
    1450:	fd 81       	ldd	r31, Y+5	; 0x05
    1452:	80 83       	st	Z, r24
    1454:	19 c0       	rjmp	.+50     	; 0x1488 <DIO_GetPinValue+0x11c>
			case DIO_u8PORTD : *Pu8_ValCopy = GET_BIT(PIND , u8PinIdCopy) ; break;
    1456:	e0 e3       	ldi	r30, 0x30	; 48
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a9 01       	movw	r20, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_GetPinValue+0x102>
    146a:	55 95       	asr	r21
    146c:	47 95       	ror	r20
    146e:	8a 95       	dec	r24
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_GetPinValue+0xfe>
    1472:	ca 01       	movw	r24, r20
    1474:	81 70       	andi	r24, 0x01	; 1
    1476:	ec 81       	ldd	r30, Y+4	; 0x04
    1478:	fd 81       	ldd	r31, Y+5	; 0x05
    147a:	80 83       	st	Z, r24
    147c:	05 c0       	rjmp	.+10     	; 0x1488 <DIO_GetPinValue+0x11c>
            default: Local_u8ErrorState=1; break;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_GetPinValue+0x11c>
        }
    }
    else
    {
        Local_u8ErrorState=1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8ErrorState;
    1488:	89 81       	ldd	r24, Y+1	; 0x01

}
    148a:	27 96       	adiw	r28, 0x07	; 7
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <SWITCH_u8Switchgetpressed>:
#include "../../MCAL/DIO/DIO_interface.h"
#include "SWITCH_interface.h"
#include <util/delay.h>

// Function to get the pressed state of a SWITCH
u8 SWITCH_u8Switchgetpressed(const SWITCH_T *SWITCH, u8 *copySwitchState) {
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	69 97       	sbiw	r28, 0x19	; 25
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	9a 8b       	std	Y+18, r25	; 0x12
    14b2:	89 8b       	std	Y+17, r24	; 0x11
    14b4:	7c 8b       	std	Y+20, r23	; 0x14
    14b6:	6b 8b       	std	Y+19, r22	; 0x13
	u8 local_u8error = 0, local_pinValue;
    14b8:	1f 86       	std	Y+15, r1	; 0x0f

	if ((copySwitchState != NULL) && (SWITCH != NULL) && (SWITCH->SWITCH_u8pin <= DIO_u8PIN7) && (SWITCH->SWITCH_u8port <= DIO_u8PORTD) && (SWITCH->SWITCH_u8BounceType < 2) && (SWITCH->SWITCH_u8ConnectionType < 3)) {
    14ba:	8b 89       	ldd	r24, Y+19	; 0x13
    14bc:	9c 89       	ldd	r25, Y+20	; 0x14
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <SWITCH_u8Switchgetpressed+0x28>
    14c2:	03 c1       	rjmp	.+518    	; 0x16ca <SWITCH_u8Switchgetpressed+0x22e>
    14c4:	89 89       	ldd	r24, Y+17	; 0x11
    14c6:	9a 89       	ldd	r25, Y+18	; 0x12
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	09 f4       	brne	.+2      	; 0x14ce <SWITCH_u8Switchgetpressed+0x32>
    14cc:	fe c0       	rjmp	.+508    	; 0x16ca <SWITCH_u8Switchgetpressed+0x22e>
    14ce:	e9 89       	ldd	r30, Y+17	; 0x11
    14d0:	fa 89       	ldd	r31, Y+18	; 0x12
    14d2:	81 81       	ldd	r24, Z+1	; 0x01
    14d4:	88 30       	cpi	r24, 0x08	; 8
    14d6:	08 f0       	brcs	.+2      	; 0x14da <SWITCH_u8Switchgetpressed+0x3e>
    14d8:	f8 c0       	rjmp	.+496    	; 0x16ca <SWITCH_u8Switchgetpressed+0x22e>
    14da:	e9 89       	ldd	r30, Y+17	; 0x11
    14dc:	fa 89       	ldd	r31, Y+18	; 0x12
    14de:	80 81       	ld	r24, Z
    14e0:	84 30       	cpi	r24, 0x04	; 4
    14e2:	08 f0       	brcs	.+2      	; 0x14e6 <SWITCH_u8Switchgetpressed+0x4a>
    14e4:	f2 c0       	rjmp	.+484    	; 0x16ca <SWITCH_u8Switchgetpressed+0x22e>
    14e6:	e9 89       	ldd	r30, Y+17	; 0x11
    14e8:	fa 89       	ldd	r31, Y+18	; 0x12
    14ea:	83 81       	ldd	r24, Z+3	; 0x03
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <SWITCH_u8Switchgetpressed+0x56>
    14f0:	ec c0       	rjmp	.+472    	; 0x16ca <SWITCH_u8Switchgetpressed+0x22e>
    14f2:	e9 89       	ldd	r30, Y+17	; 0x11
    14f4:	fa 89       	ldd	r31, Y+18	; 0x12
    14f6:	82 81       	ldd	r24, Z+2	; 0x02
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	08 f0       	brcs	.+2      	; 0x14fe <SWITCH_u8Switchgetpressed+0x62>
    14fc:	e6 c0       	rjmp	.+460    	; 0x16ca <SWITCH_u8Switchgetpressed+0x22e>
		// Configure pin as input

		// Apply bounce or debounce based on connection type
		if (SWITCH->SWITCH_u8BounceType == SWITCH_u8Bounce) {
    14fe:	e9 89       	ldd	r30, Y+17	; 0x11
    1500:	fa 89       	ldd	r31, Y+18	; 0x12
    1502:	83 81       	ldd	r24, Z+3	; 0x03
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	09 f0       	breq	.+2      	; 0x150a <SWITCH_u8Switchgetpressed+0x6e>
    1508:	8d c0       	rjmp	.+282    	; 0x1624 <SWITCH_u8Switchgetpressed+0x188>
			// Apply bounce handling by reading the pin value after a delay
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    150a:	e9 89       	ldd	r30, Y+17	; 0x11
    150c:	fa 89       	ldd	r31, Y+18	; 0x12
    150e:	80 81       	ld	r24, Z
    1510:	e9 89       	ldd	r30, Y+17	; 0x11
    1512:	fa 89       	ldd	r31, Y+18	; 0x12
    1514:	91 81       	ldd	r25, Z+1	; 0x01
    1516:	9e 01       	movw	r18, r28
    1518:	20 5f       	subi	r18, 0xF0	; 240
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	69 2f       	mov	r22, r25
    151e:	a9 01       	movw	r20, r18
    1520:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	aa ef       	ldi	r26, 0xFA	; 250
    152a:	b3 e4       	ldi	r27, 0x43	; 67
    152c:	8b 87       	std	Y+11, r24	; 0x0b
    152e:	9c 87       	std	Y+12, r25	; 0x0c
    1530:	ad 87       	std	Y+13, r26	; 0x0d
    1532:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1534:	6b 85       	ldd	r22, Y+11	; 0x0b
    1536:	7c 85       	ldd	r23, Y+12	; 0x0c
    1538:	8d 85       	ldd	r24, Y+13	; 0x0d
    153a:	9e 85       	ldd	r25, Y+14	; 0x0e
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	4a ef       	ldi	r20, 0xFA	; 250
    1542:	54 e4       	ldi	r21, 0x44	; 68
    1544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8f 83       	std	Y+7, r24	; 0x07
    154e:	98 87       	std	Y+8, r25	; 0x08
    1550:	a9 87       	std	Y+9, r26	; 0x09
    1552:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1554:	6f 81       	ldd	r22, Y+7	; 0x07
    1556:	78 85       	ldd	r23, Y+8	; 0x08
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e8       	ldi	r20, 0x80	; 128
    1562:	5f e3       	ldi	r21, 0x3F	; 63
    1564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1568:	88 23       	and	r24, r24
    156a:	2c f4       	brge	.+10     	; 0x1576 <SWITCH_u8Switchgetpressed+0xda>
		__ticks = 1;
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <SWITCH_u8Switchgetpressed+0x158>
	else if (__tmp > 65535)
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	4f e7       	ldi	r20, 0x7F	; 127
    1584:	57 e4       	ldi	r21, 0x47	; 71
    1586:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158a:	18 16       	cp	r1, r24
    158c:	4c f5       	brge	.+82     	; 0x15e0 <SWITCH_u8Switchgetpressed+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1590:	7c 85       	ldd	r23, Y+12	; 0x0c
    1592:	8d 85       	ldd	r24, Y+13	; 0x0d
    1594:	9e 85       	ldd	r25, Y+14	; 0x0e
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e2       	ldi	r20, 0x20	; 32
    159c:	51 e4       	ldi	r21, 0x41	; 65
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	bc 01       	movw	r22, r24
    15a8:	cd 01       	movw	r24, r26
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <SWITCH_u8Switchgetpressed+0x13a>
    15b8:	88 ec       	ldi	r24, 0xC8	; 200
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	f1 f7       	brne	.-4      	; 0x15c4 <SWITCH_u8Switchgetpressed+0x128>
    15c8:	9c 83       	std	Y+4, r25	; 0x04
    15ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f7       	brne	.-38     	; 0x15b8 <SWITCH_u8Switchgetpressed+0x11c>
    15de:	14 c0       	rjmp	.+40     	; 0x1608 <SWITCH_u8Switchgetpressed+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e0:	6f 81       	ldd	r22, Y+7	; 0x07
    15e2:	78 85       	ldd	r23, Y+8	; 0x08
    15e4:	89 85       	ldd	r24, Y+9	; 0x09
    15e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	f1 f7       	brne	.-4      	; 0x1600 <SWITCH_u8Switchgetpressed+0x164>
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    1608:	e9 89       	ldd	r30, Y+17	; 0x11
    160a:	fa 89       	ldd	r31, Y+18	; 0x12
    160c:	80 81       	ld	r24, Z
    160e:	e9 89       	ldd	r30, Y+17	; 0x11
    1610:	fa 89       	ldd	r31, Y+18	; 0x12
    1612:	91 81       	ldd	r25, Z+1	; 0x01
    1614:	9e 01       	movw	r18, r28
    1616:	20 5f       	subi	r18, 0xF0	; 240
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	69 2f       	mov	r22, r25
    161c:	a9 01       	movw	r20, r18
    161e:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
    1622:	12 c0       	rjmp	.+36     	; 0x1648 <SWITCH_u8Switchgetpressed+0x1ac>
		} else if (SWITCH->SWITCH_u8BounceType == SWITCH_u8Debounce) {
    1624:	e9 89       	ldd	r30, Y+17	; 0x11
    1626:	fa 89       	ldd	r31, Y+18	; 0x12
    1628:	83 81       	ldd	r24, Z+3	; 0x03
    162a:	88 23       	and	r24, r24
    162c:	69 f4       	brne	.+26     	; 0x1648 <SWITCH_u8Switchgetpressed+0x1ac>
			// Apply debounce by reading the pin value twice
			DIO_GetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, &local_pinValue);
    162e:	e9 89       	ldd	r30, Y+17	; 0x11
    1630:	fa 89       	ldd	r31, Y+18	; 0x12
    1632:	80 81       	ld	r24, Z
    1634:	e9 89       	ldd	r30, Y+17	; 0x11
    1636:	fa 89       	ldd	r31, Y+18	; 0x12
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	9e 01       	movw	r18, r28
    163c:	20 5f       	subi	r18, 0xF0	; 240
    163e:	3f 4f       	sbci	r19, 0xFF	; 255
    1640:	69 2f       	mov	r22, r25
    1642:	a9 01       	movw	r20, r18
    1644:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
		}

		// Determine the switch state based on connection type and pin value
		switch (SWITCH->SWITCH_u8ConnectionType) {
    1648:	e9 89       	ldd	r30, Y+17	; 0x11
    164a:	fa 89       	ldd	r31, Y+18	; 0x12
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	38 8f       	std	Y+24, r19	; 0x18
    1654:	2f 8b       	std	Y+23, r18	; 0x17
    1656:	8f 89       	ldd	r24, Y+23	; 0x17
    1658:	98 8d       	ldd	r25, Y+24	; 0x18
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	a1 f0       	breq	.+40     	; 0x1688 <SWITCH_u8Switchgetpressed+0x1ec>
    1660:	2f 89       	ldd	r18, Y+23	; 0x17
    1662:	38 8d       	ldd	r19, Y+24	; 0x18
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	d9 f0       	breq	.+54     	; 0x16a0 <SWITCH_u8Switchgetpressed+0x204>
    166a:	8f 89       	ldd	r24, Y+23	; 0x17
    166c:	98 8d       	ldd	r25, Y+24	; 0x18
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	71 f5       	brne	.+92     	; 0x16ce <SWITCH_u8Switchgetpressed+0x232>
			case SWITCH_u8PullUp:
				*copySwitchState = (local_pinValue) ? SWITCH_u8NotPressed : SWITCH_u8Pressed;
    1672:	88 89       	ldd	r24, Y+16	; 0x10
    1674:	1e 8a       	std	Y+22, r1	; 0x16
    1676:	88 23       	and	r24, r24
    1678:	11 f4       	brne	.+4      	; 0x167e <SWITCH_u8Switchgetpressed+0x1e2>
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	9e 8b       	std	Y+22, r25	; 0x16
    167e:	eb 89       	ldd	r30, Y+19	; 0x13
    1680:	fc 89       	ldd	r31, Y+20	; 0x14
    1682:	2e 89       	ldd	r18, Y+22	; 0x16
    1684:	20 83       	st	Z, r18
    1686:	23 c0       	rjmp	.+70     	; 0x16ce <SWITCH_u8Switchgetpressed+0x232>
				break;
			case SWITCH_u8PullDown:
				*copySwitchState = (local_pinValue) ? SWITCH_u8Pressed : SWITCH_u8NotPressed;
    1688:	88 89       	ldd	r24, Y+16	; 0x10
    168a:	89 8f       	std	Y+25, r24	; 0x19
    168c:	39 8d       	ldd	r19, Y+25	; 0x19
    168e:	33 23       	and	r19, r19
    1690:	11 f0       	breq	.+4      	; 0x1696 <SWITCH_u8Switchgetpressed+0x1fa>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 8f       	std	Y+25, r24	; 0x19
    1696:	89 8d       	ldd	r24, Y+25	; 0x19
    1698:	eb 89       	ldd	r30, Y+19	; 0x13
    169a:	fc 89       	ldd	r31, Y+20	; 0x14
    169c:	80 83       	st	Z, r24
    169e:	17 c0       	rjmp	.+46     	; 0x16ce <SWITCH_u8Switchgetpressed+0x232>
				break;
			case SWITCH_u8InternalPullUp:
				DIO_SetPinValue(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, DIO_u8PIN_OUTPUT);
    16a0:	e9 89       	ldd	r30, Y+17	; 0x11
    16a2:	fa 89       	ldd	r31, Y+18	; 0x12
    16a4:	80 81       	ld	r24, Z
    16a6:	e9 89       	ldd	r30, Y+17	; 0x11
    16a8:	fa 89       	ldd	r31, Y+18	; 0x12
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	69 2f       	mov	r22, r25
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
				*copySwitchState = (local_pinValue) ? SWITCH_u8NotPressed : SWITCH_u8Pressed;
    16b4:	88 89       	ldd	r24, Y+16	; 0x10
    16b6:	1d 8a       	std	Y+21, r1	; 0x15
    16b8:	88 23       	and	r24, r24
    16ba:	11 f4       	brne	.+4      	; 0x16c0 <SWITCH_u8Switchgetpressed+0x224>
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	9d 8b       	std	Y+21, r25	; 0x15
    16c0:	eb 89       	ldd	r30, Y+19	; 0x13
    16c2:	fc 89       	ldd	r31, Y+20	; 0x14
    16c4:	2d 89       	ldd	r18, Y+21	; 0x15
    16c6:	20 83       	st	Z, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <SWITCH_u8Switchgetpressed+0x232>
				break;
		}
	} else {
		local_u8error = 1;  // Invalid pin, set error flag
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	8f 87       	std	Y+15, r24	; 0x0f
	}
	return local_u8error;
    16ce:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    16d0:	69 96       	adiw	r28, 0x19	; 25
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <SWITCH_u8Switchinitialize>:

// Function to initialize a SWITCH
u8 SWITCH_u8Switchinitialize(const SWITCH_T *SWITCH) {
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <SWITCH_u8Switchinitialize+0x6>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	9b 83       	std	Y+3, r25	; 0x03
    16f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;
    16f2:	19 82       	std	Y+1, r1	; 0x01

	if ((SWITCH != NULL) && (SWITCH->SWITCH_u8pin <= DIO_u8PIN7) && (SWITCH->SWITCH_u8port <= DIO_u8PORTD) && (SWITCH->SWITCH_u8BounceType < 2) && (SWITCH->SWITCH_u8ConnectionType < 2)) {
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	9b 81       	ldd	r25, Y+3	; 0x03
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	f9 f0       	breq	.+62     	; 0x173a <SWITCH_u8Switchinitialize+0x58>
    16fc:	ea 81       	ldd	r30, Y+2	; 0x02
    16fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1700:	81 81       	ldd	r24, Z+1	; 0x01
    1702:	88 30       	cpi	r24, 0x08	; 8
    1704:	d0 f4       	brcc	.+52     	; 0x173a <SWITCH_u8Switchinitialize+0x58>
    1706:	ea 81       	ldd	r30, Y+2	; 0x02
    1708:	fb 81       	ldd	r31, Y+3	; 0x03
    170a:	80 81       	ld	r24, Z
    170c:	84 30       	cpi	r24, 0x04	; 4
    170e:	a8 f4       	brcc	.+42     	; 0x173a <SWITCH_u8Switchinitialize+0x58>
    1710:	ea 81       	ldd	r30, Y+2	; 0x02
    1712:	fb 81       	ldd	r31, Y+3	; 0x03
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	80 f4       	brcc	.+32     	; 0x173a <SWITCH_u8Switchinitialize+0x58>
    171a:	ea 81       	ldd	r30, Y+2	; 0x02
    171c:	fb 81       	ldd	r31, Y+3	; 0x03
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	58 f4       	brcc	.+22     	; 0x173a <SWITCH_u8Switchinitialize+0x58>
		DIO_SetPinDirection(SWITCH->SWITCH_u8port, SWITCH->SWITCH_u8pin, DIO_u8PIN_INPUT);
    1724:	ea 81       	ldd	r30, Y+2	; 0x02
    1726:	fb 81       	ldd	r31, Y+3	; 0x03
    1728:	80 81       	ld	r24, Z
    172a:	ea 81       	ldd	r30, Y+2	; 0x02
    172c:	fb 81       	ldd	r31, Y+3	; 0x03
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	69 2f       	mov	r22, r25
    1732:	40 e0       	ldi	r20, 0x00	; 0
    1734:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
    1738:	02 c0       	rjmp	.+4      	; 0x173e <SWITCH_u8Switchinitialize+0x5c>
	} else {
		local_u8error = 1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <LED_u8Initialize>:
#include "../../lib/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "LED_interface.h" // Include necessary definitions


u8 LED_u8Initialize(const LED_T *LED) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	00 d0       	rcall	.+0      	; 0x1752 <LED_u8Initialize+0x6>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <LED_u8Initialize+0x8>
    1754:	0f 92       	push	r0
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	9b 83       	std	Y+3, r25	; 0x03
    175c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    175e:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	d1 f1       	breq	.+116    	; 0x17dc <LED_u8Initialize+0x90>
    1768:	ea 81       	ldd	r30, Y+2	; 0x02
    176a:	fb 81       	ldd	r31, Y+3	; 0x03
    176c:	81 81       	ldd	r24, Z+1	; 0x01
    176e:	88 30       	cpi	r24, 0x08	; 8
    1770:	a8 f5       	brcc	.+106    	; 0x17dc <LED_u8Initialize+0x90>
    1772:	ea 81       	ldd	r30, Y+2	; 0x02
    1774:	fb 81       	ldd	r31, Y+3	; 0x03
    1776:	80 81       	ld	r24, Z
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	80 f5       	brcc	.+96     	; 0x17dc <LED_u8Initialize+0x90>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Configure pin as an output and set it to low
		DIO_SetPinDirection(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_OUTPUT);
    177c:	ea 81       	ldd	r30, Y+2	; 0x02
    177e:	fb 81       	ldd	r31, Y+3	; 0x03
    1780:	80 81       	ld	r24, Z
    1782:	ea 81       	ldd	r30, Y+2	; 0x02
    1784:	fb 81       	ldd	r31, Y+3	; 0x03
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	69 2f       	mov	r22, r25
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
		switch (LED->LED_u8ConnectionType) {
    1790:	ea 81       	ldd	r30, Y+2	; 0x02
    1792:	fb 81       	ldd	r31, Y+3	; 0x03
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	3d 83       	std	Y+5, r19	; 0x05
    179c:	2c 83       	std	Y+4, r18	; 0x04
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	9d 81       	ldd	r25, Y+5	; 0x05
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <LED_u8Initialize+0x7a>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	21 30       	cpi	r18, 0x01	; 1
    17ac:	31 05       	cpc	r19, r1
    17ae:	c1 f4       	brne	.+48     	; 0x17e0 <LED_u8Initialize+0x94>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    17b0:	ea 81       	ldd	r30, Y+2	; 0x02
    17b2:	fb 81       	ldd	r31, Y+3	; 0x03
    17b4:	80 81       	ld	r24, Z
    17b6:	ea 81       	ldd	r30, Y+2	; 0x02
    17b8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ba:	91 81       	ldd	r25, Z+1	; 0x01
    17bc:	69 2f       	mov	r22, r25
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    17c4:	0d c0       	rjmp	.+26     	; 0x17e0 <LED_u8Initialize+0x94>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    17c6:	ea 81       	ldd	r30, Y+2	; 0x02
    17c8:	fb 81       	ldd	r31, Y+3	; 0x03
    17ca:	80 81       	ld	r24, Z
    17cc:	ea 81       	ldd	r30, Y+2	; 0x02
    17ce:	fb 81       	ldd	r31, Y+3	; 0x03
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	69 2f       	mov	r22, r25
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <LED_u8Initialize+0x94>
		}
		} else {
		local_u8error = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <LED_u8TurnOnLED>:

// Function to turn on an LED based on connection type
u8 LED_u8TurnOnLED(const LED_T *LED) {
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <LED_u8TurnOnLED+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <LED_u8TurnOnLED+0x8>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    1804:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	9b 81       	ldd	r25, Y+3	; 0x03
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	81 f1       	breq	.+96     	; 0x186e <LED_u8TurnOnLED+0x7c>
    180e:	ea 81       	ldd	r30, Y+2	; 0x02
    1810:	fb 81       	ldd	r31, Y+3	; 0x03
    1812:	81 81       	ldd	r24, Z+1	; 0x01
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	58 f5       	brcc	.+86     	; 0x186e <LED_u8TurnOnLED+0x7c>
    1818:	ea 81       	ldd	r30, Y+2	; 0x02
    181a:	fb 81       	ldd	r31, Y+3	; 0x03
    181c:	80 81       	ld	r24, Z
    181e:	84 30       	cpi	r24, 0x04	; 4
    1820:	30 f5       	brcc	.+76     	; 0x186e <LED_u8TurnOnLED+0x7c>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Switch based on the connection type
		switch (LED->LED_u8ConnectionType) {
    1822:	ea 81       	ldd	r30, Y+2	; 0x02
    1824:	fb 81       	ldd	r31, Y+3	; 0x03
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3d 83       	std	Y+5, r19	; 0x05
    182e:	2c 83       	std	Y+4, r18	; 0x04
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	81 f0       	breq	.+32     	; 0x1858 <LED_u8TurnOnLED+0x66>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	21 30       	cpi	r18, 0x01	; 1
    183e:	31 05       	cpc	r19, r1
    1840:	c1 f4       	brne	.+48     	; 0x1872 <LED_u8TurnOnLED+0x80>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    1842:	ea 81       	ldd	r30, Y+2	; 0x02
    1844:	fb 81       	ldd	r31, Y+3	; 0x03
    1846:	80 81       	ld	r24, Z
    1848:	ea 81       	ldd	r30, Y+2	; 0x02
    184a:	fb 81       	ldd	r31, Y+3	; 0x03
    184c:	91 81       	ldd	r25, Z+1	; 0x01
    184e:	69 2f       	mov	r22, r25
    1850:	41 e0       	ldi	r20, 0x01	; 1
    1852:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <LED_u8TurnOnLED+0x80>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    1858:	ea 81       	ldd	r30, Y+2	; 0x02
    185a:	fb 81       	ldd	r31, Y+3	; 0x03
    185c:	80 81       	ld	r24, Z
    185e:	ea 81       	ldd	r30, Y+2	; 0x02
    1860:	fb 81       	ldd	r31, Y+3	; 0x03
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	69 2f       	mov	r22, r25
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <LED_u8TurnOnLED+0x80>
		}
	}
	else {
		local_u8error = 1;  // Invalid pin, set error flag
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    1872:	89 81       	ldd	r24, Y+1	; 0x01
}
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <LED_u8TurnOffLED>:

// Function to turn off an LED based on connection type
u8 LED_u8TurnOffLED(const LED_T *LED) {
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <LED_u8TurnOffLED+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <LED_u8TurnOffLED+0x8>
    188c:	0f 92       	push	r0
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;  // Initialize error flag
    1896:	19 82       	std	Y+1, r1	; 0x01

	// NULL pointer, set error flag
	if ((LED != NULL) && (LED->LED_u8Pin <= DIO_u8PIN7) && (LED->LED_u8Port <= DIO_u8PORTD)) {
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	9b 81       	ldd	r25, Y+3	; 0x03
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	81 f1       	breq	.+96     	; 0x1900 <LED_u8TurnOffLED+0x7c>
    18a0:	ea 81       	ldd	r30, Y+2	; 0x02
    18a2:	fb 81       	ldd	r31, Y+3	; 0x03
    18a4:	81 81       	ldd	r24, Z+1	; 0x01
    18a6:	88 30       	cpi	r24, 0x08	; 8
    18a8:	58 f5       	brcc	.+86     	; 0x1900 <LED_u8TurnOffLED+0x7c>
    18aa:	ea 81       	ldd	r30, Y+2	; 0x02
    18ac:	fb 81       	ldd	r31, Y+3	; 0x03
    18ae:	80 81       	ld	r24, Z
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	30 f5       	brcc	.+76     	; 0x1900 <LED_u8TurnOffLED+0x7c>
		// Check if the specified pin is within valid range
		// Check if the specified port is within valid range

		// Switch based on the connection type
		switch (LED->LED_u8ConnectionType) {
    18b4:	ea 81       	ldd	r30, Y+2	; 0x02
    18b6:	fb 81       	ldd	r31, Y+3	; 0x03
    18b8:	82 81       	ldd	r24, Z+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	81 f0       	breq	.+32     	; 0x18ea <LED_u8TurnOffLED+0x66>
    18ca:	2c 81       	ldd	r18, Y+4	; 0x04
    18cc:	3d 81       	ldd	r19, Y+5	; 0x05
    18ce:	21 30       	cpi	r18, 0x01	; 1
    18d0:	31 05       	cpc	r19, r1
    18d2:	c1 f4       	brne	.+48     	; 0x1904 <LED_u8TurnOffLED+0x80>
			case LED_u8SourceConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_LOW); break;
    18d4:	ea 81       	ldd	r30, Y+2	; 0x02
    18d6:	fb 81       	ldd	r31, Y+3	; 0x03
    18d8:	80 81       	ld	r24, Z
    18da:	ea 81       	ldd	r30, Y+2	; 0x02
    18dc:	fb 81       	ldd	r31, Y+3	; 0x03
    18de:	91 81       	ldd	r25, Z+1	; 0x01
    18e0:	69 2f       	mov	r22, r25
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    18e8:	0d c0       	rjmp	.+26     	; 0x1904 <LED_u8TurnOffLED+0x80>
			case LED_u8SinkConnection: DIO_SetPinValue(LED->LED_u8Port, LED->LED_u8Pin, DIO_u8PIN_HIGH); break;
    18ea:	ea 81       	ldd	r30, Y+2	; 0x02
    18ec:	fb 81       	ldd	r31, Y+3	; 0x03
    18ee:	80 81       	ld	r24, Z
    18f0:	ea 81       	ldd	r30, Y+2	; 0x02
    18f2:	fb 81       	ldd	r31, Y+3	; 0x03
    18f4:	91 81       	ldd	r25, Z+1	; 0x01
    18f6:	69 2f       	mov	r22, r25
    18f8:	41 e0       	ldi	r20, 0x01	; 1
    18fa:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <LED_u8TurnOffLED+0x80>
		}
		} else {
		local_u8error = 1;  // Invalid pin, set error flag
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <KPD_u8GetPressedkey>:
#include "KPD_private.h"
#include <util/delay.h>


u8 KPD_u8GetPressedkey(void)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <KPD_u8GetPressedkey+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <KPD_u8GetPressedkey+0x8>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Pressedkey=KPD_NO_PREESED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8PinState;
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    1928:	1a 82       	std	Y+2, r1	; 0x02
    192a:	5e c0       	rjmp	.+188    	; 0x19e8 <KPD_u8GetPressedkey+0xd2>
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	fc 01       	movw	r30, r24
    1934:	e2 54       	subi	r30, 0x42	; 66
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	90 81       	ld	r25, Z
    193a:	83 e0       	ldi	r24, 0x03	; 3
    193c:	69 2f       	mov	r22, r25
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1944:	19 82       	std	Y+1, r1	; 0x01
    1946:	3d c0       	rjmp	.+122    	; 0x19c2 <KPD_u8GetPressedkey+0xac>
		{
			/*Read the current row*/
			DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	fc 01       	movw	r30, r24
    1950:	e6 54       	subi	r30, 0x46	; 70
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	90 81       	ld	r25, Z
    1956:	9e 01       	movw	r18, r28
    1958:	2c 5f       	subi	r18, 0xFC	; 252
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	69 2f       	mov	r22, r25
    1960:	a9 01       	movw	r20, r18
    1962:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>

			/*check if switch is pressed*/
			if(DIO_u8PIN_LOW==Local_u8PinState)
    1966:	8c 81       	ldd	r24, Y+4	; 0x04
    1968:	88 23       	and	r24, r24
    196a:	41 f5       	brne	.+80     	; 0x19bc <KPD_u8GetPressedkey+0xa6>
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	48 2f       	mov	r20, r24
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	ca 01       	movw	r24, r20
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	82 0f       	add	r24, r18
    1984:	93 1f       	adc	r25, r19
    1986:	fc 01       	movw	r30, r24
    1988:	ee 53       	subi	r30, 0x3E	; 62
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <KPD_u8GetPressedkey+0x9a>

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	fc 01       	movw	r30, r24
    199a:	e6 54       	subi	r30, 0x46	; 70
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	90 81       	ld	r25, Z
    19a0:	9e 01       	movw	r18, r28
    19a2:	2c 5f       	subi	r18, 0xFC	; 252
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	69 2f       	mov	r22, r25
    19aa:	a9 01       	movw	r20, r18
    19ac:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_GetPinValue>
			if(DIO_u8PIN_LOW==Local_u8PinState)
			{
				Local_u8Pressedkey=Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				/*poling(busy waiting) until the key is released*/
				while(DIO_u8PIN_LOW==Local_u8PinState)
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	88 23       	and	r24, r24
    19b4:	71 f3       	breq	.-36     	; 0x1992 <KPD_u8GetPressedkey+0x7c>
				{
					DIO_GetPinValue(KPD_PORT,Local_u8KPDROWSArr[Local_u8RowIdx],&Local_u8PinState);
				}
				return Local_u8Pressedkey;
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	1c c0       	rjmp	.+56     	; 0x19f4 <KPD_u8GetPressedkey+0xde>
	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_LOW);

		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	8f 5f       	subi	r24, 0xFF	; 255
    19c0:	89 83       	std	Y+1, r24	; 0x01
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	84 30       	cpi	r24, 0x04	; 4
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <KPD_u8GetPressedkey+0xb4>
    19c8:	bf cf       	rjmp	.-130    	; 0x1948 <KPD_u8GetPressedkey+0x32>
				}
				return Local_u8Pressedkey;
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	fc 01       	movw	r30, r24
    19d2:	e2 54       	subi	r30, 0x42	; 66
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	90 81       	ld	r25, Z
    19d8:	83 e0       	ldi	r24, 0x03	; 3
    19da:	69 2f       	mov	r22, r25
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};

	static u8 Local_u8KPDROWSArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUMN_NUM;Local_u8ColumnIdx++)
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	8a 83       	std	Y+2, r24	; 0x02
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <KPD_u8GetPressedkey+0xda>
    19ee:	9e cf       	rjmp	.-196    	; 0x192c <KPD_u8GetPressedkey+0x16>
			}
		}
		/*Deactivate current column*/
		DIO_SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],DIO_u8PIN_HIGH);
	}
	return Local_u8Pressedkey;
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	8d 83       	std	Y+5, r24	; 0x05
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret

00001a06 <CLCD_voidSendCommand>:
#include <util/delay.h>



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	de bf       	out	0x3e, r29	; 62
    1a16:	0f be       	out	0x3f, r0	; 63
    1a18:	cd bf       	out	0x3d, r28	; 61
    1a1a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin Low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	60 e0       	ldi	r22, 0x00	; 0
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	61 e0       	ldi	r22, 0x01	; 1
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set command to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a34:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	62 e0       	ldi	r22, 0x02	; 2
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e4       	ldi	r27, 0x40	; 64
    1a4a:	8b 87       	std	Y+11, r24	; 0x0b
    1a4c:	9c 87       	std	Y+12, r25	; 0x0c
    1a4e:	ad 87       	std	Y+13, r26	; 0x0d
    1a50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	4a e7       	ldi	r20, 0x7A	; 122
    1a60:	53 e4       	ldi	r21, 0x43	; 67
    1a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	8f 83       	std	Y+7, r24	; 0x07
    1a6c:	98 87       	std	Y+8, r25	; 0x08
    1a6e:	a9 87       	std	Y+9, r26	; 0x09
    1a70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a72:	6f 81       	ldd	r22, Y+7	; 0x07
    1a74:	78 85       	ldd	r23, Y+8	; 0x08
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e8       	ldi	r20, 0x80	; 128
    1a80:	5f e3       	ldi	r21, 0x3F	; 63
    1a82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a86:	88 23       	and	r24, r24
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	3f c0       	rjmp	.+126    	; 0x1b12 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	3f ef       	ldi	r19, 0xFF	; 255
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	57 e4       	ldi	r21, 0x47	; 71
    1aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	4c f5       	brge	.+82     	; 0x1afe <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e2       	ldi	r20, 0x20	; 32
    1aba:	51 e4       	ldi	r21, 0x41	; 65
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <CLCD_voidSendCommand+0xee>
    1ad6:	89 e1       	ldi	r24, 0x19	; 25
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <CLCD_voidSendCommand+0xdc>
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	69 f7       	brne	.-38     	; 0x1ad6 <CLCD_voidSendCommand+0xd0>
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1afe:	6f 81       	ldd	r22, Y+7	; 0x07
    1b00:	78 85       	ldd	r23, Y+8	; 0x08
    1b02:	89 85       	ldd	r24, Y+9	; 0x09
    1b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	9a 83       	std	Y+2, r25	; 0x02
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <CLCD_voidSendCommand+0x118>
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	62 e0       	ldi	r22, 0x02	; 2
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

}
    1b30:	2f 96       	adiw	r28, 0x0f	; 15
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
    1b56:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS Pin High for data*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set RW Pin to low for write */
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

	/*Set data to data port */
	DIO_SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b70:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>

	/*Send enable pulse*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a0 e0       	ldi	r26, 0x00	; 0
    1b84:	b0 e4       	ldi	r27, 0x40	; 64
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	9c 87       	std	Y+12, r25	; 0x0c
    1b8a:	ad 87       	std	Y+13, r26	; 0x0d
    1b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    1ba8:	98 87       	std	Y+8, r25	; 0x08
    1baa:	a9 87       	std	Y+9, r26	; 0x09
    1bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <CLCD_voidSendData+0xee>
    1c12:	89 e1       	ldi	r24, 0x19	; 25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <CLCD_voidSendData+0xdc>
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <CLCD_voidSendData+0xd0>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <CLCD_voidSendData+0x118>
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	62 e0       	ldi	r22, 0x02	; 2
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>

}
    1c6c:	2f 96       	adiw	r28, 0x0f	; 15
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <CLCD_voidInit>:

void CLCD_voidInit(void)

{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	2e 97       	sbiw	r28, 0x0e	; 14
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e2       	ldi	r26, 0x20	; 32
    1c98:	b2 e4       	ldi	r27, 0x42	; 66
    1c9a:	8b 87       	std	Y+11, r24	; 0x0b
    1c9c:	9c 87       	std	Y+12, r25	; 0x0c
    1c9e:	ad 87       	std	Y+13, r26	; 0x0d
    1ca0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a e7       	ldi	r20, 0x7A	; 122
    1cb0:	53 e4       	ldi	r21, 0x43	; 67
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8f 83       	std	Y+7, r24	; 0x07
    1cbc:	98 87       	std	Y+8, r25	; 0x08
    1cbe:	a9 87       	std	Y+9, r26	; 0x09
    1cc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc4:	78 85       	ldd	r23, Y+8	; 0x08
    1cc6:	89 85       	ldd	r24, Y+9	; 0x09
    1cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <CLCD_voidInit+0x66>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9e 83       	std	Y+6, r25	; 0x06
    1d22:	8d 83       	std	Y+5, r24	; 0x05
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <CLCD_voidInit+0xc6>
    1d26:	89 e1       	ldi	r24, 0x19	; 25
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <CLCD_voidInit+0xb4>
    1d36:	9c 83       	std	Y+4, r25	; 0x04
    1d38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9e 83       	std	Y+6, r25	; 0x06
    1d42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <CLCD_voidInit+0xa8>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <CLCD_voidInit+0xf0>
    1d72:	9a 83       	std	Y+2, r25	; 0x02
    1d74:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms */
	_delay_ms(40);

	/* function set command : 2 line , 5*8 font size */
	CLCD_voidSendCommand(0b00111100);
    1d76:	8c e3       	ldi	r24, 0x3C	; 60
    1d78:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidSendCommand>

	/* display on off control: display enable, disable cursor , no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    1d7c:	8c e0       	ldi	r24, 0x0C	; 12
    1d7e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidSendCommand>

	/* clear display */
	CLCD_voidSendCommand(1);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidSendCommand>

}
    1d88:	2e 96       	adiw	r28, 0x0e	; 14
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <CLCD_voidSendString+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	9b 83       	std	Y+3, r25	; 0x03
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1daa:	19 82       	std	Y+1, r1	; 0x01
    1dac:	0f c0       	rjmp	.+30     	; 0x1dcc <CLCD_voidSendString+0x32>
	while (Copy_pcString[Local_u8Counter] != '\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	9b 81       	ldd	r25, Y+3	; 0x03
    1db8:	fc 01       	movw	r30, r24
    1dba:	e2 0f       	add	r30, r18
    1dbc:	f3 1f       	adc	r31, r19
    1dbe:	90 81       	ld	r25, Z
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	89 2f       	mov	r24, r25
    1dc8:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
}

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != '\0')
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e2 0f       	add	r30, r18
    1dda:	f3 1f       	adc	r31, r19
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	31 f7       	brne	.-52     	; 0x1dae <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter++]);
	}
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <CLCD_voidGoToXY+0x6>
    1df4:	0f 92       	push	r0
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
    1dfc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8XPos==0)
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	88 23       	and	r24, r24
    1e02:	19 f4       	brne	.+6      	; 0x1e0a <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	06 c0       	rjmp	.+12     	; 0x1e16 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	19 f4       	brne	.+6      	; 0x1e16 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos+0x40;
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 5c       	subi	r24, 0xC0	; 192
    1e14:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Address+ 128);
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	80 58       	subi	r24, 0x80	; 128
    1e1a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidSendCommand>
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8* Copy_u8ArrayPtr, u8 Copy_u8BlockNum, u8 Copy_XPos, u8 Copy_YPos)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	27 97       	sbiw	r28, 0x07	; 7
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	8b 83       	std	Y+3, r24	; 0x03
    1e42:	6d 83       	std	Y+5, r22	; 0x05
    1e44:	4e 83       	std	Y+6, r20	; 0x06
    1e46:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress = 0;
    1e48:	1a 82       	std	Y+2, r1	; 0x02

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;
    1e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	80 5c       	subi	r24, 0xC0	; 192
    1e62:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidSendCommand>

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1e66:	19 82       	std	Y+1, r1	; 0x01
    1e68:	0e c0       	rjmp	.+28     	; 0x1e86 <CLCD_voidDisplaySpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	fc 01       	movw	r30, r24
    1e76:	e2 0f       	add	r30, r18
    1e78:	f3 1f       	adc	r31, r19
    1e7a:	80 81       	ld	r24, Z
    1e7c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8BlockNum*8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(u8 Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	8f 5f       	subi	r24, 0xFF	; 255
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	88 30       	cpi	r24, 0x08	; 8
    1e8a:	78 f3       	brcs	.-34     	; 0x1e6a <CLCD_voidDisplaySpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_u8ArrayPtr[Local_u8Counter]);
	}

	CLCD_voidGoToXY(Copy_XPos,Copy_YPos);
    1e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>

	CLCD_voidSendData(Copy_u8BlockNum);
    1e94:	8d 81       	ldd	r24, Y+5	; 0x05
    1e96:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
}
    1e9a:	27 96       	adiw	r28, 0x07	; 7
    1e9c:	0f b6       	in	r0, 0x3f	; 63
    1e9e:	f8 94       	cli
    1ea0:	de bf       	out	0x3e, r29	; 62
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	cd bf       	out	0x3d, r28	; 61
    1ea6:	cf 91       	pop	r28
    1ea8:	df 91       	pop	r29
    1eaa:	08 95       	ret

00001eac <CLCD_voidDisplayNumber>:

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
    1eac:	df 93       	push	r29
    1eae:	cf 93       	push	r28
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	65 97       	sbiw	r28, 0x15	; 21
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	6a 87       	std	Y+10, r22	; 0x0a
    1ec2:	7b 87       	std	Y+11, r23	; 0x0b
    1ec4:	8c 87       	std	Y+12, r24	; 0x0c
    1ec6:	9d 87       	std	Y+13, r25	; 0x0d
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    1ec8:	2d b7       	in	r18, 0x3d	; 61
    1eca:	3e b7       	in	r19, 0x3e	; 62
    1ecc:	3d 8b       	std	Y+21, r19	; 0x15
    1ece:	2c 8b       	std	Y+20, r18	; 0x14
	CLCD_voidSendData(Copy_u8BlockNum);
}

void CLCD_voidDisplayNumber(u32 Copy_u32Number)
{
	if (Copy_u32Number == 0)
    1ed0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ed2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ed4:	ac 85       	ldd	r26, Y+12	; 0x0c
    1ed6:	bd 85       	ldd	r27, Y+13	; 0x0d
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	a1 05       	cpc	r26, r1
    1edc:	b1 05       	cpc	r27, r1
    1ede:	21 f4       	brne	.+8      	; 0x1ee8 <CLCD_voidDisplayNumber+0x3c>
	{
		CLCD_voidSendData('0');
    1ee0:	80 e3       	ldi	r24, 0x30	; 48
    1ee2:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    1ee6:	13 c1       	rjmp	.+550    	; 0x210e <CLCD_voidDisplayNumber+0x262>
    1ee8:	8d b7       	in	r24, 0x3d	; 61
    1eea:	9e b7       	in	r25, 0x3e	; 62
    1eec:	9f 87       	std	Y+15, r25	; 0x0f
    1eee:	8e 87       	std	Y+14, r24	; 0x0e
	}
	else
	{
	u8 Local_u8Digit = 0, Local_u8Counter = 0, Local_u8digitCount = 0;;
    1ef0:	1f 82       	std	Y+7, r1	; 0x07
    1ef2:	1e 82       	std	Y+6, r1	; 0x06
    1ef4:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Temp =  Copy_u32Number;
    1ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efa:	ac 85       	ldd	r26, Y+12	; 0x0c
    1efc:	bd 85       	ldd	r27, Y+13	; 0x0d
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	9a 83       	std	Y+2, r25	; 0x02
    1f02:	ab 83       	std	Y+3, r26	; 0x03
    1f04:	bc 83       	std	Y+4, r27	; 0x04
	do {
		Local_u8digitCount++;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
		Local_u32Temp /= 10;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	ab 81       	ldd	r26, Y+3	; 0x03
    1f12:	bc 81       	ldd	r27, Y+4	; 0x04
    1f14:	2a e0       	ldi	r18, 0x0A	; 10
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 90 18 	call	0x3120	; 0x3120 <__udivmodsi4>
    1f24:	da 01       	movw	r26, r20
    1f26:	c9 01       	movw	r24, r18
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	ab 83       	std	Y+3, r26	; 0x03
    1f2e:	bc 83       	std	Y+4, r27	; 0x04
	} while (Local_u32Temp != 0);
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	ab 81       	ldd	r26, Y+3	; 0x03
    1f36:	bc 81       	ldd	r27, Y+4	; 0x04
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	a1 05       	cpc	r26, r1
    1f3c:	b1 05       	cpc	r27, r1
    1f3e:	19 f7       	brne	.-58     	; 0x1f06 <CLCD_voidDisplayNumber+0x5a>

	u8 Local_u8ArrDigits[Local_u8digitCount];
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	2d b7       	in	r18, 0x3d	; 61
    1f48:	3e b7       	in	r19, 0x3e	; 62
    1f4a:	28 1b       	sub	r18, r24
    1f4c:	39 0b       	sbc	r19, r25
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	3e bf       	out	0x3e, r19	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	2d bf       	out	0x3d, r18	; 61
    1f58:	8d b7       	in	r24, 0x3d	; 61
    1f5a:	9e b7       	in	r25, 0x3e	; 62
    1f5c:	01 96       	adiw	r24, 0x01	; 1
    1f5e:	9b 8b       	std	Y+19, r25	; 0x13
    1f60:	8a 8b       	std	Y+18, r24	; 0x12
    1f62:	8a 89       	ldd	r24, Y+18	; 0x12
    1f64:	9b 89       	ldd	r25, Y+19	; 0x13
    1f66:	00 96       	adiw	r24, 0x00	; 0
    1f68:	9b 8b       	std	Y+19, r25	; 0x13
    1f6a:	8a 8b       	std	Y+18, r24	; 0x12
    1f6c:	2a 89       	ldd	r18, Y+18	; 0x12
    1f6e:	3b 89       	ldd	r19, Y+19	; 0x13
    1f70:	39 87       	std	Y+9, r19	; 0x09
    1f72:	28 87       	std	Y+8, r18	; 0x08
    1f74:	2e c0       	rjmp	.+92     	; 0x1fd2 <CLCD_voidDisplayNumber+0x126>

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
	{
		Local_u8Digit = Copy_u32Number % 10;
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1f7c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1f7e:	2a e0       	ldi	r18, 0x0A	; 10
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	bc 01       	movw	r22, r24
    1f88:	cd 01       	movw	r24, r26
    1f8a:	0e 94 90 18 	call	0x3120	; 0x3120 <__udivmodsi4>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
    1f94:	8e 81       	ldd	r24, Y+6	; 0x06
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	88 85       	ldd	r24, Y+8	; 0x08
    1f9c:	99 85       	ldd	r25, Y+9	; 0x09
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa6:	80 83       	st	Z, r24
		Local_u8Counter++;
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	8e 83       	std	Y+6, r24	; 0x06
		Copy_u32Number = Copy_u32Number / 10;
    1fae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fb2:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fb4:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fb6:	2a e0       	ldi	r18, 0x0A	; 10
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	bc 01       	movw	r22, r24
    1fc0:	cd 01       	movw	r24, r26
    1fc2:	0e 94 90 18 	call	0x3120	; 0x3120 <__udivmodsi4>
    1fc6:	da 01       	movw	r26, r20
    1fc8:	c9 01       	movw	r24, r18
    1fca:	8a 87       	std	Y+10, r24	; 0x0a
    1fcc:	9b 87       	std	Y+11, r25	; 0x0b
    1fce:	ac 87       	std	Y+12, r26	; 0x0c
    1fd0:	bd 87       	std	Y+13, r27	; 0x0d
		Local_u32Temp /= 10;
	} while (Local_u32Temp != 0);

	u8 Local_u8ArrDigits[Local_u8digitCount];

	while (Copy_u32Number != 0 && Local_u8Counter < Local_u8digitCount)
    1fd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fd6:	ac 85       	ldd	r26, Y+12	; 0x0c
    1fd8:	bd 85       	ldd	r27, Y+13	; 0x0d
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	a1 05       	cpc	r26, r1
    1fde:	b1 05       	cpc	r27, r1
    1fe0:	21 f0       	breq	.+8      	; 0x1fea <CLCD_voidDisplayNumber+0x13e>
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	98 17       	cp	r25, r24
    1fe8:	30 f2       	brcs	.-116    	; 0x1f76 <CLCD_voidDisplayNumber+0xca>
		Local_u8Digit = Copy_u32Number % 10;
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	81 50       	subi	r24, 0x01	; 1
    1fee:	8d 83       	std	Y+5, r24	; 0x05
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    1ff0:	1e 82       	std	Y+6, r1	; 0x06
    1ff2:	81 c0       	rjmp	.+258    	; 0x20f6 <CLCD_voidDisplayNumber+0x24a>
	{

		switch (Local_u8ArrDigits[Local_u8digitCount - Local_u8Counter])
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	28 1b       	sub	r18, r24
    2002:	39 0b       	sbc	r19, r25
    2004:	88 85       	ldd	r24, Y+8	; 0x08
    2006:	99 85       	ldd	r25, Y+9	; 0x09
    2008:	fc 01       	movw	r30, r24
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	80 81       	ld	r24, Z
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	39 8b       	std	Y+17, r19	; 0x11
    2016:	28 8b       	std	Y+16, r18	; 0x10
    2018:	88 89       	ldd	r24, Y+16	; 0x10
    201a:	99 89       	ldd	r25, Y+17	; 0x11
    201c:	84 30       	cpi	r24, 0x04	; 4
    201e:	91 05       	cpc	r25, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <CLCD_voidDisplayNumber+0x178>
    2022:	4f c0       	rjmp	.+158    	; 0x20c2 <CLCD_voidDisplayNumber+0x216>
    2024:	28 89       	ldd	r18, Y+16	; 0x10
    2026:	39 89       	ldd	r19, Y+17	; 0x11
    2028:	25 30       	cpi	r18, 0x05	; 5
    202a:	31 05       	cpc	r19, r1
    202c:	d4 f4       	brge	.+52     	; 0x2062 <CLCD_voidDisplayNumber+0x1b6>
    202e:	88 89       	ldd	r24, Y+16	; 0x10
    2030:	99 89       	ldd	r25, Y+17	; 0x11
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	91 05       	cpc	r25, r1
    2036:	c9 f1       	breq	.+114    	; 0x20aa <CLCD_voidDisplayNumber+0x1fe>
    2038:	28 89       	ldd	r18, Y+16	; 0x10
    203a:	39 89       	ldd	r19, Y+17	; 0x11
    203c:	22 30       	cpi	r18, 0x02	; 2
    203e:	31 05       	cpc	r19, r1
    2040:	2c f4       	brge	.+10     	; 0x204c <CLCD_voidDisplayNumber+0x1a0>
    2042:	88 89       	ldd	r24, Y+16	; 0x10
    2044:	99 89       	ldd	r25, Y+17	; 0x11
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	61 f1       	breq	.+88     	; 0x20a2 <CLCD_voidDisplayNumber+0x1f6>
    204a:	52 c0       	rjmp	.+164    	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
    204c:	28 89       	ldd	r18, Y+16	; 0x10
    204e:	39 89       	ldd	r19, Y+17	; 0x11
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	71 f1       	breq	.+92     	; 0x20b2 <CLCD_voidDisplayNumber+0x206>
    2056:	88 89       	ldd	r24, Y+16	; 0x10
    2058:	99 89       	ldd	r25, Y+17	; 0x11
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	91 05       	cpc	r25, r1
    205e:	69 f1       	breq	.+90     	; 0x20ba <CLCD_voidDisplayNumber+0x20e>
    2060:	47 c0       	rjmp	.+142    	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
    2062:	28 89       	ldd	r18, Y+16	; 0x10
    2064:	39 89       	ldd	r19, Y+17	; 0x11
    2066:	27 30       	cpi	r18, 0x07	; 7
    2068:	31 05       	cpc	r19, r1
    206a:	b9 f1       	breq	.+110    	; 0x20da <CLCD_voidDisplayNumber+0x22e>
    206c:	88 89       	ldd	r24, Y+16	; 0x10
    206e:	99 89       	ldd	r25, Y+17	; 0x11
    2070:	88 30       	cpi	r24, 0x08	; 8
    2072:	91 05       	cpc	r25, r1
    2074:	5c f4       	brge	.+22     	; 0x208c <CLCD_voidDisplayNumber+0x1e0>
    2076:	28 89       	ldd	r18, Y+16	; 0x10
    2078:	39 89       	ldd	r19, Y+17	; 0x11
    207a:	25 30       	cpi	r18, 0x05	; 5
    207c:	31 05       	cpc	r19, r1
    207e:	29 f1       	breq	.+74     	; 0x20ca <CLCD_voidDisplayNumber+0x21e>
    2080:	88 89       	ldd	r24, Y+16	; 0x10
    2082:	99 89       	ldd	r25, Y+17	; 0x11
    2084:	86 30       	cpi	r24, 0x06	; 6
    2086:	91 05       	cpc	r25, r1
    2088:	21 f1       	breq	.+72     	; 0x20d2 <CLCD_voidDisplayNumber+0x226>
    208a:	32 c0       	rjmp	.+100    	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
    208c:	28 89       	ldd	r18, Y+16	; 0x10
    208e:	39 89       	ldd	r19, Y+17	; 0x11
    2090:	28 30       	cpi	r18, 0x08	; 8
    2092:	31 05       	cpc	r19, r1
    2094:	31 f1       	breq	.+76     	; 0x20e2 <CLCD_voidDisplayNumber+0x236>
    2096:	88 89       	ldd	r24, Y+16	; 0x10
    2098:	99 89       	ldd	r25, Y+17	; 0x11
    209a:	89 30       	cpi	r24, 0x09	; 9
    209c:	91 05       	cpc	r25, r1
    209e:	29 f1       	breq	.+74     	; 0x20ea <CLCD_voidDisplayNumber+0x23e>
    20a0:	27 c0       	rjmp	.+78     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
		{
			case 0: CLCD_voidSendData('0'); break;
    20a2:	80 e3       	ldi	r24, 0x30	; 48
    20a4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20a8:	23 c0       	rjmp	.+70     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 1: CLCD_voidSendData('1'); break;
    20aa:	81 e3       	ldi	r24, 0x31	; 49
    20ac:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20b0:	1f c0       	rjmp	.+62     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 2: CLCD_voidSendData('2'); break;
    20b2:	82 e3       	ldi	r24, 0x32	; 50
    20b4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20b8:	1b c0       	rjmp	.+54     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 3: CLCD_voidSendData('3'); break;
    20ba:	83 e3       	ldi	r24, 0x33	; 51
    20bc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20c0:	17 c0       	rjmp	.+46     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 4: CLCD_voidSendData('4'); break;
    20c2:	84 e3       	ldi	r24, 0x34	; 52
    20c4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20c8:	13 c0       	rjmp	.+38     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 5: CLCD_voidSendData('5'); break;
    20ca:	85 e3       	ldi	r24, 0x35	; 53
    20cc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20d0:	0f c0       	rjmp	.+30     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 6: CLCD_voidSendData('6'); break;
    20d2:	86 e3       	ldi	r24, 0x36	; 54
    20d4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20d8:	0b c0       	rjmp	.+22     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 7: CLCD_voidSendData('7'); break;
    20da:	87 e3       	ldi	r24, 0x37	; 55
    20dc:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20e0:	07 c0       	rjmp	.+14     	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 8: CLCD_voidSendData('8'); break;
    20e2:	88 e3       	ldi	r24, 0x38	; 56
    20e4:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <CLCD_voidDisplayNumber+0x244>
			case 9: CLCD_voidSendData('9'); break;
    20ea:	89 e3       	ldi	r24, 0x39	; 57
    20ec:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <CLCD_voidSendData>
		Local_u8ArrDigits[Local_u8Counter] = Local_u8Digit;
		Local_u8Counter++;
		Copy_u32Number = Copy_u32Number / 10;
	}
	Local_u8digitCount--;
	for (Local_u8Counter = 0 ; Local_u8Counter <= Local_u8digitCount ; Local_u8Counter++)
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	8f 5f       	subi	r24, 0xFF	; 255
    20f4:	8e 83       	std	Y+6, r24	; 0x06
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	8d 81       	ldd	r24, Y+5	; 0x05
    20fa:	89 17       	cp	r24, r25
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <CLCD_voidDisplayNumber+0x254>
    20fe:	7a cf       	rjmp	.-268    	; 0x1ff4 <CLCD_voidDisplayNumber+0x148>
    2100:	2e 85       	ldd	r18, Y+14	; 0x0e
    2102:	3f 85       	ldd	r19, Y+15	; 0x0f
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	3e bf       	out	0x3e, r19	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	2d bf       	out	0x3d, r18	; 61
			case 8: CLCD_voidSendData('8'); break;
			case 9: CLCD_voidSendData('9'); break;
		}
	}
	}
}
    210e:	8c 89       	ldd	r24, Y+20	; 0x14
    2110:	9d 89       	ldd	r25, Y+21	; 0x15
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	9e bf       	out	0x3e, r25	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	8d bf       	out	0x3d, r24	; 61
    211c:	65 96       	adiw	r28, 0x15	; 21
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <CLCD_voidClearLCD>:

void CLCD_voidClearLCD(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CLEAR_CMD);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <CLCD_voidSendCommand>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <_7SEGMENT_u8ShowNumber>:
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @param copy_u8number The number to be displayed (0-9).
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8ShowNumber(const _7SEGMENT_T  *_7SEGMENT, const u8 copy_u8number)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	2b 97       	sbiw	r28, 0x0b	; 11
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8error = 0;
    215c:	1a 82       	std	Y+2, r1	; 0x02
	s8 i = 0;
    215e:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2) && (copy_u8number < 10)  )
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	09 f4       	brne	.+2      	; 0x216a <_7SEGMENT_u8ShowNumber+0x28>
    2168:	13 c1       	rjmp	.+550    	; 0x2390 <_7SEGMENT_u8ShowNumber+0x24e>
    216a:	eb 81       	ldd	r30, Y+3	; 0x03
    216c:	fc 81       	ldd	r31, Y+4	; 0x04
    216e:	80 81       	ld	r24, Z
    2170:	84 30       	cpi	r24, 0x04	; 4
    2172:	08 f0       	brcs	.+2      	; 0x2176 <_7SEGMENT_u8ShowNumber+0x34>
    2174:	0d c1       	rjmp	.+538    	; 0x2390 <_7SEGMENT_u8ShowNumber+0x24e>
    2176:	eb 81       	ldd	r30, Y+3	; 0x03
    2178:	fc 81       	ldd	r31, Y+4	; 0x04
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	87 30       	cpi	r24, 0x07	; 7
    217e:	08 f0       	brcs	.+2      	; 0x2182 <_7SEGMENT_u8ShowNumber+0x40>
    2180:	07 c1       	rjmp	.+526    	; 0x2390 <_7SEGMENT_u8ShowNumber+0x24e>
    2182:	eb 81       	ldd	r30, Y+3	; 0x03
    2184:	fc 81       	ldd	r31, Y+4	; 0x04
    2186:	81 81       	ldd	r24, Z+1	; 0x01
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	08 f0       	brcs	.+2      	; 0x218e <_7SEGMENT_u8ShowNumber+0x4c>
    218c:	01 c1       	rjmp	.+514    	; 0x2390 <_7SEGMENT_u8ShowNumber+0x24e>
    218e:	eb 81       	ldd	r30, Y+3	; 0x03
    2190:	fc 81       	ldd	r31, Y+4	; 0x04
    2192:	83 81       	ldd	r24, Z+3	; 0x03
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	08 f0       	brcs	.+2      	; 0x219a <_7SEGMENT_u8ShowNumber+0x58>
    2198:	fb c0       	rjmp	.+502    	; 0x2390 <_7SEGMENT_u8ShowNumber+0x24e>
    219a:	8d 81       	ldd	r24, Y+5	; 0x05
    219c:	8a 30       	cpi	r24, 0x0A	; 10
    219e:	08 f0       	brcs	.+2      	; 0x21a2 <_7SEGMENT_u8ShowNumber+0x60>
    21a0:	f7 c0       	rjmp	.+494    	; 0x2390 <_7SEGMENT_u8ShowNumber+0x24e>
	{

		switch (_7SEGMENT->_7SEGMENT_u8Decoders)
    21a2:	eb 81       	ldd	r30, Y+3	; 0x03
    21a4:	fc 81       	ldd	r31, Y+4	; 0x04
    21a6:	84 81       	ldd	r24, Z+4	; 0x04
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	3b 87       	std	Y+11, r19	; 0x0b
    21ae:	2a 87       	std	Y+10, r18	; 0x0a
    21b0:	4a 85       	ldd	r20, Y+10	; 0x0a
    21b2:	5b 85       	ldd	r21, Y+11	; 0x0b
    21b4:	41 15       	cp	r20, r1
    21b6:	51 05       	cpc	r21, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <_7SEGMENT_u8ShowNumber+0x7a>
    21ba:	a2 c0       	rjmp	.+324    	; 0x2300 <_7SEGMENT_u8ShowNumber+0x1be>
    21bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    21be:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	91 05       	cpc	r25, r1
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <_7SEGMENT_u8ShowNumber+0x86>
    21c6:	e1 c0       	rjmp	.+450    	; 0x238a <_7SEGMENT_u8ShowNumber+0x248>
		{
			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
    21c8:	eb 81       	ldd	r30, Y+3	; 0x03
    21ca:	fc 81       	ldd	r31, Y+4	; 0x04
    21cc:	85 81       	ldd	r24, Z+5	; 0x05
    21ce:	85 30       	cpi	r24, 0x05	; 5
    21d0:	08 f0       	brcs	.+2      	; 0x21d4 <_7SEGMENT_u8ShowNumber+0x92>
    21d2:	93 c0       	rjmp	.+294    	; 0x22fa <_7SEGMENT_u8ShowNumber+0x1b8>
			{
				switch (_7SEGMENT->_7SEGMENT_u8commontype)
    21d4:	eb 81       	ldd	r30, Y+3	; 0x03
    21d6:	fc 81       	ldd	r31, Y+4	; 0x04
    21d8:	83 81       	ldd	r24, Z+3	; 0x03
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	39 87       	std	Y+9, r19	; 0x09
    21e0:	28 87       	std	Y+8, r18	; 0x08
    21e2:	48 85       	ldd	r20, Y+8	; 0x08
    21e4:	59 85       	ldd	r21, Y+9	; 0x09
    21e6:	41 15       	cp	r20, r1
    21e8:	51 05       	cpc	r21, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <_7SEGMENT_u8ShowNumber+0xac>
    21ec:	46 c0       	rjmp	.+140    	; 0x227a <_7SEGMENT_u8ShowNumber+0x138>
    21ee:	88 85       	ldd	r24, Y+8	; 0x08
    21f0:	99 85       	ldd	r25, Y+9	; 0x09
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	91 05       	cpc	r25, r1
    21f6:	09 f0       	breq	.+2      	; 0x21fa <_7SEGMENT_u8ShowNumber+0xb8>
    21f8:	cd c0       	rjmp	.+410    	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
				{
					case _7SEGMENT_u8COMMONCATHODE:
					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    21fa:	eb 81       	ldd	r30, Y+3	; 0x03
    21fc:	fc 81       	ldd	r31, Y+4	; 0x04
    21fe:	81 81       	ldd	r24, Z+1	; 0x01
    2200:	eb 81       	ldd	r30, Y+3	; 0x03
    2202:	fc 81       	ldd	r31, Y+4	; 0x04
    2204:	92 81       	ldd	r25, Z+2	; 0x02
    2206:	69 2f       	mov	r22, r25
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
					for (i=0;i<4;i++)
    220e:	19 82       	std	Y+1, r1	; 0x01
    2210:	30 c0       	rjmp	.+96     	; 0x2272 <_7SEGMENT_u8ShowNumber+0x130>
					{
						if ((copy_u8number & (1 <<i)))
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	28 2f       	mov	r18, r24
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	99 27       	eor	r25, r25
    221c:	87 fd       	sbrc	r24, 7
    221e:	90 95       	com	r25
    2220:	a9 01       	movw	r20, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <_7SEGMENT_u8ShowNumber+0xe6>
    2224:	55 95       	asr	r21
    2226:	47 95       	ror	r20
    2228:	8a 95       	dec	r24
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <_7SEGMENT_u8ShowNumber+0xe2>
    222c:	ca 01       	movw	r24, r20
    222e:	81 70       	andi	r24, 0x01	; 1
    2230:	90 70       	andi	r25, 0x00	; 0
    2232:	88 23       	and	r24, r24
    2234:	71 f0       	breq	.+28     	; 0x2252 <_7SEGMENT_u8ShowNumber+0x110>
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_HIGH);
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	20 81       	ld	r18, Z
    223c:	eb 81       	ldd	r30, Y+3	; 0x03
    223e:	fc 81       	ldd	r31, Y+4	; 0x04
    2240:	95 81       	ldd	r25, Z+5	; 0x05
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	98 0f       	add	r25, r24
    2246:	82 2f       	mov	r24, r18
    2248:	69 2f       	mov	r22, r25
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    2250:	0d c0       	rjmp	.+26     	; 0x226c <_7SEGMENT_u8ShowNumber+0x12a>
						}
						else
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_LOW);
    2252:	eb 81       	ldd	r30, Y+3	; 0x03
    2254:	fc 81       	ldd	r31, Y+4	; 0x04
    2256:	20 81       	ld	r18, Z
    2258:	eb 81       	ldd	r30, Y+3	; 0x03
    225a:	fc 81       	ldd	r31, Y+4	; 0x04
    225c:	95 81       	ldd	r25, Z+5	; 0x05
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	98 0f       	add	r25, r24
    2262:	82 2f       	mov	r24, r18
    2264:	69 2f       	mov	r22, r25
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
			{
				switch (_7SEGMENT->_7SEGMENT_u8commontype)
				{
					case _7SEGMENT_u8COMMONCATHODE:
					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
					for (i=0;i<4;i++)
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	8f 5f       	subi	r24, 0xFF	; 255
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	84 30       	cpi	r24, 0x04	; 4
    2276:	6c f2       	brlt	.-102    	; 0x2212 <_7SEGMENT_u8ShowNumber+0xd0>
    2278:	8d c0       	rjmp	.+282    	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
						}
					}
					break;
					case _7SEGMENT_u8COMMONANODE:

					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    227a:	eb 81       	ldd	r30, Y+3	; 0x03
    227c:	fc 81       	ldd	r31, Y+4	; 0x04
    227e:	81 81       	ldd	r24, Z+1	; 0x01
    2280:	eb 81       	ldd	r30, Y+3	; 0x03
    2282:	fc 81       	ldd	r31, Y+4	; 0x04
    2284:	92 81       	ldd	r25, Z+2	; 0x02
    2286:	69 2f       	mov	r22, r25
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
					for (i = 0; i < 4; i++)
    228e:	19 82       	std	Y+1, r1	; 0x01
    2290:	30 c0       	rjmp	.+96     	; 0x22f2 <_7SEGMENT_u8ShowNumber+0x1b0>
					{
						if ((copy_u8number & (1 << i)))
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	99 27       	eor	r25, r25
    229c:	87 fd       	sbrc	r24, 7
    229e:	90 95       	com	r25
    22a0:	a9 01       	movw	r20, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <_7SEGMENT_u8ShowNumber+0x166>
    22a4:	55 95       	asr	r21
    22a6:	47 95       	ror	r20
    22a8:	8a 95       	dec	r24
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <_7SEGMENT_u8ShowNumber+0x162>
    22ac:	ca 01       	movw	r24, r20
    22ae:	81 70       	andi	r24, 0x01	; 1
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	88 23       	and	r24, r24
    22b4:	71 f0       	breq	.+28     	; 0x22d2 <_7SEGMENT_u8ShowNumber+0x190>
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_LOW);
    22b6:	eb 81       	ldd	r30, Y+3	; 0x03
    22b8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ba:	20 81       	ld	r18, Z
    22bc:	eb 81       	ldd	r30, Y+3	; 0x03
    22be:	fc 81       	ldd	r31, Y+4	; 0x04
    22c0:	95 81       	ldd	r25, Z+5	; 0x05
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	98 0f       	add	r25, r24
    22c6:	82 2f       	mov	r24, r18
    22c8:	69 2f       	mov	r22, r25
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <_7SEGMENT_u8ShowNumber+0x1aa>
						}
						else
						{
							DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_HIGH);
    22d2:	eb 81       	ldd	r30, Y+3	; 0x03
    22d4:	fc 81       	ldd	r31, Y+4	; 0x04
    22d6:	20 81       	ld	r18, Z
    22d8:	eb 81       	ldd	r30, Y+3	; 0x03
    22da:	fc 81       	ldd	r31, Y+4	; 0x04
    22dc:	95 81       	ldd	r25, Z+5	; 0x05
    22de:	89 81       	ldd	r24, Y+1	; 0x01
    22e0:	98 0f       	add	r25, r24
    22e2:	82 2f       	mov	r24, r18
    22e4:	69 2f       	mov	r22, r25
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
					}
					break;
					case _7SEGMENT_u8COMMONANODE:

					DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
					for (i = 0; i < 4; i++)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	84 30       	cpi	r24, 0x04	; 4
    22f6:	6c f2       	brlt	.-102    	; 0x2292 <_7SEGMENT_u8ShowNumber+0x150>
    22f8:	4d c0       	rjmp	.+154    	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>


			}
			else
			{
				local_u8error=1;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	8a 83       	std	Y+2, r24	; 0x02
    22fe:	4a c0       	rjmp	.+148    	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
			}
			break;
			case _7SEGMENT_u8Nodecoder:
			switch (_7SEGMENT->_7SEGMENT_u8commontype)
    2300:	eb 81       	ldd	r30, Y+3	; 0x03
    2302:	fc 81       	ldd	r31, Y+4	; 0x04
    2304:	83 81       	ldd	r24, Z+3	; 0x03
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	3f 83       	std	Y+7, r19	; 0x07
    230c:	2e 83       	std	Y+6, r18	; 0x06
    230e:	4e 81       	ldd	r20, Y+6	; 0x06
    2310:	5f 81       	ldd	r21, Y+7	; 0x07
    2312:	41 15       	cp	r20, r1
    2314:	51 05       	cpc	r21, r1
    2316:	f1 f0       	breq	.+60     	; 0x2354 <_7SEGMENT_u8ShowNumber+0x212>
    2318:	8e 81       	ldd	r24, Y+6	; 0x06
    231a:	9f 81       	ldd	r25, Y+7	; 0x07
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	91 05       	cpc	r25, r1
    2320:	c9 f5       	brne	.+114    	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
			{
				case _7SEGMENT_u8COMMONCATHODE:
				DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    2322:	eb 81       	ldd	r30, Y+3	; 0x03
    2324:	fc 81       	ldd	r31, Y+4	; 0x04
    2326:	81 81       	ldd	r24, Z+1	; 0x01
    2328:	eb 81       	ldd	r30, Y+3	; 0x03
    232a:	fc 81       	ldd	r31, Y+4	; 0x04
    232c:	92 81       	ldd	r25, Z+2	; 0x02
    232e:	69 2f       	mov	r22, r25
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
				DIO_SetPortValue(_7SEGMENT->_7SEGMENT_u8port, _7SEGMENTNUM[copy_u8number]);
    2336:	eb 81       	ldd	r30, Y+3	; 0x03
    2338:	fc 81       	ldd	r31, Y+4	; 0x04
    233a:	20 81       	ld	r18, Z
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	fc 01       	movw	r30, r24
    2344:	ee 52       	subi	r30, 0x2E	; 46
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	90 81       	ld	r25, Z
    234a:	82 2f       	mov	r24, r18
    234c:	69 2f       	mov	r22, r25
    234e:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>
    2352:	20 c0       	rjmp	.+64     	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
				break;
				case _7SEGMENT_u8COMMONANODE:
				DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    2354:	eb 81       	ldd	r30, Y+3	; 0x03
    2356:	fc 81       	ldd	r31, Y+4	; 0x04
    2358:	81 81       	ldd	r24, Z+1	; 0x01
    235a:	eb 81       	ldd	r30, Y+3	; 0x03
    235c:	fc 81       	ldd	r31, Y+4	; 0x04
    235e:	92 81       	ldd	r25, Z+2	; 0x02
    2360:	69 2f       	mov	r22, r25
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
				DIO_SetPortValue(_7SEGMENT->_7SEGMENT_u8port, ~(_7SEGMENTNUM[copy_u8number]));
    2368:	eb 81       	ldd	r30, Y+3	; 0x03
    236a:	fc 81       	ldd	r31, Y+4	; 0x04
    236c:	20 81       	ld	r18, Z
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	fc 01       	movw	r30, r24
    2376:	ee 52       	subi	r30, 0x2E	; 46
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	98 2f       	mov	r25, r24
    237e:	90 95       	com	r25
    2380:	82 2f       	mov	r24, r18
    2382:	69 2f       	mov	r22, r25
    2384:	0e 94 6e 09 	call	0x12dc	; 0x12dc <DIO_SetPortValue>
    2388:	05 c0       	rjmp	.+10     	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
				break;
			}
			break;
			default: local_u8error = 1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <_7SEGMENT_u8ShowNumber+0x252>
		}
	}
	else
	{
		local_u8error = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8error;
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2396:	2b 96       	adiw	r28, 0x0b	; 11
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <_7SEGMENT_u8HideNumber>:
*
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8HideNumber(const _7SEGMENT_T  *_7SEGMENT)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <_7SEGMENT_u8HideNumber+0x6>
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <_7SEGMENT_u8HideNumber+0x8>
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	9b 83       	std	Y+3, r25	; 0x03
    23b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8error = 0;
    23ba:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2))
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	9b 81       	ldd	r25, Y+3	; 0x03
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	d1 f1       	breq	.+116    	; 0x2438 <_7SEGMENT_u8HideNumber+0x90>
    23c4:	ea 81       	ldd	r30, Y+2	; 0x02
    23c6:	fb 81       	ldd	r31, Y+3	; 0x03
    23c8:	80 81       	ld	r24, Z
    23ca:	84 30       	cpi	r24, 0x04	; 4
    23cc:	a8 f5       	brcc	.+106    	; 0x2438 <_7SEGMENT_u8HideNumber+0x90>
    23ce:	ea 81       	ldd	r30, Y+2	; 0x02
    23d0:	fb 81       	ldd	r31, Y+3	; 0x03
    23d2:	82 81       	ldd	r24, Z+2	; 0x02
    23d4:	87 30       	cpi	r24, 0x07	; 7
    23d6:	80 f5       	brcc	.+96     	; 0x2438 <_7SEGMENT_u8HideNumber+0x90>
    23d8:	ea 81       	ldd	r30, Y+2	; 0x02
    23da:	fb 81       	ldd	r31, Y+3	; 0x03
    23dc:	81 81       	ldd	r24, Z+1	; 0x01
    23de:	84 30       	cpi	r24, 0x04	; 4
    23e0:	58 f5       	brcc	.+86     	; 0x2438 <_7SEGMENT_u8HideNumber+0x90>
    23e2:	ea 81       	ldd	r30, Y+2	; 0x02
    23e4:	fb 81       	ldd	r31, Y+3	; 0x03
    23e6:	83 81       	ldd	r24, Z+3	; 0x03
    23e8:	82 30       	cpi	r24, 0x02	; 2
    23ea:	30 f5       	brcc	.+76     	; 0x2438 <_7SEGMENT_u8HideNumber+0x90>
	{
		switch (_7SEGMENT->_7SEGMENT_u8commontype)
    23ec:	ea 81       	ldd	r30, Y+2	; 0x02
    23ee:	fb 81       	ldd	r31, Y+3	; 0x03
    23f0:	83 81       	ldd	r24, Z+3	; 0x03
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3d 83       	std	Y+5, r19	; 0x05
    23f8:	2c 83       	std	Y+4, r18	; 0x04
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	81 f0       	breq	.+32     	; 0x2422 <_7SEGMENT_u8HideNumber+0x7a>
    2402:	2c 81       	ldd	r18, Y+4	; 0x04
    2404:	3d 81       	ldd	r19, Y+5	; 0x05
    2406:	21 30       	cpi	r18, 0x01	; 1
    2408:	31 05       	cpc	r19, r1
    240a:	c1 f4       	brne	.+48     	; 0x243c <_7SEGMENT_u8HideNumber+0x94>
		{
			case _7SEGMENT_u8COMMONCATHODE:
			DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_HIGH);
    240c:	ea 81       	ldd	r30, Y+2	; 0x02
    240e:	fb 81       	ldd	r31, Y+3	; 0x03
    2410:	81 81       	ldd	r24, Z+1	; 0x01
    2412:	ea 81       	ldd	r30, Y+2	; 0x02
    2414:	fb 81       	ldd	r31, Y+3	; 0x03
    2416:	92 81       	ldd	r25, Z+2	; 0x02
    2418:	69 2f       	mov	r22, r25
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    2420:	0d c0       	rjmp	.+26     	; 0x243c <_7SEGMENT_u8HideNumber+0x94>
			break;
			case _7SEGMENT_u8COMMONANODE:
			DIO_SetPinValue(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_LOW);
    2422:	ea 81       	ldd	r30, Y+2	; 0x02
    2424:	fb 81       	ldd	r31, Y+3	; 0x03
    2426:	81 81       	ldd	r24, Z+1	; 0x01
    2428:	ea 81       	ldd	r30, Y+2	; 0x02
    242a:	fb 81       	ldd	r31, Y+3	; 0x03
    242c:	92 81       	ldd	r25, Z+2	; 0x02
    242e:	69 2f       	mov	r22, r25
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <DIO_SetPinValue>
    2436:	02 c0       	rjmp	.+4      	; 0x243c <_7SEGMENT_u8HideNumber+0x94>

	}

	else
	{
		local_u8error = 1;
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8error;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <_7SEGMENT_u8Initialize>:
*
* @param _7SEGMENT Pointer to the _7SEGMENT_T structure.
* @return Status indicating success (0) or failure (1).
*/
u8 _7SEGMENT_u8Initialize(const _7SEGMENT_T  *_7SEGMENT)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	00 d0       	rcall	.+0      	; 0x2454 <_7SEGMENT_u8Initialize+0x6>
    2454:	00 d0       	rcall	.+0      	; 0x2456 <_7SEGMENT_u8Initialize+0x8>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <_7SEGMENT_u8Initialize+0xa>
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	9c 83       	std	Y+4, r25	; 0x04
    245e:	8b 83       	std	Y+3, r24	; 0x03
	u8 local_u8error = 0;
    2460:	1a 82       	std	Y+2, r1	; 0x02
	u8 i = 0;
    2462:	19 82       	std	Y+1, r1	; 0x01
	if ((_7SEGMENT != NULL) && (_7SEGMENT->_7SEGMENT_u8port <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8enablepin < DIO_u8PIN7) && (_7SEGMENT->_7SEGMENT_u8enableport <= DIO_u8PORTD) && (_7SEGMENT->_7SEGMENT_u8commontype < 2) )
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	09 f4       	brne	.+2      	; 0x246e <_7SEGMENT_u8Initialize+0x20>
    246c:	64 c0       	rjmp	.+200    	; 0x2536 <_7SEGMENT_u8Initialize+0xe8>
    246e:	eb 81       	ldd	r30, Y+3	; 0x03
    2470:	fc 81       	ldd	r31, Y+4	; 0x04
    2472:	80 81       	ld	r24, Z
    2474:	84 30       	cpi	r24, 0x04	; 4
    2476:	08 f0       	brcs	.+2      	; 0x247a <_7SEGMENT_u8Initialize+0x2c>
    2478:	5e c0       	rjmp	.+188    	; 0x2536 <_7SEGMENT_u8Initialize+0xe8>
    247a:	eb 81       	ldd	r30, Y+3	; 0x03
    247c:	fc 81       	ldd	r31, Y+4	; 0x04
    247e:	82 81       	ldd	r24, Z+2	; 0x02
    2480:	87 30       	cpi	r24, 0x07	; 7
    2482:	08 f0       	brcs	.+2      	; 0x2486 <_7SEGMENT_u8Initialize+0x38>
    2484:	58 c0       	rjmp	.+176    	; 0x2536 <_7SEGMENT_u8Initialize+0xe8>
    2486:	eb 81       	ldd	r30, Y+3	; 0x03
    2488:	fc 81       	ldd	r31, Y+4	; 0x04
    248a:	81 81       	ldd	r24, Z+1	; 0x01
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	08 f0       	brcs	.+2      	; 0x2492 <_7SEGMENT_u8Initialize+0x44>
    2490:	52 c0       	rjmp	.+164    	; 0x2536 <_7SEGMENT_u8Initialize+0xe8>
    2492:	eb 81       	ldd	r30, Y+3	; 0x03
    2494:	fc 81       	ldd	r31, Y+4	; 0x04
    2496:	83 81       	ldd	r24, Z+3	; 0x03
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	08 f0       	brcs	.+2      	; 0x249e <_7SEGMENT_u8Initialize+0x50>
    249c:	4c c0       	rjmp	.+152    	; 0x2536 <_7SEGMENT_u8Initialize+0xe8>
	{
		switch (_7SEGMENT->_7SEGMENT_u8Decoders)
    249e:	eb 81       	ldd	r30, Y+3	; 0x03
    24a0:	fc 81       	ldd	r31, Y+4	; 0x04
    24a2:	84 81       	ldd	r24, Z+4	; 0x04
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	3e 83       	std	Y+6, r19	; 0x06
    24aa:	2d 83       	std	Y+5, r18	; 0x05
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	69 f1       	breq	.+90     	; 0x250e <_7SEGMENT_u8Initialize+0xc0>
    24b4:	2d 81       	ldd	r18, Y+5	; 0x05
    24b6:	3e 81       	ldd	r19, Y+6	; 0x06
    24b8:	21 30       	cpi	r18, 0x01	; 1
    24ba:	31 05       	cpc	r19, r1
    24bc:	c9 f5       	brne	.+114    	; 0x2530 <_7SEGMENT_u8Initialize+0xe2>
		{

			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
    24be:	eb 81       	ldd	r30, Y+3	; 0x03
    24c0:	fc 81       	ldd	r31, Y+4	; 0x04
    24c2:	85 81       	ldd	r24, Z+5	; 0x05
    24c4:	85 30       	cpi	r24, 0x05	; 5
    24c6:	00 f5       	brcc	.+64     	; 0x2508 <_7SEGMENT_u8Initialize+0xba>
			{
				for (i = 0; i < 4; i++)
    24c8:	19 82       	std	Y+1, r1	; 0x01
    24ca:	10 c0       	rjmp	.+32     	; 0x24ec <_7SEGMENT_u8Initialize+0x9e>
				{
					DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_OUTPUT);
    24cc:	eb 81       	ldd	r30, Y+3	; 0x03
    24ce:	fc 81       	ldd	r31, Y+4	; 0x04
    24d0:	20 81       	ld	r18, Z
    24d2:	eb 81       	ldd	r30, Y+3	; 0x03
    24d4:	fc 81       	ldd	r31, Y+4	; 0x04
    24d6:	95 81       	ldd	r25, Z+5	; 0x05
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	98 0f       	add	r25, r24
    24dc:	82 2f       	mov	r24, r18
    24de:	69 2f       	mov	r22, r25
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
		{

			case _7SEGMENT_u8Decoder:
			if ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin < 5))
			{
				for (i = 0; i < 4; i++)
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	89 83       	std	Y+1, r24	; 0x01
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	68 f3       	brcs	.-38     	; 0x24cc <_7SEGMENT_u8Initialize+0x7e>
				{
					DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8port, ((_7SEGMENT->_7SEGMENT_u8Decoderstartpin) + i), DIO_u8PIN_OUTPUT);
				}
				DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_OUTPUT);
    24f2:	eb 81       	ldd	r30, Y+3	; 0x03
    24f4:	fc 81       	ldd	r31, Y+4	; 0x04
    24f6:	81 81       	ldd	r24, Z+1	; 0x01
    24f8:	eb 81       	ldd	r30, Y+3	; 0x03
    24fa:	fc 81       	ldd	r31, Y+4	; 0x04
    24fc:	92 81       	ldd	r25, Z+2	; 0x02
    24fe:	69 2f       	mov	r22, r25
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
    2506:	19 c0       	rjmp	.+50     	; 0x253a <_7SEGMENT_u8Initialize+0xec>

			}
			else
			{
				local_u8error=1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	8a 83       	std	Y+2, r24	; 0x02
    250c:	16 c0       	rjmp	.+44     	; 0x253a <_7SEGMENT_u8Initialize+0xec>
			}

			break;
			case _7SEGMENT_u8Nodecoder:

			DIO_SetPortDirection(_7SEGMENT->_7SEGMENT_u8port, DIO_u8PORT_OUTPUT);
    250e:	eb 81       	ldd	r30, Y+3	; 0x03
    2510:	fc 81       	ldd	r31, Y+4	; 0x04
    2512:	80 81       	ld	r24, Z
    2514:	6f ef       	ldi	r22, 0xFF	; 255
    2516:	0e 94 14 08 	call	0x1028	; 0x1028 <DIO_SetPortDirection>
			DIO_SetPinDirection(_7SEGMENT->_7SEGMENT_u8enableport, _7SEGMENT->_7SEGMENT_u8enablepin, DIO_u8PIN_OUTPUT);
    251a:	eb 81       	ldd	r30, Y+3	; 0x03
    251c:	fc 81       	ldd	r31, Y+4	; 0x04
    251e:	81 81       	ldd	r24, Z+1	; 0x01
    2520:	eb 81       	ldd	r30, Y+3	; 0x03
    2522:	fc 81       	ldd	r31, Y+4	; 0x04
    2524:	92 81       	ldd	r25, Z+2	; 0x02
    2526:	69 2f       	mov	r22, r25
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 02 07 	call	0xe04	; 0xe04 <DIO_SetPinDirection>
    252e:	05 c0       	rjmp	.+10     	; 0x253a <_7SEGMENT_u8Initialize+0xec>

			break;
			default:
			local_u8error = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	8a 83       	std	Y+2, r24	; 0x02
    2534:	02 c0       	rjmp	.+4      	; 0x253a <_7SEGMENT_u8Initialize+0xec>
		}
	}

	else
	{
		local_u8error = 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	8a 83       	std	Y+2, r24	; 0x02
	}
	return local_u8error;
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    253c:	26 96       	adiw	r28, 0x06	; 6
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	cf 91       	pop	r28
    254a:	df 91       	pop	r29
    254c:	08 95       	ret

0000254e <start>:
#include "../../../MCAL/EXTI/EXTI_interface.h"
#include <util/delay.h>
u8 P1 = 0,P2 = 0,res1 = 0,res2 = 0,turns=5;
u8 row_ball=0,col_ball=1;
void start(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	6c 97       	sbiw	r28, 0x1c	; 28
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    2562:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	CLCD_voidInit();
    2566:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <CLCD_voidInit>
	CLCD_voidSendString("welcome !");
    256a:	80 e6       	ldi	r24, 0x60	; 96
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	aa ef       	ldi	r26, 0xFA	; 250
    2578:	b3 e4       	ldi	r27, 0x43	; 67
    257a:	89 8f       	std	Y+25, r24	; 0x19
    257c:	9a 8f       	std	Y+26, r25	; 0x1a
    257e:	ab 8f       	std	Y+27, r26	; 0x1b
    2580:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2582:	69 8d       	ldd	r22, Y+25	; 0x19
    2584:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2586:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2588:	9c 8d       	ldd	r25, Y+28	; 0x1c
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	4a e7       	ldi	r20, 0x7A	; 122
    2590:	53 e4       	ldi	r21, 0x43	; 67
    2592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	8d 8b       	std	Y+21, r24	; 0x15
    259c:	9e 8b       	std	Y+22, r25	; 0x16
    259e:	af 8b       	std	Y+23, r26	; 0x17
    25a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25a2:	6d 89       	ldd	r22, Y+21	; 0x15
    25a4:	7e 89       	ldd	r23, Y+22	; 0x16
    25a6:	8f 89       	ldd	r24, Y+23	; 0x17
    25a8:	98 8d       	ldd	r25, Y+24	; 0x18
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e8       	ldi	r20, 0x80	; 128
    25b0:	5f e3       	ldi	r21, 0x3F	; 63
    25b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b6:	88 23       	and	r24, r24
    25b8:	2c f4       	brge	.+10     	; 0x25c4 <start+0x76>
		__ticks = 1;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	9c 8b       	std	Y+20, r25	; 0x14
    25c0:	8b 8b       	std	Y+19, r24	; 0x13
    25c2:	3f c0       	rjmp	.+126    	; 0x2642 <start+0xf4>
	else if (__tmp > 65535)
    25c4:	6d 89       	ldd	r22, Y+21	; 0x15
    25c6:	7e 89       	ldd	r23, Y+22	; 0x16
    25c8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ca:	98 8d       	ldd	r25, Y+24	; 0x18
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	3f ef       	ldi	r19, 0xFF	; 255
    25d0:	4f e7       	ldi	r20, 0x7F	; 127
    25d2:	57 e4       	ldi	r21, 0x47	; 71
    25d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d8:	18 16       	cp	r1, r24
    25da:	4c f5       	brge	.+82     	; 0x262e <start+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25dc:	69 8d       	ldd	r22, Y+25	; 0x19
    25de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e2       	ldi	r20, 0x20	; 32
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	bc 01       	movw	r22, r24
    25f6:	cd 01       	movw	r24, r26
    25f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	9c 8b       	std	Y+20, r25	; 0x14
    2602:	8b 8b       	std	Y+19, r24	; 0x13
    2604:	0f c0       	rjmp	.+30     	; 0x2624 <start+0xd6>
    2606:	89 e1       	ldi	r24, 0x19	; 25
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9a 8b       	std	Y+18, r25	; 0x12
    260c:	89 8b       	std	Y+17, r24	; 0x11
    260e:	89 89       	ldd	r24, Y+17	; 0x11
    2610:	9a 89       	ldd	r25, Y+18	; 0x12
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <start+0xc4>
    2616:	9a 8b       	std	Y+18, r25	; 0x12
    2618:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	9c 8b       	std	Y+20, r25	; 0x14
    2622:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2624:	8b 89       	ldd	r24, Y+19	; 0x13
    2626:	9c 89       	ldd	r25, Y+20	; 0x14
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	69 f7       	brne	.-38     	; 0x2606 <start+0xb8>
    262c:	14 c0       	rjmp	.+40     	; 0x2656 <start+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262e:	6d 89       	ldd	r22, Y+21	; 0x15
    2630:	7e 89       	ldd	r23, Y+22	; 0x16
    2632:	8f 89       	ldd	r24, Y+23	; 0x17
    2634:	98 8d       	ldd	r25, Y+24	; 0x18
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	9c 8b       	std	Y+20, r25	; 0x14
    2640:	8b 8b       	std	Y+19, r24	; 0x13
    2642:	8b 89       	ldd	r24, Y+19	; 0x13
    2644:	9c 89       	ldd	r25, Y+20	; 0x14
    2646:	98 8b       	std	Y+16, r25	; 0x10
    2648:	8f 87       	std	Y+15, r24	; 0x0f
    264a:	8f 85       	ldd	r24, Y+15	; 0x0f
    264c:	98 89       	ldd	r25, Y+16	; 0x10
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <start+0x100>
    2652:	98 8b       	std	Y+16, r25	; 0x10
    2654:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	CLCD_voidClearLCD();
    2656:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
	CLCD_voidSendString("PingPong");
    265a:	8a e6       	ldi	r24, 0x6A	; 106
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	60 e0       	ldi	r22, 0x00	; 0
    2666:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
	CLCD_voidSendString("Game");
    266a:	83 e7       	ldi	r24, 0x73	; 115
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	aa ef       	ldi	r26, 0xFA	; 250
    2678:	b3 e4       	ldi	r27, 0x43	; 67
    267a:	8b 87       	std	Y+11, r24	; 0x0b
    267c:	9c 87       	std	Y+12, r25	; 0x0c
    267e:	ad 87       	std	Y+13, r26	; 0x0d
    2680:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2682:	6b 85       	ldd	r22, Y+11	; 0x0b
    2684:	7c 85       	ldd	r23, Y+12	; 0x0c
    2686:	8d 85       	ldd	r24, Y+13	; 0x0d
    2688:	9e 85       	ldd	r25, Y+14	; 0x0e
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a e7       	ldi	r20, 0x7A	; 122
    2690:	53 e4       	ldi	r21, 0x43	; 67
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	8f 83       	std	Y+7, r24	; 0x07
    269c:	98 87       	std	Y+8, r25	; 0x08
    269e:	a9 87       	std	Y+9, r26	; 0x09
    26a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e8       	ldi	r20, 0x80	; 128
    26b0:	5f e3       	ldi	r21, 0x3F	; 63
    26b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b6:	88 23       	and	r24, r24
    26b8:	2c f4       	brge	.+10     	; 0x26c4 <start+0x176>
		__ticks = 1;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	3f c0       	rjmp	.+126    	; 0x2742 <start+0x1f4>
	else if (__tmp > 65535)
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	3f ef       	ldi	r19, 0xFF	; 255
    26d0:	4f e7       	ldi	r20, 0x7F	; 127
    26d2:	57 e4       	ldi	r21, 0x47	; 71
    26d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d8:	18 16       	cp	r1, r24
    26da:	4c f5       	brge	.+82     	; 0x272e <start+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26de:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	40 e2       	ldi	r20, 0x20	; 32
    26ea:	51 e4       	ldi	r21, 0x41	; 65
    26ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	bc 01       	movw	r22, r24
    26f6:	cd 01       	movw	r24, r26
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	0f c0       	rjmp	.+30     	; 0x2724 <start+0x1d6>
    2706:	89 e1       	ldi	r24, 0x19	; 25
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	9c 83       	std	Y+4, r25	; 0x04
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	9c 81       	ldd	r25, Y+4	; 0x04
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <start+0x1c4>
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	9e 81       	ldd	r25, Y+6	; 0x06
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	69 f7       	brne	.-38     	; 0x2706 <start+0x1b8>
    272c:	14 c0       	rjmp	.+40     	; 0x2756 <start+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272e:	6f 81       	ldd	r22, Y+7	; 0x07
    2730:	78 85       	ldd	r23, Y+8	; 0x08
    2732:	89 85       	ldd	r24, Y+9	; 0x09
    2734:	9a 85       	ldd	r25, Y+10	; 0x0a
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	9e 83       	std	Y+6, r25	; 0x06
    2740:	8d 83       	std	Y+5, r24	; 0x05
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	01 97       	sbiw	r24, 0x01	; 1
    2750:	f1 f7       	brne	.-4      	; 0x274e <start+0x200>
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	CLCD_voidClearLCD();
    2756:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
}
    275a:	6c 96       	adiw	r28, 0x1c	; 28
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <handling>:
void handling()
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	aa 97       	sbiw	r28, 0x2a	; 42
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	aa ef       	ldi	r26, 0xFA	; 250
    2786:	b3 e4       	ldi	r27, 0x43	; 67
    2788:	8f a3       	std	Y+39, r24	; 0x27
    278a:	98 a7       	std	Y+40, r25	; 0x28
    278c:	a9 a7       	std	Y+41, r26	; 0x29
    278e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2790:	6f a1       	ldd	r22, Y+39	; 0x27
    2792:	78 a5       	ldd	r23, Y+40	; 0x28
    2794:	89 a5       	ldd	r24, Y+41	; 0x29
    2796:	9a a5       	ldd	r25, Y+42	; 0x2a
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	4a e7       	ldi	r20, 0x7A	; 122
    279e:	53 e4       	ldi	r21, 0x43	; 67
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	8b a3       	std	Y+35, r24	; 0x23
    27aa:	9c a3       	std	Y+36, r25	; 0x24
    27ac:	ad a3       	std	Y+37, r26	; 0x25
    27ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27b0:	6b a1       	ldd	r22, Y+35	; 0x23
    27b2:	7c a1       	ldd	r23, Y+36	; 0x24
    27b4:	8d a1       	ldd	r24, Y+37	; 0x25
    27b6:	9e a1       	ldd	r25, Y+38	; 0x26
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e8       	ldi	r20, 0x80	; 128
    27be:	5f e3       	ldi	r21, 0x3F	; 63
    27c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c4:	88 23       	and	r24, r24
    27c6:	2c f4       	brge	.+10     	; 0x27d2 <handling+0x66>
		__ticks = 1;
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	9a a3       	std	Y+34, r25	; 0x22
    27ce:	89 a3       	std	Y+33, r24	; 0x21
    27d0:	3f c0       	rjmp	.+126    	; 0x2850 <handling+0xe4>
	else if (__tmp > 65535)
    27d2:	6b a1       	ldd	r22, Y+35	; 0x23
    27d4:	7c a1       	ldd	r23, Y+36	; 0x24
    27d6:	8d a1       	ldd	r24, Y+37	; 0x25
    27d8:	9e a1       	ldd	r25, Y+38	; 0x26
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	3f ef       	ldi	r19, 0xFF	; 255
    27de:	4f e7       	ldi	r20, 0x7F	; 127
    27e0:	57 e4       	ldi	r21, 0x47	; 71
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	4c f5       	brge	.+82     	; 0x283c <handling+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ea:	6f a1       	ldd	r22, Y+39	; 0x27
    27ec:	78 a5       	ldd	r23, Y+40	; 0x28
    27ee:	89 a5       	ldd	r24, Y+41	; 0x29
    27f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	40 e2       	ldi	r20, 0x20	; 32
    27f8:	51 e4       	ldi	r21, 0x41	; 65
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	bc 01       	movw	r22, r24
    2804:	cd 01       	movw	r24, r26
    2806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	9a a3       	std	Y+34, r25	; 0x22
    2810:	89 a3       	std	Y+33, r24	; 0x21
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <handling+0xc6>
    2814:	89 e1       	ldi	r24, 0x19	; 25
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	98 a3       	std	Y+32, r25	; 0x20
    281a:	8f 8f       	std	Y+31, r24	; 0x1f
    281c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    281e:	98 a1       	ldd	r25, Y+32	; 0x20
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <handling+0xb4>
    2824:	98 a3       	std	Y+32, r25	; 0x20
    2826:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2828:	89 a1       	ldd	r24, Y+33	; 0x21
    282a:	9a a1       	ldd	r25, Y+34	; 0x22
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	9a a3       	std	Y+34, r25	; 0x22
    2830:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2832:	89 a1       	ldd	r24, Y+33	; 0x21
    2834:	9a a1       	ldd	r25, Y+34	; 0x22
    2836:	00 97       	sbiw	r24, 0x00	; 0
    2838:	69 f7       	brne	.-38     	; 0x2814 <handling+0xa8>
    283a:	14 c0       	rjmp	.+40     	; 0x2864 <handling+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    283c:	6b a1       	ldd	r22, Y+35	; 0x23
    283e:	7c a1       	ldd	r23, Y+36	; 0x24
    2840:	8d a1       	ldd	r24, Y+37	; 0x25
    2842:	9e a1       	ldd	r25, Y+38	; 0x26
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	9a a3       	std	Y+34, r25	; 0x22
    284e:	89 a3       	std	Y+33, r24	; 0x21
    2850:	89 a1       	ldd	r24, Y+33	; 0x21
    2852:	9a a1       	ldd	r25, Y+34	; 0x22
    2854:	9e 8f       	std	Y+30, r25	; 0x1e
    2856:	8d 8f       	std	Y+29, r24	; 0x1d
    2858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <handling+0xf0>
    2860:	9e 8f       	std	Y+30, r25	; 0x1e
    2862:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);


	if(P1>P2)
    2864:	90 91 e4 00 	lds	r25, 0x00E4
    2868:	80 91 e5 00 	lds	r24, 0x00E5
    286c:	89 17       	cp	r24, r25
    286e:	08 f0       	brcs	.+2      	; 0x2872 <handling+0x106>
    2870:	8b c0       	rjmp	.+278    	; 0x2988 <handling+0x21c>
	{
		CLCD_voidClearLCD();
    2872:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
		CLCD_voidGoToXY(0,0);
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
		CLCD_voidSendString("Player 1 Won...");
    287e:	88 e7       	ldi	r24, 0x78	; 120
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
		res1++;
    2886:	80 91 e6 00 	lds	r24, 0x00E6
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	80 93 e6 00 	sts	0x00E6, r24
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	aa ef       	ldi	r26, 0xFA	; 250
    2896:	b3 e4       	ldi	r27, 0x43	; 67
    2898:	89 8f       	std	Y+25, r24	; 0x19
    289a:	9a 8f       	std	Y+26, r25	; 0x1a
    289c:	ab 8f       	std	Y+27, r26	; 0x1b
    289e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a0:	69 8d       	ldd	r22, Y+25	; 0x19
    28a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	4a e7       	ldi	r20, 0x7A	; 122
    28ae:	53 e4       	ldi	r21, 0x43	; 67
    28b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	8d 8b       	std	Y+21, r24	; 0x15
    28ba:	9e 8b       	std	Y+22, r25	; 0x16
    28bc:	af 8b       	std	Y+23, r26	; 0x17
    28be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e8       	ldi	r20, 0x80	; 128
    28ce:	5f e3       	ldi	r21, 0x3F	; 63
    28d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d4:	88 23       	and	r24, r24
    28d6:	2c f4       	brge	.+10     	; 0x28e2 <handling+0x176>
		__ticks = 1;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9c 8b       	std	Y+20, r25	; 0x14
    28de:	8b 8b       	std	Y+19, r24	; 0x13
    28e0:	3f c0       	rjmp	.+126    	; 0x2960 <handling+0x1f4>
	else if (__tmp > 65535)
    28e2:	6d 89       	ldd	r22, Y+21	; 0x15
    28e4:	7e 89       	ldd	r23, Y+22	; 0x16
    28e6:	8f 89       	ldd	r24, Y+23	; 0x17
    28e8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	3f ef       	ldi	r19, 0xFF	; 255
    28ee:	4f e7       	ldi	r20, 0x7F	; 127
    28f0:	57 e4       	ldi	r21, 0x47	; 71
    28f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f6:	18 16       	cp	r1, r24
    28f8:	4c f5       	brge	.+82     	; 0x294c <handling+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28fa:	69 8d       	ldd	r22, Y+25	; 0x19
    28fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	40 e2       	ldi	r20, 0x20	; 32
    2908:	51 e4       	ldi	r21, 0x41	; 65
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	0f c0       	rjmp	.+30     	; 0x2942 <handling+0x1d6>
    2924:	89 e1       	ldi	r24, 0x19	; 25
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9a 8b       	std	Y+18, r25	; 0x12
    292a:	89 8b       	std	Y+17, r24	; 0x11
    292c:	89 89       	ldd	r24, Y+17	; 0x11
    292e:	9a 89       	ldd	r25, Y+18	; 0x12
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	f1 f7       	brne	.-4      	; 0x2930 <handling+0x1c4>
    2934:	9a 8b       	std	Y+18, r25	; 0x12
    2936:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
    293a:	9c 89       	ldd	r25, Y+20	; 0x14
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	9c 8b       	std	Y+20, r25	; 0x14
    2940:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	8b 89       	ldd	r24, Y+19	; 0x13
    2944:	9c 89       	ldd	r25, Y+20	; 0x14
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	69 f7       	brne	.-38     	; 0x2924 <handling+0x1b8>
    294a:	14 c0       	rjmp	.+40     	; 0x2974 <handling+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294c:	6d 89       	ldd	r22, Y+21	; 0x15
    294e:	7e 89       	ldd	r23, Y+22	; 0x16
    2950:	8f 89       	ldd	r24, Y+23	; 0x17
    2952:	98 8d       	ldd	r25, Y+24	; 0x18
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9c 8b       	std	Y+20, r25	; 0x14
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	8b 89       	ldd	r24, Y+19	; 0x13
    2962:	9c 89       	ldd	r25, Y+20	; 0x14
    2964:	98 8b       	std	Y+16, r25	; 0x10
    2966:	8f 87       	std	Y+15, r24	; 0x0f
    2968:	8f 85       	ldd	r24, Y+15	; 0x0f
    296a:	98 89       	ldd	r25, Y+16	; 0x10
    296c:	01 97       	sbiw	r24, 0x01	; 1
    296e:	f1 f7       	brne	.-4      	; 0x296c <handling+0x200>
    2970:	98 8b       	std	Y+16, r25	; 0x10
    2972:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		CLCD_voidClearLCD();
    2974:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
		gameinit();
    2978:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <gameinit>
		row_ball=0;
    297c:	10 92 e8 00 	sts	0x00E8, r1
		col_ball =1;
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	80 93 dd 00 	sts	0x00DD, r24
    2986:	91 c0       	rjmp	.+290    	; 0x2aaa <handling+0x33e>
	}
	else if(P2>P1 )
    2988:	90 91 e5 00 	lds	r25, 0x00E5
    298c:	80 91 e4 00 	lds	r24, 0x00E4
    2990:	89 17       	cp	r24, r25
    2992:	08 f0       	brcs	.+2      	; 0x2996 <handling+0x22a>
    2994:	8a c0       	rjmp	.+276    	; 0x2aaa <handling+0x33e>
	{
		CLCD_voidClearLCD();
    2996:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
		CLCD_voidGoToXY(0,0);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	60 e0       	ldi	r22, 0x00	; 0
    299e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
		CLCD_voidSendString("Player 2 Won...");
    29a2:	88 e8       	ldi	r24, 0x88	; 136
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
		res2++;
    29aa:	80 91 e7 00 	lds	r24, 0x00E7
    29ae:	8f 5f       	subi	r24, 0xFF	; 255
    29b0:	80 93 e7 00 	sts	0x00E7, r24
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	aa ef       	ldi	r26, 0xFA	; 250
    29ba:	b3 e4       	ldi	r27, 0x43	; 67
    29bc:	8b 87       	std	Y+11, r24	; 0x0b
    29be:	9c 87       	std	Y+12, r25	; 0x0c
    29c0:	ad 87       	std	Y+13, r26	; 0x0d
    29c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	4a e7       	ldi	r20, 0x7A	; 122
    29d2:	53 e4       	ldi	r21, 0x43	; 67
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8f 83       	std	Y+7, r24	; 0x07
    29de:	98 87       	std	Y+8, r25	; 0x08
    29e0:	a9 87       	std	Y+9, r26	; 0x09
    29e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29e4:	6f 81       	ldd	r22, Y+7	; 0x07
    29e6:	78 85       	ldd	r23, Y+8	; 0x08
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <handling+0x29a>
		__ticks = 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <handling+0x318>
	else if (__tmp > 65535)
    2a06:	6f 81       	ldd	r22, Y+7	; 0x07
    2a08:	78 85       	ldd	r23, Y+8	; 0x08
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	4c f5       	brge	.+82     	; 0x2a70 <handling+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9e 83       	std	Y+6, r25	; 0x06
    2a44:	8d 83       	std	Y+5, r24	; 0x05
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <handling+0x2fa>
    2a48:	89 e1       	ldi	r24, 0x19	; 25
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9c 83       	std	Y+4, r25	; 0x04
    2a4e:	8b 83       	std	Y+3, r24	; 0x03
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <handling+0x2e8>
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	8d 81       	ldd	r24, Y+5	; 0x05
    2a68:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f7       	brne	.-38     	; 0x2a48 <handling+0x2dc>
    2a6e:	14 c0       	rjmp	.+40     	; 0x2a98 <handling+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a70:	6f 81       	ldd	r22, Y+7	; 0x07
    2a72:	78 85       	ldd	r23, Y+8	; 0x08
    2a74:	89 85       	ldd	r24, Y+9	; 0x09
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9e 83       	std	Y+6, r25	; 0x06
    2a82:	8d 83       	std	Y+5, r24	; 0x05
    2a84:	8d 81       	ldd	r24, Y+5	; 0x05
    2a86:	9e 81       	ldd	r25, Y+6	; 0x06
    2a88:	9a 83       	std	Y+2, r25	; 0x02
    2a8a:	89 83       	std	Y+1, r24	; 0x01
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <handling+0x324>
    2a94:	9a 83       	std	Y+2, r25	; 0x02
    2a96:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		CLCD_voidClearLCD();
    2a98:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
		gameinit();
    2a9c:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <gameinit>
		row_ball=0;
    2aa0:	10 92 e8 00 	sts	0x00E8, r1
		col_ball =2;
    2aa4:	82 e0       	ldi	r24, 0x02	; 2
    2aa6:	80 93 dd 00 	sts	0x00DD, r24

	}
	P1=0,P2=0;
    2aaa:	10 92 e4 00 	sts	0x00E4, r1
    2aae:	10 92 e5 00 	sts	0x00E5, r1


}
    2ab2:	aa 96       	adiw	r28, 0x2a	; 42
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <gameinit>:
void gameinit(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	aa 97       	sbiw	r28, 0x2a	; 42
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendString("p1 score ");
    2ad8:	88 e9       	ldi	r24, 0x98	; 152
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
	CLCD_voidDisplayNumber(res1);
    2ae8:	80 91 e6 00 	lds	r24, 0x00E6
    2aec:	88 2f       	mov	r24, r24
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a0 e0       	ldi	r26, 0x00	; 0
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <CLCD_voidDisplayNumber>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	aa e7       	ldi	r26, 0x7A	; 122
    2b02:	b4 e4       	ldi	r27, 0x44	; 68
    2b04:	8f a3       	std	Y+39, r24	; 0x27
    2b06:	98 a7       	std	Y+40, r25	; 0x28
    2b08:	a9 a7       	std	Y+41, r26	; 0x29
    2b0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b10:	89 a5       	ldd	r24, Y+41	; 0x29
    2b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4a e7       	ldi	r20, 0x7A	; 122
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	8b a3       	std	Y+35, r24	; 0x23
    2b26:	9c a3       	std	Y+36, r25	; 0x24
    2b28:	ad a3       	std	Y+37, r26	; 0x25
    2b2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b30:	8d a1       	ldd	r24, Y+37	; 0x25
    2b32:	9e a1       	ldd	r25, Y+38	; 0x26
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e8       	ldi	r20, 0x80	; 128
    2b3a:	5f e3       	ldi	r21, 0x3F	; 63
    2b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	2c f4       	brge	.+10     	; 0x2b4e <gameinit+0x8a>
		__ticks = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	9a a3       	std	Y+34, r25	; 0x22
    2b4a:	89 a3       	std	Y+33, r24	; 0x21
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <gameinit+0x108>
	else if (__tmp > 65535)
    2b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b50:	7c a1       	ldd	r23, Y+36	; 0x24
    2b52:	8d a1       	ldd	r24, Y+37	; 0x25
    2b54:	9e a1       	ldd	r25, Y+38	; 0x26
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	4c f5       	brge	.+82     	; 0x2bb8 <gameinit+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b66:	6f a1       	ldd	r22, Y+39	; 0x27
    2b68:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e2       	ldi	r20, 0x20	; 32
    2b74:	51 e4       	ldi	r21, 0x41	; 65
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	9a a3       	std	Y+34, r25	; 0x22
    2b8c:	89 a3       	std	Y+33, r24	; 0x21
    2b8e:	0f c0       	rjmp	.+30     	; 0x2bae <gameinit+0xea>
    2b90:	89 e1       	ldi	r24, 0x19	; 25
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	98 a3       	std	Y+32, r25	; 0x20
    2b96:	8f 8f       	std	Y+31, r24	; 0x1f
    2b98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9a:	98 a1       	ldd	r25, Y+32	; 0x20
    2b9c:	01 97       	sbiw	r24, 0x01	; 1
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <gameinit+0xd8>
    2ba0:	98 a3       	std	Y+32, r25	; 0x20
    2ba2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	9a a3       	std	Y+34, r25	; 0x22
    2bac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bae:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	69 f7       	brne	.-38     	; 0x2b90 <gameinit+0xcc>
    2bb6:	14 c0       	rjmp	.+40     	; 0x2be0 <gameinit+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bba:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9a a3       	std	Y+34, r25	; 0x22
    2bca:	89 a3       	std	Y+33, r24	; 0x21
    2bcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bce:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <gameinit+0x114>
    2bdc:	9e 8f       	std	Y+30, r25	; 0x1e
    2bde:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	CLCD_voidClearLCD();
    2be0:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
	CLCD_voidSendString("p2 score ");
    2be4:	82 ea       	ldi	r24, 0xA2	; 162
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
	CLCD_voidDisplayNumber(res2);
    2bf4:	80 91 e7 00 	lds	r24, 0x00E7
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e0       	ldi	r26, 0x00	; 0
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	bc 01       	movw	r22, r24
    2c02:	cd 01       	movw	r24, r26
    2c04:	0e 94 56 0f 	call	0x1eac	; 0x1eac <CLCD_voidDisplayNumber>
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	aa e7       	ldi	r26, 0x7A	; 122
    2c0e:	b4 e4       	ldi	r27, 0x44	; 68
    2c10:	89 8f       	std	Y+25, r24	; 0x19
    2c12:	9a 8f       	std	Y+26, r25	; 0x1a
    2c14:	ab 8f       	std	Y+27, r26	; 0x1b
    2c16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	69 8d       	ldd	r22, Y+25	; 0x19
    2c1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a e7       	ldi	r20, 0x7A	; 122
    2c26:	53 e4       	ldi	r21, 0x43	; 67
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8d 8b       	std	Y+21, r24	; 0x15
    2c32:	9e 8b       	std	Y+22, r25	; 0x16
    2c34:	af 8b       	std	Y+23, r26	; 0x17
    2c36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c38:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <gameinit+0x196>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9c 8b       	std	Y+20, r25	; 0x14
    2c56:	8b 8b       	std	Y+19, r24	; 0x13
    2c58:	3f c0       	rjmp	.+126    	; 0x2cd8 <gameinit+0x214>
	else if (__tmp > 65535)
    2c5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c60:	98 8d       	ldd	r25, Y+24	; 0x18
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	4c f5       	brge	.+82     	; 0x2cc4 <gameinit+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	69 8d       	ldd	r22, Y+25	; 0x19
    2c74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e2       	ldi	r20, 0x20	; 32
    2c80:	51 e4       	ldi	r21, 0x41	; 65
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	9c 8b       	std	Y+20, r25	; 0x14
    2c98:	8b 8b       	std	Y+19, r24	; 0x13
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <gameinit+0x1f6>
    2c9c:	89 e1       	ldi	r24, 0x19	; 25
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9a 8b       	std	Y+18, r25	; 0x12
    2ca2:	89 8b       	std	Y+17, r24	; 0x11
    2ca4:	89 89       	ldd	r24, Y+17	; 0x11
    2ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <gameinit+0x1e4>
    2cac:	9a 8b       	std	Y+18, r25	; 0x12
    2cae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	9c 8b       	std	Y+20, r25	; 0x14
    2cb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	69 f7       	brne	.-38     	; 0x2c9c <gameinit+0x1d8>
    2cc2:	14 c0       	rjmp	.+40     	; 0x2cec <gameinit+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cca:	98 8d       	ldd	r25, Y+24	; 0x18
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9c 8b       	std	Y+20, r25	; 0x14
    2cd6:	8b 8b       	std	Y+19, r24	; 0x13
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	98 8b       	std	Y+16, r25	; 0x10
    2cde:	8f 87       	std	Y+15, r24	; 0x0f
    2ce0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ce2:	98 89       	ldd	r25, Y+16	; 0x10
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <gameinit+0x220>
    2ce8:	98 8b       	std	Y+16, r25	; 0x10
    2cea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	CLCD_voidClearLCD();
    2cec:	0e 94 97 10 	call	0x212e	; 0x212e <CLCD_voidClearLCD>
	CLCD_voidSendString("|");
    2cf0:	8c ea       	ldi	r24, 0xAC	; 172
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
	CLCD_voidGoToXY(0,14);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	6e e0       	ldi	r22, 0x0E	; 14
    2cfc:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
	CLCD_voidSendString("|");
    2d00:	8c ea       	ldi	r24, 0xAC	; 172
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
	CLCD_voidGoToXY(0,1);
    2d08:	80 e0       	ldi	r24, 0x00	; 0
    2d0a:	61 e0       	ldi	r22, 0x01	; 1
    2d0c:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
	CLCD_voidSendString("O");
    2d10:	8e ea       	ldi	r24, 0xAE	; 174
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	aa ef       	ldi	r26, 0xFA	; 250
    2d1e:	b3 e4       	ldi	r27, 0x43	; 67
    2d20:	8b 87       	std	Y+11, r24	; 0x0b
    2d22:	9c 87       	std	Y+12, r25	; 0x0c
    2d24:	ad 87       	std	Y+13, r26	; 0x0d
    2d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	4a e7       	ldi	r20, 0x7A	; 122
    2d36:	53 e4       	ldi	r21, 0x43	; 67
    2d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	8f 83       	std	Y+7, r24	; 0x07
    2d42:	98 87       	std	Y+8, r25	; 0x08
    2d44:	a9 87       	std	Y+9, r26	; 0x09
    2d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d48:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4a:	78 85       	ldd	r23, Y+8	; 0x08
    2d4c:	89 85       	ldd	r24, Y+9	; 0x09
    2d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	40 e8       	ldi	r20, 0x80	; 128
    2d56:	5f e3       	ldi	r21, 0x3F	; 63
    2d58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5c:	88 23       	and	r24, r24
    2d5e:	2c f4       	brge	.+10     	; 0x2d6a <gameinit+0x2a6>
		__ticks = 1;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9e 83       	std	Y+6, r25	; 0x06
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	3f c0       	rjmp	.+126    	; 0x2de8 <gameinit+0x324>
	else if (__tmp > 65535)
    2d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d6c:	78 85       	ldd	r23, Y+8	; 0x08
    2d6e:	89 85       	ldd	r24, Y+9	; 0x09
    2d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	3f ef       	ldi	r19, 0xFF	; 255
    2d76:	4f e7       	ldi	r20, 0x7F	; 127
    2d78:	57 e4       	ldi	r21, 0x47	; 71
    2d7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d7e:	18 16       	cp	r1, r24
    2d80:	4c f5       	brge	.+82     	; 0x2dd4 <gameinit+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	bc 01       	movw	r22, r24
    2d9c:	cd 01       	movw	r24, r26
    2d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
    2daa:	0f c0       	rjmp	.+30     	; 0x2dca <gameinit+0x306>
    2dac:	89 e1       	ldi	r24, 0x19	; 25
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <gameinit+0x2f4>
    2dbc:	9c 83       	std	Y+4, r25	; 0x04
    2dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dca:	8d 81       	ldd	r24, Y+5	; 0x05
    2dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	69 f7       	brne	.-38     	; 0x2dac <gameinit+0x2e8>
    2dd2:	14 c0       	rjmp	.+40     	; 0x2dfc <gameinit+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd6:	78 85       	ldd	r23, Y+8	; 0x08
    2dd8:	89 85       	ldd	r24, Y+9	; 0x09
    2dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	9e 83       	std	Y+6, r25	; 0x06
    2de6:	8d 83       	std	Y+5, r24	; 0x05
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <gameinit+0x330>
    2df8:	9a 83       	std	Y+2, r25	; 0x02
    2dfa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	CLCD_voidGoToXY(0,1);
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	61 e0       	ldi	r22, 0x01	; 1
    2e00:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
	CLCD_voidSendString(" ");
    2e04:	80 eb       	ldi	r24, 0xB0	; 176
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
}
    2e0c:	aa 96       	adiw	r28, 0x2a	; 42
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <ISR_INT0>:
void ISR_INT0()
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	2e 97       	sbiw	r28, 0x0e	; 14
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
	P1+=1;
    2e32:	80 91 e4 00 	lds	r24, 0x00E4
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	80 93 e4 00 	sts	0x00E4, r24
	for (col_ball = 1; col_ball < 14; col_ball++) {
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	80 93 dd 00 	sts	0x00DD, r24
    2e42:	92 c0       	rjmp	.+292    	; 0x2f68 <ISR_INT0+0x14a>
	    row_ball = (col_ball & 1); // Extracting the least significant bit directly
    2e44:	80 91 dd 00 	lds	r24, 0x00DD
    2e48:	81 70       	andi	r24, 0x01	; 1
    2e4a:	80 93 e8 00 	sts	0x00E8, r24

		CLCD_voidGoToXY(row_ball,col_ball);
    2e4e:	80 91 e8 00 	lds	r24, 0x00E8
    2e52:	90 91 dd 00 	lds	r25, 0x00DD
    2e56:	69 2f       	mov	r22, r25
    2e58:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
		CLCD_voidSendString("O");
    2e5c:	8e ea       	ldi	r24, 0xAE	; 174
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	a8 e4       	ldi	r26, 0x48	; 72
    2e6a:	b2 e4       	ldi	r27, 0x42	; 66
    2e6c:	8b 87       	std	Y+11, r24	; 0x0b
    2e6e:	9c 87       	std	Y+12, r25	; 0x0c
    2e70:	ad 87       	std	Y+13, r26	; 0x0d
    2e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	4a e7       	ldi	r20, 0x7A	; 122
    2e82:	53 e4       	ldi	r21, 0x43	; 67
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8f 83       	std	Y+7, r24	; 0x07
    2e8e:	98 87       	std	Y+8, r25	; 0x08
    2e90:	a9 87       	std	Y+9, r26	; 0x09
    2e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	5f e3       	ldi	r21, 0x3F	; 63
    2ea4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea8:	88 23       	and	r24, r24
    2eaa:	2c f4       	brge	.+10     	; 0x2eb6 <ISR_INT0+0x98>
		__ticks = 1;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	3f c0       	rjmp	.+126    	; 0x2f34 <ISR_INT0+0x116>
	else if (__tmp > 65535)
    2eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb8:	78 85       	ldd	r23, Y+8	; 0x08
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	4c f5       	brge	.+82     	; 0x2f20 <ISR_INT0+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9e 83       	std	Y+6, r25	; 0x06
    2ef4:	8d 83       	std	Y+5, r24	; 0x05
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <ISR_INT0+0xf8>
    2ef8:	89 e1       	ldi	r24, 0x19	; 25
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9c 83       	std	Y+4, r25	; 0x04
    2efe:	8b 83       	std	Y+3, r24	; 0x03
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	9c 81       	ldd	r25, Y+4	; 0x04
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <ISR_INT0+0xe6>
    2f08:	9c 83       	std	Y+4, r25	; 0x04
    2f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	9e 83       	std	Y+6, r25	; 0x06
    2f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	69 f7       	brne	.-38     	; 0x2ef8 <ISR_INT0+0xda>
    2f1e:	14 c0       	rjmp	.+40     	; 0x2f48 <ISR_INT0+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f20:	6f 81       	ldd	r22, Y+7	; 0x07
    2f22:	78 85       	ldd	r23, Y+8	; 0x08
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2c:	dc 01       	movw	r26, r24
    2f2e:	cb 01       	movw	r24, r22
    2f30:	9e 83       	std	Y+6, r25	; 0x06
    2f32:	8d 83       	std	Y+5, r24	; 0x05
    2f34:	8d 81       	ldd	r24, Y+5	; 0x05
    2f36:	9e 81       	ldd	r25, Y+6	; 0x06
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <ISR_INT0+0x122>
    2f44:	9a 83       	std	Y+2, r25	; 0x02
    2f46:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		CLCD_voidGoToXY(row_ball,col_ball);
    2f48:	80 91 e8 00 	lds	r24, 0x00E8
    2f4c:	90 91 dd 00 	lds	r25, 0x00DD
    2f50:	69 2f       	mov	r22, r25
    2f52:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
		CLCD_voidSendString(" ");
    2f56:	80 eb       	ldi	r24, 0xB0	; 176
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
	CLCD_voidSendString(" ");
}
void ISR_INT0()
{
	P1+=1;
	for (col_ball = 1; col_ball < 14; col_ball++) {
    2f5e:	80 91 dd 00 	lds	r24, 0x00DD
    2f62:	8f 5f       	subi	r24, 0xFF	; 255
    2f64:	80 93 dd 00 	sts	0x00DD, r24
    2f68:	80 91 dd 00 	lds	r24, 0x00DD
    2f6c:	8e 30       	cpi	r24, 0x0E	; 14
    2f6e:	08 f4       	brcc	.+2      	; 0x2f72 <ISR_INT0+0x154>
    2f70:	69 cf       	rjmp	.-302    	; 0x2e44 <ISR_INT0+0x26>
		CLCD_voidSendString("O");
		_delay_ms(50);
		CLCD_voidGoToXY(row_ball,col_ball);
		CLCD_voidSendString(" ");
	}
}
    2f72:	2e 96       	adiw	r28, 0x0e	; 14
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	08 95       	ret

00002f84 <ISR_INT1>:


void ISR_INT1()
{
    2f84:	df 93       	push	r29
    2f86:	cf 93       	push	r28
    2f88:	cd b7       	in	r28, 0x3d	; 61
    2f8a:	de b7       	in	r29, 0x3e	; 62
    2f8c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
	P2+=1;
    2f98:	80 91 e5 00 	lds	r24, 0x00E5
    2f9c:	8f 5f       	subi	r24, 0xFF	; 255
    2f9e:	80 93 e5 00 	sts	0x00E5, r24
	for(col_ball=14;col_ball>1;col_ball--){
    2fa2:	8e e0       	ldi	r24, 0x0E	; 14
    2fa4:	80 93 dd 00 	sts	0x00DD, r24
    2fa8:	92 c0       	rjmp	.+292    	; 0x30ce <ISR_INT1+0x14a>
		row_ball = (col_ball & 1); // Extracting the least significant bit directly
    2faa:	80 91 dd 00 	lds	r24, 0x00DD
    2fae:	81 70       	andi	r24, 0x01	; 1
    2fb0:	80 93 e8 00 	sts	0x00E8, r24

		CLCD_voidGoToXY(row_ball,col_ball);
    2fb4:	80 91 e8 00 	lds	r24, 0x00E8
    2fb8:	90 91 dd 00 	lds	r25, 0x00DD
    2fbc:	69 2f       	mov	r22, r25
    2fbe:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
		CLCD_voidSendString("O");
    2fc2:	8e ea       	ldi	r24, 0xAE	; 174
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	a8 e4       	ldi	r26, 0x48	; 72
    2fd0:	b2 e4       	ldi	r27, 0x42	; 66
    2fd2:	8b 87       	std	Y+11, r24	; 0x0b
    2fd4:	9c 87       	std	Y+12, r25	; 0x0c
    2fd6:	ad 87       	std	Y+13, r26	; 0x0d
    2fd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	4a e7       	ldi	r20, 0x7A	; 122
    2fe8:	53 e4       	ldi	r21, 0x43	; 67
    2fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	8f 83       	std	Y+7, r24	; 0x07
    2ff4:	98 87       	std	Y+8, r25	; 0x08
    2ff6:	a9 87       	std	Y+9, r26	; 0x09
    2ff8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffc:	78 85       	ldd	r23, Y+8	; 0x08
    2ffe:	89 85       	ldd	r24, Y+9	; 0x09
    3000:	9a 85       	ldd	r25, Y+10	; 0x0a
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	40 e8       	ldi	r20, 0x80	; 128
    3008:	5f e3       	ldi	r21, 0x3F	; 63
    300a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300e:	88 23       	and	r24, r24
    3010:	2c f4       	brge	.+10     	; 0x301c <ISR_INT1+0x98>
		__ticks = 1;
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	9e 83       	std	Y+6, r25	; 0x06
    3018:	8d 83       	std	Y+5, r24	; 0x05
    301a:	3f c0       	rjmp	.+126    	; 0x309a <ISR_INT1+0x116>
	else if (__tmp > 65535)
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	3f ef       	ldi	r19, 0xFF	; 255
    3028:	4f e7       	ldi	r20, 0x7F	; 127
    302a:	57 e4       	ldi	r21, 0x47	; 71
    302c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3030:	18 16       	cp	r1, r24
    3032:	4c f5       	brge	.+82     	; 0x3086 <ISR_INT1+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3034:	6b 85       	ldd	r22, Y+11	; 0x0b
    3036:	7c 85       	ldd	r23, Y+12	; 0x0c
    3038:	8d 85       	ldd	r24, Y+13	; 0x0d
    303a:	9e 85       	ldd	r25, Y+14	; 0x0e
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	40 e2       	ldi	r20, 0x20	; 32
    3042:	51 e4       	ldi	r21, 0x41	; 65
    3044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	8d 83       	std	Y+5, r24	; 0x05
    305c:	0f c0       	rjmp	.+30     	; 0x307c <ISR_INT1+0xf8>
    305e:	89 e1       	ldi	r24, 0x19	; 25
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9c 83       	std	Y+4, r25	; 0x04
    3064:	8b 83       	std	Y+3, r24	; 0x03
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	9c 81       	ldd	r25, Y+4	; 0x04
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <ISR_INT1+0xe6>
    306e:	9c 83       	std	Y+4, r25	; 0x04
    3070:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	01 97       	sbiw	r24, 0x01	; 1
    3078:	9e 83       	std	Y+6, r25	; 0x06
    307a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307c:	8d 81       	ldd	r24, Y+5	; 0x05
    307e:	9e 81       	ldd	r25, Y+6	; 0x06
    3080:	00 97       	sbiw	r24, 0x00	; 0
    3082:	69 f7       	brne	.-38     	; 0x305e <ISR_INT1+0xda>
    3084:	14 c0       	rjmp	.+40     	; 0x30ae <ISR_INT1+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3086:	6f 81       	ldd	r22, Y+7	; 0x07
    3088:	78 85       	ldd	r23, Y+8	; 0x08
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	9a 85       	ldd	r25, Y+10	; 0x0a
    308e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	9e 83       	std	Y+6, r25	; 0x06
    3098:	8d 83       	std	Y+5, r24	; 0x05
    309a:	8d 81       	ldd	r24, Y+5	; 0x05
    309c:	9e 81       	ldd	r25, Y+6	; 0x06
    309e:	9a 83       	std	Y+2, r25	; 0x02
    30a0:	89 83       	std	Y+1, r24	; 0x01
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	9a 81       	ldd	r25, Y+2	; 0x02
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <ISR_INT1+0x122>
    30aa:	9a 83       	std	Y+2, r25	; 0x02
    30ac:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		CLCD_voidGoToXY(row_ball,col_ball);
    30ae:	80 91 e8 00 	lds	r24, 0x00E8
    30b2:	90 91 dd 00 	lds	r25, 0x00DD
    30b6:	69 2f       	mov	r22, r25
    30b8:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <CLCD_voidGoToXY>
		CLCD_voidSendString(" ");
    30bc:	80 eb       	ldi	r24, 0xB0	; 176
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidSendString>


void ISR_INT1()
{
	P2+=1;
	for(col_ball=14;col_ball>1;col_ball--){
    30c4:	80 91 dd 00 	lds	r24, 0x00DD
    30c8:	81 50       	subi	r24, 0x01	; 1
    30ca:	80 93 dd 00 	sts	0x00DD, r24
    30ce:	80 91 dd 00 	lds	r24, 0x00DD
    30d2:	82 30       	cpi	r24, 0x02	; 2
    30d4:	08 f0       	brcs	.+2      	; 0x30d8 <ISR_INT1+0x154>
    30d6:	69 cf       	rjmp	.-302    	; 0x2faa <ISR_INT1+0x26>
		_delay_ms(50);
		CLCD_voidGoToXY(row_ball,col_ball);
		CLCD_voidSendString(" ");
	}

}
    30d8:	2e 96       	adiw	r28, 0x0e	; 14
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	08 95       	ret

000030ea <main>:
#include "../../../MCAL/DIO/DIO_interface.h"
#include "../../../MCAL/GIE/GIE_interface.h"
#include "../../../MCAL/EXTI/EXTI_interface.h"
#include"app.h"
int main()
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
	PORT_voidInit();
    30f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	EXTI_voidInt0Init();
    30f6:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <EXTI_voidInt0Init>
	EXTI_voidInt1Init();
    30fa:	0e 94 fe 05 	call	0xbfc	; 0xbfc <EXTI_voidInt1Init>
	EXTI_u8INT0Setcallback(ISR_INT0);
    30fe:	8f e0       	ldi	r24, 0x0F	; 15
    3100:	97 e1       	ldi	r25, 0x17	; 23
    3102:	0e 94 2f 06 	call	0xc5e	; 0xc5e <EXTI_u8INT0Setcallback>
	EXTI_u8INT1Setcallback(ISR_INT1);
    3106:	82 ec       	ldi	r24, 0xC2	; 194
    3108:	97 e1       	ldi	r25, 0x17	; 23
    310a:	0e 94 4c 06 	call	0xc98	; 0xc98 <EXTI_u8INT1Setcallback>
	GIE_voidEnable();
    310e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <GIE_voidEnable>
	start();
    3112:	0e 94 a7 12 	call	0x254e	; 0x254e <start>
	gameinit();
    3116:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <gameinit>
	while(1)
	{
		handling();
    311a:	0e 94 b6 13 	call	0x276c	; 0x276c <handling>
    311e:	fd cf       	rjmp	.-6      	; 0x311a <main+0x30>

00003120 <__udivmodsi4>:
    3120:	a1 e2       	ldi	r26, 0x21	; 33
    3122:	1a 2e       	mov	r1, r26
    3124:	aa 1b       	sub	r26, r26
    3126:	bb 1b       	sub	r27, r27
    3128:	fd 01       	movw	r30, r26
    312a:	0d c0       	rjmp	.+26     	; 0x3146 <__udivmodsi4_ep>

0000312c <__udivmodsi4_loop>:
    312c:	aa 1f       	adc	r26, r26
    312e:	bb 1f       	adc	r27, r27
    3130:	ee 1f       	adc	r30, r30
    3132:	ff 1f       	adc	r31, r31
    3134:	a2 17       	cp	r26, r18
    3136:	b3 07       	cpc	r27, r19
    3138:	e4 07       	cpc	r30, r20
    313a:	f5 07       	cpc	r31, r21
    313c:	20 f0       	brcs	.+8      	; 0x3146 <__udivmodsi4_ep>
    313e:	a2 1b       	sub	r26, r18
    3140:	b3 0b       	sbc	r27, r19
    3142:	e4 0b       	sbc	r30, r20
    3144:	f5 0b       	sbc	r31, r21

00003146 <__udivmodsi4_ep>:
    3146:	66 1f       	adc	r22, r22
    3148:	77 1f       	adc	r23, r23
    314a:	88 1f       	adc	r24, r24
    314c:	99 1f       	adc	r25, r25
    314e:	1a 94       	dec	r1
    3150:	69 f7       	brne	.-38     	; 0x312c <__udivmodsi4_loop>
    3152:	60 95       	com	r22
    3154:	70 95       	com	r23
    3156:	80 95       	com	r24
    3158:	90 95       	com	r25
    315a:	9b 01       	movw	r18, r22
    315c:	ac 01       	movw	r20, r24
    315e:	bd 01       	movw	r22, r26
    3160:	cf 01       	movw	r24, r30
    3162:	08 95       	ret

00003164 <__prologue_saves__>:
    3164:	2f 92       	push	r2
    3166:	3f 92       	push	r3
    3168:	4f 92       	push	r4
    316a:	5f 92       	push	r5
    316c:	6f 92       	push	r6
    316e:	7f 92       	push	r7
    3170:	8f 92       	push	r8
    3172:	9f 92       	push	r9
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	ca 1b       	sub	r28, r26
    318e:	db 0b       	sbc	r29, r27
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	f8 94       	cli
    3194:	de bf       	out	0x3e, r29	; 62
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	cd bf       	out	0x3d, r28	; 61
    319a:	09 94       	ijmp

0000319c <__epilogue_restores__>:
    319c:	2a 88       	ldd	r2, Y+18	; 0x12
    319e:	39 88       	ldd	r3, Y+17	; 0x11
    31a0:	48 88       	ldd	r4, Y+16	; 0x10
    31a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    31a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    31aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    31ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ae:	b9 84       	ldd	r11, Y+9	; 0x09
    31b0:	c8 84       	ldd	r12, Y+8	; 0x08
    31b2:	df 80       	ldd	r13, Y+7	; 0x07
    31b4:	ee 80       	ldd	r14, Y+6	; 0x06
    31b6:	fd 80       	ldd	r15, Y+5	; 0x05
    31b8:	0c 81       	ldd	r16, Y+4	; 0x04
    31ba:	1b 81       	ldd	r17, Y+3	; 0x03
    31bc:	aa 81       	ldd	r26, Y+2	; 0x02
    31be:	b9 81       	ldd	r27, Y+1	; 0x01
    31c0:	ce 0f       	add	r28, r30
    31c2:	d1 1d       	adc	r29, r1
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	ed 01       	movw	r28, r26
    31d0:	08 95       	ret

000031d2 <_exit>:
    31d2:	f8 94       	cli

000031d4 <__stop_program>:
    31d4:	ff cf       	rjmp	.-2      	; 0x31d4 <__stop_program>
